%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 12/3/2021
%%BoundingBox: 0 0 693 400
%%HiResBoundingBox: 0 0 692.0038 400
%%CropBox: 0 0 692.0038 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 21226 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFF
%CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFF
%CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFF
%CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFF
%CBFFCBFFCBFFCBFFCBFFCBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBCBCAFFCBCBCAFFCBCBCAFF
%CBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCB
%CAFFCBFFCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFF
%CBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCB
%CAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBA8CBA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8FFA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBA8CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFF
%CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBA9A3CBCBFFCBFFCBFFCBFF
%CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFF
%CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFF
%CBFFCBFFCBFFCBFFCBFFCBFFCBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB7E7F7E
%A9A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBCACBA8FFCBCBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBCAFFCB
%FFA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBFFCBCBCAFFCBCBCAFF
%CBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBFF
%CBFFCBFFA9A97F7F7FA3CBFFCBFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFF
%CBCBCAFFCBCBA9FFCBCBCAFFFFCAA1CBCBFFCAFFCBCBCAFFCBCBC9C8C8C8
%CAFFFD04CB7DA2A8FFCBCBCAFFCBCBCAFFCBCBCAFFCBFFCBFFCBCBCAA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8C49BCBCBCB7E7F7E7FA8CBA8CBA8FFA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CAA7C9C8CAA8FFA1B59AC4A8CBA8CBA8CB
%A8CBA9C9C1C7C0C9A9CBA8CB7D21214CA2CBA8CBA8CBA8CBA8CBA8A97EA9
%CACBA8CBA8CBFFCBFFA9FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCB
%FFCBFFCBFFCBFFCBFFCBFFCAC4BDBC9ABCCAFFCBA97FA3A9FFCBFFCBFFCB
%FFCBFFC9C9C9CFC9FFCBFFCBFFCBFFCBFFCBFFCAC9C8CEC8C9CAFFCBC39A
%BC9AC3CAFFCBFFCBFFCBFFC9C8C1C7C3FFCBFFCBA1757021CBCBFFCBFFCB
%FFCBCBA9A97F7FA9FFCBFFCBFFCBA8FFA8A37EA9A2A9A8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA9CBA8CBA8CBA8FFCACBA8FFCBCA93BC9ABC9ACBCACB7EA3
%A8CBA8CBA8CBA8CBA8CBA8C9C8C9C8C9CACBA8FFCACBA8FFCACBA8CBC9C8
%C8C9C9CBA8FF9BBC9ABC99CAA9FFA8CBA8CBA9C9C1C79FA0A2FFCACB7699
%7576A8CBA8CBA8CBCAFF7E7F7E7F7EA9CACBA8CBA8CBCBCAFFFD057FA9CB
%FFCBFFCBFFCBFFCBFFC9C9C9CAC9CFCBFFCBFFCBFFCBFFCAFFCBC393BC9A
%C3CBFFCBA9A8FFCBCBCAFFCBCBCAFFCBCBCAFD04C9FFCBCBCAFFCBCBCAFF
%CBCBCBFFC9C9C8CFCBFFCBC39ABC9ACBCBFFCBFFCBFFCBFFC9C7C2C299CA
%A9FFCBCA99C2CAFFCBFFCBFFCBFFCBCBFD047FA8FFCBCBCAFFCBA8CBA8A9
%7E7F7E7FA8CBA8CBA8CBA8CBA8CBA8C9C8C8C8C9A8CBA8CBA8CBA8CBA8CB
%A8CBA8C393BC9BCBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBC8C9C8CAA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBC8C8A7CBA8CB9ABC9ACBA8CBA8CBA8CBA8CB
%A8CAA8CB9AC2A0CAA8A97E9975A9A9CBA8CBA8CBA8CBA8CB7E7F7EA9A8CB
%A8CBA8CBFFCBFFA97F7FA3A9FFCBFFCBFFCBFFCBFFCBFFC9C9C8CEC9FFCB
%FFCBFFCBFFCBFFCBFFCBFFCAC399CACBFFCBFFCBFFCBFFCBFFCBFFCBFFCB
%FFCBCFC8C9CBFFCBFFCBFFCBCBCBFFCBFFCBFFCBCFC8CFCBFFCAC3C3FFCB
%FFCBFFCBFFCBFFCBFFCBFFCAC3BCC2A1A97FA299A07E7FA3FFCBFFCBFFCB
%FFCBFF7F7FA9FFCBFFCBFFCBA8CBA8CB7E7F7ECBCACBA8CBA8CBA8CBA8CB
%A8CBC8C9C8CAA9CBA8CBA8CBA8CBA8CBA8CBA8CBA1BCA1CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA7C9CACBA8CBA8CBA2CBA2CBA2CBA8CBA8CBA9CA
%A8CBA8CBA2FFA8CBA8CBA8CBA8CBA8CBA8CBA8CB9AC29A7E7F7F7799BBC2
%7E7F7ECBCACBA8CBA8CBA8CB7ECBA8CBA8CBA8CBFFCBCBCAA97FCBCAFFCB
%CBCAFFCBCBCAFFCBCBA9CFC8C9CAFFCBCBCAFFCBCBCAFFCBCBCAFFCBFFA1
%CBCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBC9FFCBCBCACBA9CBA8CBA9
%CBA8FFCBCBCAFFCBCBCAFFCBFFCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBC3BB
%C27E7F7FA37EC3BBC37F7FA2FFCBCBCAFFCBCBCACBCBCBCAFFCBCBCAA8CB
%A8CB7EA9CACBA8CBA8CBA8CBA8CBA8CBA8CBA8C8C9CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA9CBA9CBA9CBA8CBA8CBA8CB
%A8CBA2CBA2CBA2CBA2CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA1BC99A27F7F7E7F9BC299C37E7FA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFC9FFCB
%FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCAC9C9CAC9
%CACAFFCBFFCBFFCBFFCBCBA9CBA8CBA9CBA8FFCBFFCBFFCBFFCBFFCBFFCB
%FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFC3C8A2A97FA97FA3BCC2C2C37EFFCB
%FFCBFFCBFFCBFFCBFFCBFFCBFFCBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8FFCBCBA8CBA8CBA8FFA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8C8C1C7C1C7C1C8A8CBA8CBA8CBA8CBA2CBA2CBA2CBA2CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA9CBC9CA7F7F7E7F
%7FA1BBC2BBC3A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBCBCAFFCBCBCAFFCB
%CBCAFFCBCBCAFFCBFFA27DA8FFCBFFCBCBA8FFCBCBCAFFCBCBCAFFCBCBCA
%FFCBCBCAFFCBCBCAFFCBC9C1C8C7C8C1C8C7CAA9FFCBCBCAFFCBCBA8CBA9
%CBA8CBA9CBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCA
%FFCBCBCAA97F7F7FA37EC2BBC2C3FFCAFFCBCBCAFFCBCBCAFFCBCBCAFFCB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBCBA2202728A2A8FF52277DFFCBCB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA7C79FC8C1C79FC7A7CBA8CB
%A8CBA8CBA2CBA2CBA2CBA2CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CB7E7F7E7F7E7F7EC3A0CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCB9AF84BF8
%287DC320F852FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBC9C1C8C7
%C8C7C8C7CACBFFCBFFCBFFCBCBA8CBA9CBA8CBCBFFCBFFCBFFCBFFCBFFCB
%FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFA8A27EA37FA37FA9CBFFCB
%FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CB7EA0C2BC4A51A2276F4AF87EA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBC9C7C1C8C1C7C1C7C9CAFD04C9A7CBA8CBA2CBA2CBA2CBA8CBA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBCBA2FD0577
%A177CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBFFCBCBCAFFCBCBCAFF
%CBCBCAFFCBCBCAFFCBFFA8A1A1C3C3FFCAC2BC7520A8CBFFCBFFCBFFCBCB
%CAFFCBCBCAFFCBCBA9C9C7C8C1C8C7C8C1C9C8C9C8C9C8C9C9CBA9CBA8CB
%A9CBA8FFCBFFCBFFCBFFCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCB
%CBFF779B77A2777877A1CBFFCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8A37F7F7EA3A8A977A19BA1A8
%CBA8FFA24C52CBA8CBA8CBA8CBA8CBA8CBA1C7C1C79FC8C1C8C8C9C8C9C8
%C9C8C9A2CBA2CBA2CBA2CBA8A8FD05A2CBA8CBA8CBA8CBCACBA8CBA8CBA8
%CBA8CBA8CBA8CBA27777A1FD0577CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBCB7FA37F7F7FFFFD04
%7FA9FFCBFFA827F8F8F8CBCBFFCBFFCBFFCBFFCBCAC7C8C7C8C7C8C7CEC9
%C9C8CEC9C9C9CBA9CBA8CBA9CBA8A8FD06A2A8FFCBFFCBFFA8CBA2FFCBFF
%CBFFCBFFCBFFCBFFCBA2779C77A177A277A2A8FFCBFFCBFFCBFFCBFFCBFF
%CBFFCBFFCBFFCBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8FFA87F7E7F7E
%A3A27F7E7F7ECBCACBCBA2F84B4A52A8CBA8CBA8CBA8CBA8CBA7C7C1C7C1
%C8C1C8C8C9C8C9C8C9C8C9A2CBA2CBA2CBA8A877A2A2A27DA27EA2A8CBCB
%A82727F8F827FFCACBA8CBA8CBA8CBCACB7777779B7778777777CBCBCBA8
%CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFF
%CBCBCAA97F7F7FA37FA97FA37FA3A8FFCBFFA19A9A9ACBFFCBCBCAFFCBCB
%CAFFCBC9C1C8C7C8C1C8C7C9C8C9C9C9C8C9C9CBA8CBA9CBA8CBFD09A2FF
%CAFF7D20FD04F8A2FFCBCBCAFFCBCBCAFFA87777A277A177A27778A2FFCB
%CBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CB7E7F7E7F7E7F7EA37EA37ECBA8FFA8CA9A999ACBA8CBA8CBA8CB
%A8CBA8CBA7C79FC8C1C79FC8C8C9C8C9C8C9C8C9A2CBA2CBA2CBA2A97DA2
%77A27EA277A8A8CBA9A26F4B20F8F852A8CBA8CBA8CBA8CBA8A27777779B
%FD0577A8A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBFFCBFFCBFFCBFFCB
%FFCBFFCBFFCBFFCBFFA9A97FA37FA3A9A97FA97FA97FA9A29C719A759C78
%CBCBFFCBFFCBFFCBFFCBC9C1C8C7C8C7C8C7C9C8CEC9C9C8CEC9CBA8CBA9
%CBA8CBA8FD08A2FFCBFFCA9A9A75F8F8F8A2CBFFCBFFCBFFCBFFA29C77A2
%77A277A2779CA2FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBA8CBA8CBA8
%CBA8CBA8CBA8CBA8CBA8CBCAA97E7F7E7F7EA97E7F7E7F7F7E7172717171
%777171719CA8FFA8CBA8CBA8CBC9C7C1C8C1C7C1C8C8C9C8C9C8C9C8C9A8
%CBA2CBA2CBA2CB7EA27DA2A2A277A8CACBA8CB9A994B05F8F877FFA8CBA8
%CBA8CBA8A2777777A27777777877A2A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFA97F7FA37F7F7FA37F7F
%7FA37172719C7172719C7171719CA2FFCAFFCBCBA9C9C7C8C1C8C7C8C1C9
%C9C9C8C9C9C9C8CBA9CBA8CBA9CBFD09A2FFCBA97FA3A2A97E7E52CBCBFF
%CBCBCAFFCBCB77A2777777A2779C7778A2FFCAFFCBCBCAFFCBCBCAFFCBCB
%CAFFCBCBCAA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB7E7F7E7F7E7F7E
%7F7E7F779A71724D78777871724D7871A1A8CBA8CBA8CBA1C7C1C79FC8C1
%C7C8C9C8C9C8C9C8C9A2CBA2CBA2CBA2A877A27EA277A29BC3A1CAA2A27E
%7F7E7F7FA3A2CBA8CBA8CBA8FFA2FD0477A2A277777771A2CACBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCB
%A97FA97FA37FA97FA37FC3C2C3717177CEC8C9A0C9A0C3C2FFCBFFCBFFCB
%CFC7C8C7C8C7C8C7CEC9C9C8CEC9C9C9CBA9CBA8CBA9CBFD07A2BC93BCB5
%BCB5A27FA37FA37F7FA9FFCBFFCBFFCBA277A27778A2CB77A2779CA2FFCB
%FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBA8CBA8CBA8CBA8CBA8CBA8CBA2A8
%A2A2A2A8A2A27E7F7E7F7E7F7E7E9AC2BCC29A9A9FC7C1C7C7C199C2A2A8
%A2A8A2A9A1C7C7C7C1C8C1C8C8C9C8C9C8C9C8C9A2CBA2CBA2CBA8A87DA2
%A2A2779A99BC93BC93B5777F7E7F7EA37E7FA8CBA8CBA8FF7D77777877A2
%A2FD0477A2CACBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBCBCAFFCBCBCAFF
%CBCBCAFFA277779C777777A2779C77A2779C77A277C3BBC2C2C27576C1C8
%C1C86F999A7771774D77777776A0C7C8C1C8C7C9C8C9C9C9C8C9C9CBA8CB
%A9CBA8CBFD06A2759ABCBC93BCB59A7EA9A3A97FA37FA9CAFFCBFFCAA277
%9C779CA2CB77A2777777FFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBA8CB
%A8CBA8CBA8CBA8CBA8A2A2A27DA2A2A27DA2A2A27DA2A2A27DA2A2C39AC2
%BBBC99C7C1C7C1C19A9B4D774C774C774C774CA0C1C79FC8C8C9C8C9C8C9
%C8C9A2CBA2CBA2CBA2CB7DA277A27EA293BC93BC6F9A99A27F7F7E7F7E7F
%7ECBA8CBA8CBFD0577CBA8FD0477A2A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8
%CBA8CBFFCBFFCBFFCBFFCBFFCBFFA2A8A2A9A2A8A2CBA2A9A2CBA2A9A2CB
%A2A9A2CAA1C4A1C9C9C9A0C9A1CBA2A2777771777777717777C8C7C8C7C9
%C8CEC9C9C8CEC9CBCBCBA9CBA8CBA8FD05A2779A94BC939A99C27EA97FA3
%7FA97FA3CBFFCBFFA8A277A277A2CBCB77A2777877FFCBFFCBFFCBFFCBFF
%CBFFCBFFCBFFCBFFCBA8CBA8CBA8CBA8CBA8CBA8FD08A2A8A2A2A2A8A2A2
%A2A8A2A2A2A9A2A2A2A3A2A2A2A9A2A277774C774C774D774C779FC7C1C8
%C8C9C8C9C8C9C8A02752A8CBA2CBA2CB7EA27DA27E4D46717171709B767F
%7F7F7E7F7E7F7ECBA8CBCACBA19B9AA1A2CBA8A2769A9BA8A8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBFFCBCBCAFFCBCBCAFFCBCBFD0BA2A8A2A9A2
%A8A2A9A2A8A2A9A2A8A2A9A2A8A2CBA29CFD04774D7777774DC8C7C8C1C9
%C9C9C8C9C9C926F8F877CBCBA9CBFD06A24C4D4D7171714D7171787EA97F
%7F7ECBCBFFCBFFA9774C7070CBCBFFA24C4C77CBFFCAFFCBCBCAFFCBCBCA
%FFCBCBCAFFCBCBCAA8CBA8CBA8CBA8CBA8CBA8FD0EA2A8A2A2A2A8A2A2A2
%A8A2A2A2A8FD04A277774C774C774C774D779FC8C1C7C8C9C8C9C8C97B4B
%4B26F8A9A2CBA2A877A27EA2774D46714C714D714C714C714D785378A8CB
%A8A87D77224C214C7ECBCA77285322A2CBCBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBFFCBFFCBFFCBFFCBFFCBFFFD04A27EA2A2A27EA2A2A27EA2A2A2
%7EA2A2A27EA2A2A27EA2A2A27DA277774D77777771775377A0C8C7C8C7CE
%C9C9C8CEC97C6FC2994BA8CBA9CBFD06A24D714D7771714D7771714D7171
%7177FFCBA1FD074CA8CBFF764C4B4C4CFFCBFFCBFFCBFFCBFFCBFFCBFFCB
%FFCBFFCBA8CBA8CBA8CBA8CBA2CAC4A171FD1D77707770777077709B9AC2
%9FC2C1C8C8C9C8C9C8CE527075764CCBA2CBA8A87DA2A2A2777146714D71
%4D714C714D714C714DA2A2CAA0A0A0A176A1A0A1A2A9A2A1A0A1A0A1A1A9
%A2CB777DA2CBA8CBA8CBA8CBA8CBA8CBCBCAFFCBCBCAFFCAC3BC9A214C70
%C3C3C39AC3C3C39AC3C3C39AC3C3C39AC3C3C39AFD07C39AC3C3C39ABC9A
%BC9ABC9ABC9ABCC2C9C8C9C9CEA0774C4C4C77A2CBA8CBFD06A24D714D71
%4D7171714D78777877A2A2A27EFD0BA27EA2A2A3A2A3A2A2774C214CA2FF
%CBCBCAFFCBCBCAFFCBA8CBA8CBA8CBA8CAC3CA27212175A1CAC3C3C3CAC3
%C3C3CAC3C3C3CAC3CAC3CAC3CAC3CAA17676A1C3CAC3C3BCBC93BC9ABC93
%BC9ABC93BCA0C9C8C9A0774C7776774C7777A8A2A97DA277A27E77464D4D
%714C714D7177A2A2A9A2CBA2A8A2CBA2A8A2CBA2A8A2CBA2A8A2CAA7CEA0
%CAA2A16F4B21A2A8CBA8CBA8CBA8CBA8CBFFCBFFCBFFCBFFCAFFA84C6F9A
%75FD04CAFFCACACAFFCACACAFFFD09CA52F8F821FD04CAC3BCC3BCBC9ABC
%BCBC9ABC9ABCC8CEC97776FD0877CBA8FD05A271714C71717771714D9CA2
%CBA8CBCBCBA8CBCBCBA8CBCBCBA8CBCBCBA8CBC9C7C1C8A8CB9A9A9977A2
%FFCBFFCBFFCBFFCBFFCBA8CBA8CBA8CBA8CBCA770076997521A2FD0ACAC3
%CAC3CAC3CAC3CACAA1F8204AA1CACAC3CAC3C39ABC9ABC9ABC9ABC9ABC9A
%C9C8A153774D7777774C774C77A2CBA2A27DA277774D7771714C71717877
%CBA8CBA2CBA2CBA2CBA2CBA2CBA2CBA2CBA2CBA2A09FC7C1CAA9C46FC2A2
%A9A8CBA8CBA8CBA8CBA8CBFFCBCBCAFFCBCBCACA2176759A997576FFFD06
%CAC3CACACAC3CACACAC3CACACAA14B9999A1CACACAC3CAC3BC9ABC9ABC9A
%BC9ABC9ABCC8C99AC39AA19AC39AA176774DFD06A2CA7E7F7E7F777778A3
%7FA3A2CBA9CBA8CBA9CBA8CBA9CBA8CBA9CBA8CBA9CBBCC8C7C7A1A3789A
%9A9C78CBCBFFCBCBCAFFCBCBCAA8CBA8CBA8CBA8CA769FC7C79FC8C7C8C3
%CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CA9ABC6FC3C3CACACAA0C39A
%BC93BC9ABC93BC9ABC9AC999B593B593B5939A4C774C774C4D224C777EA8
%A9547F547EA27F7E7F7EA3A2CBA2CBA2CBA2CBA2CBA2CBA2CBA2CBA2CBA2
%C29FC9A177FD067177CBA8CBA8CBA8CBA8CBFFCBFFCBFFCBFFCAC8C7C8C7
%C8C7C8A6C8C3C4C3CAFD0FC3CA9A9AA1C4C2C8C8CEC2BC9ABCBCBC9ABCBC
%BC9AC9C27599BC93BC99C29A7777774C4C464C4C4D5A7F7F7F5A7FA9FFA9
%A37F7F7EA9A2A9A2A9A2A9A2A9A2A9A2A9A2A9A2A9A2A8BCC29B78719C71
%78719C7178A2FFCBFFCBFFCBFFCBA8CBA8CBA8CBA9C9C1C8C1C7C1C8C2C3
%A0C39ABC9AC39BC39AC39BC39AC39BC39AC39BA27EA8A17F7EC8C1C7C1C8
%9A9A9ABD9A9A9ABD9AA1A1C976BC93BC937599C2714D224C4C4C224C4C78
%777E777E7EA3FD047F779B77A29BA19BA29BA19BA29BA19BA29BA19BA29B
%C2BB9B7171717871727178719CC4CBA8CBA8CBA8CBCBCAFFCBCBCBA29FC8
%9FC29FC2C1C2B5BC93BCB5BCFD0CA27EA37F7F7FA97F7FC1C8C7C8C1FD0A
%A2A37EA193BC93BCBBBC70534C4C4D4D4C4C287093BC93BC9B7F7FA37FA3
%9AFD13BC9AC2C2C29A9C71787178719B719C719AC4FFCBCBCAFFCBA8CBA8
%CBCBA24BC7C1C79FA09F9F93BC93B5939A4BA2A2CBA2CBA2CBA2CBA2CBA2
%7F7E7F7E7F7E7F7EC8C1C8996F9ACBA2CBA2CBA2CBA2A9774C214C4B704B
%70464C214C4C4D214C224C4BBC939A939A9A9BA1CAA1C3A1CAC3C3A1CAC3
%C3A1CAC3C3A1CAC3C3A1CAC3C3A1C29AC29A727172719B99C2BB7621A2A8
%CBA8CBA8CBFFCBFFCBFF7776C7C8C7C8C7C8C2C2759A93BC999AA2CBCBCB
%A8CBCBCBA8CBA9A97FA97FA37FA97FA1C1C8C7C26FC4CBFFCBFFCBFFCBA2
%4C534D4D4C4C284C4C4C464C4C77FD054C9A99BC93BC99BCBCFD19CAC2C2
%BCC39B9B9AC2C2C2BCC2704C4CFFCBFFCBFFCBA8CBA8FFA84C21C8C7C7C1
%C8C7C29A9A93BB93BCBCCBA2CBA2CBA2CBA2CBA2A97E7F7ECB7FA97FA199
%A17DA8A0C2A2CBA2A9A2CBA877214C4C534C534C4DFD044C224D4C4C224C
%224C93BC939A93BC9AC3C3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CA
%C3CAC3A1779B769B75C2BBC299C2BBC29A774C4CA2FFA8CBA8CBFFFD04CB
%4C4C4CC2C7C8C7C8C7C2BBC29A9BA1CBCBCBA8CBA9CBA8CBA9CB7EA37F7F
%7FA97FA39ABB9BA97FA37FA277774C77A2A222FD064C4D4C537EA37F78FD
%064C70BC93BC93BC93BCC3CAC4CACACAC4CACACAC3CACACAC3CACACAC3CA
%CACAC3CAA1A2777E7E9A6FC37EA27EA27E774C4C4CA2CBFFCBCBCAA8CBA8
%CBA84D214C22779A9B769B77777178717878A2A8CBA2CBA2CBA2CBA27F7E
%7F7E7F7E7F7EA1767E7FA978774C4C284C4C76764C224C224C224C214C46
%7E7E7F7E4C214C22464BC29AC299C29AC29AC2C3C9C2C9C3C9C2C9C3C9C3
%CAC3CAC3CAC3CAC3CAC3CAC3CA7F7E537F7E7E78FD057F4D4C214CA2CBA8
%CBA8CBFFCBFFCBFF774C4C4C717871787278719C719C717871A2A2A9A2A2
%A2A9A2A27EA97FA37FA37FA97FA97F7EFD047771774C774CC9764C22FD07
%4C7EA97FA876774C704CA7CECEC9CEC9CEC9CEC9CEC8CEC9CEC8CEC9CEC9
%C9BCC3BCC3BCC3BCC3BCC3BCC47F7F7F7E78A97FA97FA37FA97F53464C4C
%CBCBFFCBFFCBA8CBA8CBCAA8214C227171727178717271787171717277A2
%7DA2A2A27DA2A2A27E7F7E7F7EA97F7E53774C774C774D774C774C52C8CF
%7D53224C214C214C4C7E787FA9FF7EA37EA9FD04FFCFFFFFFFCFFFFFFFCF
%FD07FFA1BC9ABC9ABC9ABC9ABCBC9B7E7F7E7F7E787E7F7E7F7F7F7E7822
%4C2153CACBA8CBA8CBCBCAFFCBCBCBA2224C4C777178717871784D777178
%719CCBCBA8FFCBCBA8FFCBA97FA97FA97E7871774C7777774D7777777177
%76CFFFFFFFCB7DA2777D77A2A87E7FA9FFA37FA37EFD0DFFA9FFCBFFA9FF
%CBFFA8FFCBCBCBFFCBCBCACB7F7F7FA37F7F78A1A2A87E78534D464C4C4C
%7EFFCBCBCAFFCBA8CBA8CBA8CBA87D224C214C224C4C714D4D7178717171
%A9CACBA8CBA8CBA8CBCACBA8A953774C774C774C774C774C774C774CA1CF
%FD0BFF7E7F7EFF7E7F7E7F7EFD09FFA8FFCBFFA8FFA8FFA8FFA8CBA8FFA8
%A2A2CBCBCB7E7F7D7E7E7F7EA2777E7E78214C214C214C77CBA8CBA8CBA8
%CBFFCBFFCBFFCBFFCBA277A2777D539C7178719C719C71789CFFCBFFCBFF
%CBFFCBFFCBFFCA7771777777717777774C777777717777CFFD0CFF7FA9FF
%FF7FA37F7F7FFD09FFCBFFCBFFCBFFCBFFCBFFCBFFA877464D4D774C9BA2
%A3A1A97FA87EA377A353FD044C777DFFCBFFCBFFCBFFCBA8CBA8CBA8CBA8
%FFA2A2A8CBA2787178717171787171719CA8CBA8CBA8CBA8CBA8CBA8FF77
%714C774D774C774C4C4C774D774C7776CFFD0BFF7FA2FFFFFFA9A97E7FA9
%FD11FFCBCBA8CB4C46214C214C4BC27E7F7DA37E7F7F7E787E7DA8A2A877
%FFCBCBA8CBA8CBA8CBFFCBCBCAFFCBCBCAFFA27EA27E7178719C7171719C
%717871CBCBCBCAFFCBCBCAFFCBFFCBCB77774D7777779A774C774D777777
%4D77A1CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9A7C9C9CEC9CEC9CE
%C9CEC9CEC9CEC9CEC9CEC9CFCBFFCBFF774C22FD044C9B7FA9A8A37F7F7F
%7E7EA2A2A877A9CBFFCBCBCAFFCBCBCAA8CBA8CBA8CBA8CBA8CB7DA27778
%71717178717171787171A2FFA8CBA8CBA8CBA8A27DA27DA24D7777A1A0A0
%4C4C4C774C774C774C77A0C3A0C9A0A1A0C3A0A1A0C9A0A1A0C3A0A1A0C9
%A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A17DA27DA2A2FFA24C214C2222
%4CCBA8CB7E7F7E7F78A277A27DA2CBCBA8CBA8CBA8CBA8CBFFCBFFCBFFCB
%FFCBFFCBA877CB9B9B717878CB719C719C71A2CBFFCBFFCBFFCBA877A277
%A277A277A277A277774C4C4C7777777177777E77774C7877A277A277A277
%A277A277A277A277774D774D774D774D774D774D774D774D774D7777774C
%77A2FFA8A2774C4CCBCBFFA9A97FA37FA9A2A27DA2CBFFCBFFCBFFCBFFCB
%FFCBA8CBA8CBA8CBA8CBA8FF7D7E7EA2BBBC9BA9CA787178717171CBA8CB
%A8CBA8CBFD0BA2A8774C224C4C774D774C77774C21A2A8FD0FA277774C77
%4D774C774D774C774D774C774D774C774D774C77A2FFCBCB4C77CBCBCACB
%7EA37EA27ECBA17777FFA8CBA8CBA8CBA8CBA8CBCBCAFFCBCBCAFFCBFFA2
%A2A97F7FA2BCC3CBFFA29B719B9CA2A8FFCBCBCAFFCBA8FD0BA277224C22
%4C4C774C4C224C53FFCBCBA2A8A2CBA2A8A2CBA2A8A2CBA2A8A2A2777753
%777777537777775377777753777777537777774C7DCBFFCBCBA8FFCAFFCB
%A37EA3A2A9CBA877A2A2FFCBCBCAFFCBCBCAFFCBA8CBA8CBA8CBA8CBA87D
%A8A97E7E7FA39BA9A8CB9ABC99C3A8CBA8CBA8CBA8CBFD0DA2CBA8A8A2A2
%774C214C7DFFA8FD11A277774C774C774C774C774C774C774C774C774C77
%4C774C774CCBA8CBA8CBA8CBCBA24C76999AA2CB77A27D7EA8CBA8CBA8CB
%A8CBA8CBFFCBFFCBFFCBFFCBA2A2FFCBCB7EA37F7F7FFFA9A3A1C3BCC3A2
%FFCBFFCBFFCBA8A2A8A2A2A2A8A2A2A2A8A2CBA8FFCBCBA8FF7777A8FFA2
%A2A2CBA2A9A2CBA2A9A2CBA2A9A2CBA2CBA2A2FD16774D77CBFFCBFFCBFF
%A2A2FD044C22A2A2A9CBA2A2A2CBFFCBFFCBFFCBFFCBA8CBA8CBA8CBA8A8
%77CBA8CBCACB787F7F7FA2CB7F7F7EA37E7F7ECBCACBA8CBA2A2A2A8A2A2
%A2A8A2A2A2A8FD08A2A8CBFD05A2A8A2A2A2A8A2A2A2A8A2A2A2A8A2A277
%774C774C774D774C774D774C774D774C774D774C774C7777FFA8CBA8CB4C
%4C214C4C4C224C77A2A8FFA2A277A8CBCBA8CBA8CBA8CBFFCBCBCAFFCBCB
%7DCBCBCBCAFFCBA87EA97FA9A87FA3A9FD057FFD04CBA277A277A277A277
%A277A277A277A277A277A277A277A277A277A277A277A277A277A277A277
%A277A277774C7777774C7777774C7777774C7777774C7777774C7777CBCB
%FFCBFF7746224C224C464C2177CBFFCAFFA2A277CBCBCBCAFFCBCBCAA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8A9A2CB7ECBA8A97EA9A2A9A8CBA8CB
%A2A2777777A2777777A2777777A2777777A2777777A2777777A2777777A2
%777777A2777777A2777777A27777777D7777777D7777777D7777777D7777
%777D777D7DCBA8CBA8CBCAA24C777777527D7E777DFFA8CBA8CBA2A8A2CB
%A8CBA8CBA8CBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCB
%FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCB
%FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCB
%FFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCBFFCB
%FFCBFFCBFFCBFFCBFFCBFFCBFFCBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBCBCAFFCBCBCAFFCB
%CBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCA
%FFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCB
%CBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCA
%FFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCBCBCAFFCB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CBA8CB
%A8CBA8CBA8CBA8CB
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2021-12-03T14:02:58+03:00"
   xmp:ModifyDate="2021-12-03T14:02:58+03:00"
   xmp:MetadataDate="2021-12-03T14:02:58+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:66532af0-6a87-7447-85e3-5f8a454b10a9"
   xmpMM:InstanceID="xmp.iid:66532af0-6a87-7447-85e3-5f8a454b10a9"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">shablon_dlya_rabot</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="148"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAlAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9BZkuc7FXYq7FXYq7FXY&#xA;q7FXYq7FXAEmgFT7YoaBBFQajxwq3gS7FXYq7FXYq7FXYq2FJBp23I9sUNYpdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVUbm8tLZOdzMkK/zSMFH44JSA5lnDHKRqIJXWV1bXkC&#xA;3NtMkkJJCyKdqqaH3wRmJCxujJjlA8MhRYFYajqFrIotZGBJ2i+0pJ/yTUZ0eXDCQ9QddGRHJntm&#xA;13NbRvecUuSPjRfsjfYDqM0OQREjw8nMjdbqxikArSo8RuPvGQtla3FLsVdirsVaLAdTT55GeSMR&#xA;ciAkAnk0kyGRQrUaux8MxY6/FKYhE2SyOKQFlB+YddstGtIrqaN5hJKsTLHRRuC3IV/1emXZs3hi&#xA;y26TSyzyMQa2tdp2t6bqsXqWUqOB9qMbOv8ArKfiyWPLGYsFjn008RqQRmWNKncTejA8tOXAVp0y&#xA;nU5vCxynV8ItljjxSA70BBray3KwekVLU+LlXqaeGaHTe0Qy5Iw4K4jXP9jmT0XDEm+SZ50jgvPd&#xA;W/PDyfpHmK40TUYryF7ab0JL4Ro9sGoKnkkhfbv8FRkhG2XAat6AjpIiyIwZHAZWG4IO4IwMV2BV&#xA;kssUSF5XVEHVmIA+85KMSdggmmrS6tLqJpIJQ6KxQlQftAA+3jhnjlA0QgSB5KmQZIXVpLhdMuDA&#xA;3CVE5KwAqOO57eAy7ABxi+TCfI0xSDzPrCkLzWUmgAZBU/8AA8c2stFj9zjDNJmdsWaCM3HwTlR6&#xA;iqKqG70qc006s1ycoWqUj/mP0j+05FKyUhELAhqfsioP6sx9VnOKBkBdM8ceI0ofW/8AI/H+zNT/&#xA;AC5/Q+39jkflvNEr6ZUElgSNxQf1zeQkTEEinFPNusXgx96gfwOSRusmVJYZIqFBIpXmpIcchSoN&#xA;djgIsJiaILx3zBpd7pupSW90xkJ+KOZqnmh6Nv8AjmjzYzCVF7XSZ45cYlHby7npflG3+r+XLFKU&#xA;LR+of+ehL/8AG2bbTRrGHlu0Z8WeR86+WztE8vx2P76akl12I3VR/k17++bTU6sz2H0utx4uHnzT&#xA;jMJucCQajY4oQ12G9TmSSW6k+2c12xi4cgmP4v0ObpztS+0DCrncHYA9My+x8UqMyTXINeoI5Ij1&#xA;P8lfuzdU41O9VvBf+BX+mNLSlcK0q7mrDpmB2ho/Ght9Q5fqbcM+E+SHtx+9+Vf6ZpeysZ8ff+EH&#xA;9Tk5z6WL/mZJ/oNlF/NKzU/1Vp/xtm6159IDndiD1yPkhvJ3k67juIdTvi0AQh4bcEq7d/jp0X/J&#xA;75DS6U3xHZt7S7SiQccN+8/q/Wz/APdHxQ/eP4Zsnnt1C9t3ks50jKu7RsFFafFTb7VO+Y2sgZ4Z&#xA;xA3MTXvpnilUgT3sN8zW9/YQwkUjmmI4E70WORC+478CeNO+cZDszLglGc6HPru7/S5BlJ4enP4s&#xA;pg1Sy/R8N1JMqRugNWO9abjxJrnb6XIMwAgblXLq6LUQOORB73jWo+U9A1bzFNo17qPqQ3EjTxXM&#xA;xofrBrJK5RRGnNoyopWvVuO9c18cWYakwBqX6Kt2csuPwBI8v0/j8dXuNutv6KCF4/RUBU9MhloN&#xA;gBxqM2xBB3DphK+SpWIdAW+ew/Cv68Cd2E+ZNPvILozSO81vIT6bsSeNf2Pb2zdaPLGUaAouJliQ&#xA;U68prTSa/wA0jH9Q/hmFrz+8+Ddh+lOcwm5plVlKsKqwoR7HCDSGNeX9CeO9lnuFIW3cpCGH2mB+&#xA;18vDNlq9UDECPXm4+LHvZZNmscl2KtEAgg9DglESBB5FQaQscR9biei7nOX0uiP5jgPKO/6vm5s8&#xA;novvRedS4TsVdiqVeYtAt9ZsfRchJ0PKCaleJ7j5HvlOfCMgrq5ej1ZwTscuoTC1gW3toYF+zCix&#xA;r8lFMtiKFONOfFInvKrhYuxV2KrJY+a06GuYet0vjQ4eRtsxz4Ta4AAADoMyscBCIiOQaybNpc9x&#xA;KzE8iPYGmZAiGdNpPKHB5E+xNcSAtJjlLBaEUMWHU9cpjp4iZmPqLIyNUpT2NpcTQzzRLJLbkmBm&#xA;34lqVI+7LDAEgnomGWUQQDQlzV8kwdirsVY351tZJLSCdFLCFmD03oHA3Pt8OartXGTESHR23ZOQ&#xA;CRierFUZjGoJJC1AHhvXOg9nwPywrnZt1nbN/mD7goegyO8hlaTm/JFYLSMcQvFeIBpsT8VTud6U&#xA;A1PbOhlgl48JGzL5df2Oy7K1QzR8GYFCP7P2promqyWd2j8iImIEydip2rT2zbaPWw1uKjtlj0/S&#xA;PIus1mjlpp98C9AzEYqc8EU8LwyqGjcUZTkoyMTYQRalp9iljarboxZVJILddzXtk8uUzlxFEY0K&#xA;ROVMnYq7FXYq7FWEfmL+aFv5Fls59S0q5utGnVvrWpWzREwPyCxqYnZC/KpqQdveuVyzCMhE8ykx&#xA;lw8VekJj5U/MjyP5qH+4PVoLi5p8dmx9K5WnXlBJxk28aUwx4bsc2IneyH0T80fKeq+Ybzy56z2G&#xA;tWsrxx2d6notcIrELLbFjSVH41FPi9sYZYy5FMgYmiKLLsmrsVdirsVdirHr6eV7qTkxorFVHYAG&#xA;meddqanJPUTsnaRA+Bp3WnxgQHuUUllRgysQw6GuYWPPOBEoyIIbTAEUQySJi8SOerKCfpGem4Jm&#xA;eOMj1ALopiiQvy1ilOXtjY6jFU1yhrdirsVdirsVdirsSFYv5tit4IbZEVVeR2aoABPED+uZXY2n&#xA;jiBiC16uZnRLGiKimbXVaeObGYS5Fo0+Y4piY5hHaVoGoXM9vIYv9FZgzSkinEHfate2cLDs/Phz&#xA;1yo8wej1WTtDDkwk87HI97PgAAAOg6ZvHn28CXYq7FXYq7FXYq7FUi85aB5f1nR+Gt2aXkFpIt1b&#xA;q/7E8e0bD6Wpvse4OEYPF9HeonwHiq6eZap5E8pa1ewXGq6ekksciMbqGsVxRSDtIhRj02BNMqx9&#xA;g5sZHDkHD+Pe5eftLBlB4sfq7/xSI8/flV5L1DzFqGoXEMtxf6iEaZnletsyAcTbmv7up+Knj7Gm&#xA;VZez9RKpYeXwRhzac2M13378v0Mj/Kmy87WMF7aa3rK6zpEBRdKnnQ/Xl6l0nkB4uFHHi27HfoAB&#xA;l0IZYiskeE+8H7nHmIA+iXFH3Un3nXz55Y8l6SNT8wXX1eB3EUKKpeWRyK8URdzQbk9Bkiaa5SA5&#xA;rvKHnvyp5vsjd+X9RivFRVaeFSBNDzB4iWM/EhND18MQbUSB5J/hZOxVjV3/AL1Tf67frOeZ6/8A&#xA;xjJ/Xl95d7h+ge4KWYjYniSyBFUGgUAbewzpv5QzUADQAAdccUbtcs8gNSajwOTxdpZoysmwiWGJ&#xA;CFztXEbHUYq6fzLpMUrRmQuV2JVSRX55WIFjwlUs9f027mEMUhEjfZVgRX5YmBCDEhMcgh2KuxV2&#xA;KuxV5V501M6l5gkiSQLFafuYa1oXB+M7VoeW30ZdxcEbq3KxQ2SJLu5jkAaRyqn4k5sNh1Gxy85J&#xA;yj6ZEL4UL5B6v5MmEvluzYMWp6i1b7W0jAV670zFmST6ubj5AAdk7yDF2KuxV2KuxV2KuxV2Ksf8&#xA;4XPCzhtwd5X5H5IP6nNh2fC5E9zRnO1MWgVmmjVQWYsAFAqSa9gM2suTihFXsd1c3Us8nBWkYtxa&#xA;SNSB2BBauwyrGRGIA6eRTI2bZJoFxp9rpyxPcxLLVnlHNdjX59gM1mrjOUyaNOVhIqury384tC8k&#xA;eadc0+/u72G5/R9rcQ+hC4JZ5PsF5CREFUk8akfGRv2Ok7R8XHRA2P4/HxdrpdHCe+Tp+Px8N2Yf&#xA;lL5W8paJpMk2kQWkWqXp5ao1o1aUkdo46VPFY1fiKAV65k6fHOOMcQIPm4+pxCGQ0KDPctaHYqxq&#xA;7/3qm/12/Wc8z1/+MZP68vvLvcP0D3BSzEbE6HQZunCdiqjnojr1kxIhcjrxP6sVYXk2aI08kX9s&#xA;RsfVTf8A2QwHkg8md6q92ml3j2ZC3awSG2ZhUCQIeBI/1sxZyoEtUY2afEvnOL8z9Pt59Su/MV/d&#xA;aXcSEiQ3sxJbkAFkjDcUYcgQppt22IGBi1Qma6rqdHPGOK/S+hv+cbvzJHmnyculajfPdeYtIqt0&#xA;ZyWlkt2c+jJzP26D4Ceu2/XfNhKw045WHr2TbULql4LLTbm7P+6ImcDxIGw+k4QLKQLLxEu5cuTV&#xA;yeRY9a9a5lkWKcxdccfXk4/Z5Nx+Vcrw3wRvnQSeb1D8vJOXluNa/YlkX8eX8cry83Fy82TZW1ux&#xA;V2KuxV2KuxV2KuxVjHnKGTlbTUJjAZCewbr+ObTs6Q3HVxs45MdhmkhfnGeL0Za0B2ZSp6+xzYyi&#xA;DsXHWZJWI+aE1Tk0ssnOxWpAXZUA7uP45qdP2rhzTMAaIPXr7nqNPofCgJVuRuluj6BqetwyTafA&#xA;Jo4eJfm8cR+KtKCVkJ6dsnqtdp8RAyyjHi5W2GQ/ARFno3my01BXtLS5t5oQzGZVaMArQ7OaKajt&#xA;XfIS7T0pG+SFH+kESo8+T1/yLrer6ppr/pVEW6h4jmuzMrA0LrSinbt9wzXHPinMjGbA/GzgavTe&#xA;EQe9kuLiMau/96pv9dv1nPM9f/jGT+vL7y73D9A9wUsxGxOh0GbpwnYqo56I69ZP/cyf6p/VirC8&#xA;mzcmoWNldQPdzeivMMDxZgQjAt9kE98xtRqY4q4urlafR5MwPALpkN75/wDL09pSz1GOOV9mM0U/&#xA;wj5CJwTlOLW6e/WdvcifY+rH0x+2P62Aa95I8o+YrH0NQtmu43lNwk/qyoQzV3jVPSCr8fQr882W&#xA;l7JwD1izGfLyBdZrNVll+7nzid/f+O5Efk9+W/ljyTr9/eWdxcPNqMS28K3DKVRQ/NlqqpXkQtK+&#xA;Hvhz6DgHFHcNGGQvd7HmC5TGvzCufR8tyIDQ3EkcX48/+NMsxjdsxDd5hZweveQQf79kRP8AgmAz&#xA;ILkFX1mEQ6vfRAUEdxKoHsHIGMeSI8mf/lnJXQ50PVLlqfIomUZebTl5suypqdirsVdirsVdiqB1&#xA;q4uINLnltnWOcACORhUKWYLWh8K5KI3TEbsHafzSxqda39gB+oZdUe5u9PcsdfMsyGN9W9RD1QgM&#xA;D9FMMSAbCCInoofojWP+W1P+AH9MyPzc+9r8HH3O/RGsf8tqf8AP6Y/m596+Dj7l76ddIoqBIabl&#xA;f6HOP1PZmSMiYjii9Hg7QxyFS2KhpemanBrcc8Eot9PKn61acOIdqGj8jWpqRsKe5Oa7X4ss8frh&#xA;OUhsDRNJy5IXYlH3bJzq0V9Pp13FYTC3u3oIpTTbZancMOntmn0emyHILhKQ9xafEiOoYhqGq+aN&#xA;Ahiit7sxycF+sTKi/vT0DUb1KUNe+eg9naI4wTLnLp3OJq80ctDnw9Uu/wCVh+cv+rm//AR/805s&#xA;fDDh8ARmi/mBqa3irqsguLeVqPLxVXSv7XwgAjxzne1PZ7HlEp4vTk5+RcrFnI2PJ6L1zgHOTodB&#xA;m6cJ2KqOeiOvWT/3Mn+qf1YqwvJs2M+YSkN/V7sH1o9rNqEqQQA4JJ4jY/ZUV7nYDNF2lp5cXHzB&#xA;+x6DsaVnnVfbz+5KoFJWMBGYOwT4OJIJPgzL+Gaol3ufOMdbE2zjTFSK1jjuVLlFCD024bLsPtK3&#xA;bO57Hzzy6eJNCth7hs+edrYxHPKuu5953RNxJbs6tbxmFQAOJbkag9a0H6s2cQa3NutZ3pFy91pt&#xA;vO+7stGPiVPEn6aZodRDhmQHOgbFsT/NCalrYQ9neR/+ACj/AI3xxOThYl5Vg9bzHp6eEyv/AMi/&#xA;j/41y2fJsnyK/wA3Ren5k1BfGXl/wYDfxwQ5LDkyv8r3rZ30f8siN7fEpH/GuV5WrMzfKWp2KuxV&#xA;2KuxV2Kpb5iZU0e4Z2VVHAln3UD1F67jJw5pjzYX9fsf+Wq2/wCB/wCbsupuotjUbJTUXduD7D/m&#xA;7GloqiarYAfHdxE+IIH8TgpHCW/0tpn/AC1R/wDBDGivCXfpbTP+WqP/AIIY0V4S79LaZ/y1R/8A&#xA;BDGivCXfpbTP+WmP/ghjRXhLEfOWrW1yFSE8lUFQ3SpJBNK9hTJxDZEUxDJMleysri9uo7W3QvLK&#xA;eKgfrPsO+U6jPDFAzmaiExiSaD2qKP04kjrXgoWp6mgpnkc5cUie92gTwdBm4cJhn5s6zqGneVRb&#xA;6bNJbahqs62NvcQECVKxyTyemx+y5igdVbsSDmTpIAzs8huxkCaiOv8Aa8t/J/UfPWieeYNC1XVG&#xA;1bRtdgkubZp5ZZ3j4RtIjq8goK04uFJHQ+GdXpNTxmnByaeWKQs2Jcnvk/8Acyf6p/VmwVheTZvJ&#xA;POLO3m+7ElTRowoPYCNaZm4fpDlY+QUIbm5gblDK8TeKMVP4ZKeGE/qAPvDkCZHIp3pPnTVLKiTn&#xA;65B4SE8x8n3/ABrlmICA4YiouHqNJHKeK/UyCHz5YztHDFazG4lZUVDxC1Y0HxVr+GWnKAHB/k6X&#xA;UinrOt+YNA8p6TFNqU/1e1UiKP4S7sx8FUEnxOaGUjOV9SmEOgeL/mN+cEWryxw6FGiwQsR9ZnhD&#xA;SOPFef2Fr2pU+I6ZaMA4dyfg5GK4m06/InW7zV9W1Bb6OF2tYVkglWNVdWYlDRgO6nK54xDkTv3m&#xA;055kgKP5yeYjp3m6KCMvBbi1V55IYIJGknYsAGeVTTjGq+Pyw48cJ7SJ27pEfcQjFOcY7V8RbL/y&#xA;Z8y2uteWnQ+n+krJ/SvGWNImkQktDIyptutR8wcjkhw7dGvKSTZegZW1uxV2KuxV2KrJRIYnEe0h&#xA;U8Nq/FTbbvgmaBplCuIXyeN/nHrXmvRoNP0rT75/r2qs4aOSin01oKcZDxo7NxBI9hmJgNXKZND3&#xA;uzyTgaGOMb+CE/LLRdU1aK6tNdNdRhoyIAOVNw6BYyvLgPTYtv8Abp2wS1spk+GdgyjGMB+8G/vp&#xA;nX/KuYv99yf8BJ/zVg/MZu/7AnxMHcP9M7/lXMX++5P+Ak/5qx/MZu/7AviYO4f6Za/5eW6LydXV&#xA;R1LJIB+L4PzObv8AsCRPCeQH+mU/8C6f/P8Ag/8AzXg/NZf532BnWP8Am/aXHyNpwFS+3yb/AJrx&#xA;/NZf532Bax/zftLyi4/Nn8r4NfudIK3swgn+rJeQRerFK/LgSnGbmVr0IXftlni5q+r7A4R1uASr&#xA;hPzepS/l7pT1YgO/blz/AF8zlX5nL/Oc4eH/ADftYnqvl+zs5+IhAUkgg1NCOoyqWtzD+L7nY4tJ&#xA;hkPp+9Ts3ayJa0PoMwozJsSPAnrmHnJzf3nq97kw0uOPKIR9vr2qwyB/XaQd0k+IH78w8mhxSFVX&#xA;uTLTwI5PSNO1KC802O+B4RspZ+R+yV2ap9iMw5YyJcLz+bGYSMT0eSeffMLeYb2BYX+rWNm0ktlL&#xA;+07qCvqdipNCq+FTnW9n9nxwwNjimaB8r6fpLjE72kWlXl3pWt2urLMLq5t12Lg0IkUh1Y1r+0d/&#xA;HfNnhxRjGgOHdhkJkbJt7H5f8zWevaZLNCpimiBWeBjUqSNiD3U9jkiKaCKSPJMnlP5hRiLzPJIv&#xA;WRI3J9wvH/jXMzCfS5OPklqsGUMOhFcvb0+8naDYaveGxlZ1l+1EqsByHcCoPTrlOWRiNmrJIxGz&#xA;0rTfyu0uwuIrqORjcRMHjdix4ONwRQruPlmNLPIinHlmJZBJo9/IQZL+RyteJYuaV69W9sw8unxZ&#xA;PrjGVd4BYRmY8tlI+XZi4kN0S46PRq/fXK/yOnqvDhX9UMvGl3lUj0a+jbkl+6tSlQXBp/wWWYtN&#xA;ix/RCMb7gAxlMy57rZNGu/ilkvn8Xclq7Cm/xeAyjVYMHCck4RlQ/mgnZnjnLaIXfU7dYo2tdQuF&#xA;n3Es7ngnE9hxcnqPHNR2f2rppZhjx4+Di8gOl9G3LhyAXI8nmv5oP5r/AEjbQ6XrtwstvELm2hjm&#xA;ZfUkX1DIVoSzMiIPhFa16dc22fWRx5BEjbvRi03HGxzeiflPqPmK/wDKcE3mCRpNQNSzPx5lCzBH&#xA;NOnJQOuZMqNEOJMUWaZBg7FXYqpzuqQSOwqqqSw36AV7b5DIaifczxi5AebybUPy6h1jzdeeZdVu&#xA;nM3NV0q2gZkjhijUBOdfjYlqsVDAbnx25LWdvmvDxAcPUnr7nawwES4id1a2/LrTYb601e4uJnv9&#xA;NuProuIC0asilS6SqWkLKypxZq8iu1cx8HbOUSqEbieY5/bt+psywEtyaZ9+lLP1fR+rgygVKBZy&#xA;aeOxOb3DqI5I3Fr8GVXxbf5qhJrulHkg4IwNCyiUkEHfqSMsMwzjpp89/sUv0zpv+/v+Fb+mDiDP&#xA;wJ9zv0zpv+/v+Fb+mPEF8Cfco3l9o15aT2lxJzt7iNopko4qjqVYVABGxx4wp08iKp5R5T8h6T5S&#xA;1/TrayVii3Elw1+YXIliFeCl/TYDgCVqzj4hQD4tq5DLLLw0b7v2Liw4ceLY9++3wF8vt+97Pa3N&#xA;jcRswuBGdvTZkcqxruDQVHzpmPqNfjxSMJHhkO8H9DTMSFUL+IYN5vSaO6X1OLCRmdXQ1UgbbVo3&#xA;3gZGGphl3ibdzoiDFj2Tc5tVZmCqCWOwA3JOJNIZFrWrtoOi2GgvT69fK8kkbpzRozyLxUFSD036&#xA;bHfxxsMj4hyDo6gDFmzHj+k7D37MSF7betz+oWq+kKJy9RlUElj8Luy9W7jNkO0Moujz/sc2XZOC&#xA;IuRNDzU9Tn9F47l7eBprmLbjGscarTjVYohGvIjv/HfM7RTnnieKR9J6fr7nTa7FjxyHhj0kef6U&#xA;o0f8wo/Ll7cSW8H1xpYmhZOfBASwINaNWlPDNzw266QtNvLP5kfpTUVsbu0ELSAmKSJuQqo5EENT&#xA;sD3ycMPEaDVllwRtlGu2nlm4khnsIpJHZaXIu0QtzB6oRyHE+GZ2n0xAImAXXS1UybBIQ1l+X+n6&#xA;is2pztBBBCoVLQyrC0zD7RRAVOw+/IzIjMRAPD5ByIa2Yhz9VptpNvp+l3EctvbxxBCK8FAJHTr1&#xA;JyWbFHgLXDPOUtzbLF1nTSAfWAr2INf1Zqac2m/0vpv+/wAfc39MaWnfpfTf9/j7m/pjS079L6b/&#xA;AL/H3N/TGlpBa1fabc6XcW5dZRKvExlahgSKggimYXaJrBL8dXK0ULyhINQ84adpFnHFCpe8VQsd&#xA;uoChVAoGY0IHyFc0XY3YE8sxnM6Alyq3YaiJsxrZh1/5v1W/uY7m6KtJDU24SsaqT3IQjnTtyrTO&#xA;w1HZWPKYk7V9rDCBjFBkv5e+eNTOtxadqM5nt7z93GzgApIAeFCB0b7NMu1OnHDY6OHqMA4bHR61&#xA;mrde7FXYqwLzP5wmPnrTfKtpJ6cfpPdaiymjP8DGOGvYbc28RQeOa7tqRho5yHWh8zv+pytJAGQJ&#xA;Rc8V8z8re4SMUpwkj5j57Mh/HPPYyjW4+3+12xtjfm+bUI7RFlljCw1mluE5w0H2QvAmSvck8voz&#xA;bdmxjZlG+78cnN0khC5S3DEpby6ndBLNJMoRuCSM4/lIHxAla0H7Obcku2HCIcUB0vlTP/KWkPea&#xA;DbT3iNbTMGpErI4CgkL8S8gfn39s3nZ8YyxbgHc9HkddnyDKbJB7r5Jx/hy1/wB+yfh/TM3wYfzR&#xA;8nE/MZP5x+bR8vWigkzOANyTT+mEYYfzR8l/M5P5x+aTNCJZzHaJJKN+IpyYgbk0AzaYNHjx+oiP&#xA;E6/Nrck9uI8PvU/VkWMpzIjO7LU028RmXIRHqNbdXGjZ2CaaTPbzWEbwSLKh5fEhBFQxB6eGeQe0&#xA;OYZdZOcfo2o+6Ien0eM48YieaV2EV1rGv3lpf2wjt7Vf3EpG7Attsy0A+k5ufZ/FDeqlYs9d2/V5&#xA;DDGDEkb9DzT3/Benf5P3xZ0vhY/5o+Tq/wA5l/nS+ZSLzPP5S8pwLNqFzwnkH7m2g9N53+Sr0Hu1&#xA;BhGnxy/hj8l/MZJbGUj8S848z/mBrkyIF0ySHTT8aNO5kY7bVZQEQ+K9Rjn7NhOPLh8wG7R6zwp8&#xA;Q9Xkx0+c6g8rFX5UqrMGU0/ySuYX8jD+d9n7Xbz7a4hRhfx/YgtU80ajqCJFRYYUUIkcYAovgKUo&#xA;M2Gl0kcIIG9uq1Oo8U3XCB0QF4qQBbQKPVj3uH2J9TugPgnT3NfbMw7bOLHfdM/KEEjambhSVFup&#xA;IYbfE44j8K5re0dQccBwmpE9HZ9maaOSZ4gDEDqziC7uFmRi7SAMCULGh36Zp8faGaMgTORAPLiL&#xA;ucvZuCUSBCAJHPhGzPdBsp9TheZqQRIeCkfESwFTttsK5u4duyl/B9v7HmdT2LDEa4yT7kbceTor&#xA;ggyXb0HRQooM1+p1mXLKzIgdwcvSxxYY0ICR7zu0PJqAUF/OB4f5nMbin/Ol83K/MQ/1OHyd/g5f&#xA;+W+f/P6ceKf86XzX8xD/AFOHyd/g5f8Alvn/AM/px4p/zpfNfzEP9Th8nf4OX/lvn/z+nHin/Ol8&#xA;1/MQ/wBTh8lC88upZwtKLySV1FfScjcV60rlGoGSUDvIs8WeHF9MY+YYprmkfXoxNbUa5TqOQHJf&#xA;CpNNu2ZHYuv/AC8jCe0JfYfx+ht1EOIWOYSm18sahKQZQsKd+Rq1PYCubrUdv4ID0XM/Z9rRHTSP&#xA;PZW1fRrfS9JudQhnlS6tkMkDhgKSD7FKKDXlTNdg7czZpiBjGpbdf1ss+CMIEs8/JjzjN5i8uzRX&#xA;krS6lYSBZyxqTHIKxsD7lW+7wzNOHg2uw6DUz4pXQG3R6Dgcd2KvnD8521PRvzOOqW0jQyzQw3Fp&#xA;MO3BPRYCu37G498u8KGXGYTFxPNyMUq5Jx5f/NTU7jT1kvbSKWUEqXjYx1p3IPPfNHL2OxT3hOUf&#xA;eL/U7PFkMhZV9R89fXUUGwVGH7XqvX/hQhpl2m9kRjP96SP6o/SS5GPPKHJJYtXVLsXElpFKoNfS&#xA;YyUptUV5E9u+bmHYeCIANk+f7KbJ63MRQlXwD0jyz540m9h+rC2Nk8CjjCtGTj0+EgL0Ptlk9N4Y&#xA;FcnS6jHK+Im7Tv8AT2n+Lf8AA5VTj0oX+s2ktpLFEzc3FBtTvv8Ahl2nHrDXmB4SkkM80L84ZGjf&#xA;pyQlTT5jNvKIPN1q6Zr+8hkRpJJVALuWZmUe5qcxNbphkxSgKiZCnI0mYYssZncApRb6tp+lRyw6&#xA;hdpLK4koIkPIblo14gvQiiqSTv7ZiaLSx0uPg4uLe/0Fy9ZnnqpiXDX9qQaj521urppE31KFwObl&#xA;VMr0r1Y8uI37ffgnHHdwiI+4VfvbMcJAVI3+hJbPz75ysrpJn1CZ2VqtBM3qIRXoQajceGQMWRig&#xA;fzW0rX7fzXd6hqcMgt71+dnOQTH6dBxiDdA0Y2K9e/fMfQ6uGeFx59QzMeHZh0cssTconZG/mUkH&#xA;8MzrQQyLyVIb7zNZW9+Fu7dvVLrcKsookLt1cHYUrk4G5C2rKKiSHovmDyZb3WlSyaLpSPqFoVuI&#xA;obS2UySEMEp8AB4qX5t7DLdXIYwDXM/oLh6fISfUejy+Hyb5suJlih0m7lmc/CixOWJ67ADMSUq5&#xA;/cXYcQq7HzeweVvyR1e20aBrmSSC7nUS3EP1dmKMw+wTyG6jY++cnr9TkyZTUJcI2HP9TtdH2ljw&#xA;wrYn3puv5P6irBhdPsa/7zN/zXmFxZf5kvt/U5X8tw7h/pmU6H5W1PTLVrdhJMhYsp9JlIqNx1bL&#xA;YZsoH93L7f1ODqdfjySvYfFMf0Xf/wC+JP8AgG/pk/zOX/U5fb+po/MQ7x83fou//wB8Sf8AAN/T&#xA;EajJ/qcvt/Uj8xDvHzY7c+adKtrmW2mMizQO0ci8DsyHiR94zIGUOyhopyiJCqKn/jLRP5pP+AOH&#xA;xQy/IZPJ3+MdF/mk/wCAOPihfyGTySfzDaaLq7NKLalxIgX603IOKfZotabe+dP2foZCNzNeX6/1&#xA;PO6vVgSqO9dUgh0OzuIAsXKxvrWQF5ITuJFUgGj8qoyv0yzVdmw1AAPpprx62eI2N75J0baImp5V&#xA;6bMwH3A0xxdi6aMQDG/NcnaueUrEqYX+Z1/9R021it5WjuJpeRHImsaKa1U1H2iuMtBgw7wiAWzD&#xA;q82UnjlYTD/nHFJ5NU1243MSxQpI3Yu7Mw/BTmPn6Jyvdcxmp2KsW/MHyDpvnDSlt529C+tuT2N2&#xA;BUozChVh3RqCoycJ8JZRlTwyz/Lj8xrZZl0+zS6jhlaKdEkiqki0BDK7I+4odtqZmx1HD1cmGfha&#xA;m07zJYXLWur28VpcqqsYwyyH4hUBuDsFNKGhNcysOUzFuXiyGalD6xuZfUfYBeEY6cTX4vGpNR9G&#xA;Wi7bRdsg8n38Vj5ksJplV4GlEUyuAV4SfASQf5a1yGePFAhhmjcCHvP6N07/AJZYf+Ra/wBM0ll0&#xA;9l36N07/AJZYf+Ra/wBMIkVtLbnyrprLI0KsshU+mnL4eVNuoJ65lx12Qc2k4YvGNZ80a5es1tPI&#xA;beKNiptYh6agjY1C038csllJ5OVj08Y+aSZW5CxZY2keIGrxgFxQ7cum/TtihWtYrJr+1e8BNvHN&#xA;G03EVJjDAuPuyvMJGBEfqrZL6usYtI1TQoFMcN7p9zErFJFWSNwwqaqwIOafSx4IADavv6/a6vMT&#xA;xm2Maj+SH5XX7tJJoccMjd7aSaADeuyRuqf8LmYM8x1UZ5jq1pH5IflzpN8t7Z6c4nVJYgXnmdeM&#xA;8bROCrMRujkYfzE+9Es8iKKB8o6Y+meaJtLViwgilgV3+0ygDixp4gA5tdVMSwCXuaeqSaroetaU&#xA;4MyPbsrAxXKfEvIGoKsNq/jmZjzwyjYseT0Dyd5o/S1uLW5/46MKcpXC0R1BA5jrQ7io+7NLrNJ4&#xA;RsfSWQLJMwUrJpHjAKxPLXqEKin/AATLhASAg5HvHcsqXUYPRF+q0H/BFj+OSFeX2shXl9q3/Tv+&#xA;Xz/p0x28vtTt5fax6/sdJjNzdXVpEeBeWeR4kZ9qszNwBqflkxiiegc6GfIAAJH5l5Uv53/l79da&#xA;J9EkFqGolyIYCSP5ilQQPprl35QdwbvEy/zj8yjj+YnkjXJxp2iQhLggyNI1ukYKr2VvtV+jJ4Y4&#xA;sMhLIABex7j5sJjPOJAkTtys7ohlFOS7r38Qc3OLKb4Z/V9hHeP0jp7qdVKO1jkgr5fqsgvYxzKD&#xA;jdIOjRdainVk6/eMokJTPGPSB/piPjy91X7uTdAiuA7/AHWxTz1q/muO6gj0COY2voCWeW3hMo+N&#xA;jxq/F+OyeOOSZga4ib76/QA24McZCyGHweT/AD1rupW6T2V0bi7f0457xXjU0FT8Ug+yg3PHpmNL&#xA;J1JcscMRs+jfIPkmy8oaEunQP61xIxmvLmlPUlIpsN6KoFAMw5y4i0SlZZLkEOxV2KsN88W1np80&#xA;etCFJppQbee2ZnUSUQtHL8G/7rjVv8ivgMthvsyi838xeXL+DUJfRZbyFaUmiNSxp8Rod92qdq+2&#xA;2Zg1mLCRDIeCRF7/AK/1u10Y48dx6c0HF5XvpdHvNaZGjSwdIWRgRyEv2tj/ACnh9+ZXix4gO9Jy&#xA;ATASsEg1HXLm19GaFf8A6Q0axva1a4gjd/8AWKjkP+CzQ5I8MiHSZI1IhHZBixDUfOWrxXksVppf&#xA;qQRsVWR2NWoacgB0By0Yx3tgxjvYDr+h3uq6lLfx2JtHnPKaNPiUuerCtKV75dHYNsaHVbZeWEgP&#xA;K40ya7YdFaUIlfkq1/HMXVY8sxWOfB/m8X6WyMojnu8/e8Njq02n3I/f+pwk4ioEmwp9HTMwDZha&#xA;ZYsmZ+SvzGu9B0q7ikYvpttKqmUzeksTyKzlRsef2K8VBap6b5q9Z2d4s+KMjA9a6/aGJMeRFso0&#xA;H82dX12Ce503Sb2WztqCW7MriEMSAF5lact+mYZ7IyA14x+3/ilPhg1QTH/HvmL/AKts/wD0kn/m&#xA;nH+SMn+rS+3/AIpNY+4LB521sTGYaTKJmFGkE/xEDsTwrkv5Ky1XjSr4/wDFIrH/ADQ2/nrX3Uo+&#xA;mTMjCjKbgkEe4KYB2TkH+Wl9v/FJrH/NCUP+YMmkyO8Gjm3lpSThOY241r2j6Zdk7P1ExUs8iPx/&#xA;SRwQ58IU/wDldl9/ywy/9Jbf9U8p/kfL/q0vt/4pah/NDv8Aldl9/wAsMv8A0lt/1Tx/kfL/AKtL&#xA;7f8AilqH80O/5XZff8sMv/SW3/VPH+R8v+rS+3/ilqH80O/5XZff8sMv/SW3/VPH+R8v+rS+3/il&#xA;qH80LB+c9zyq2lq2/wARM5qfp4dc20MHDEC7pqONKdT8l+UvzDSe90QfobzEg5z27AGGWv7TBfE9&#xA;XUV8VO2WCZjz5LZjzeYa55L82+VtTs4LuBoby6b/AEJ7dw5duXGiMh+1U9Ou+WHhmCDuG2GTqH0l&#xA;5c8rnT9IszqMhudTitwLqQ04mU/ETQbfD9kH2r1ykZPSID6Qdvx+O7k4uT1SMupYwEcioUkewzdz&#xA;z44mpSAPmQ4AhI8gpxW9zpEcVzHJJbRgSSxyRcVaS2Q8ri3+MMvKIL6sVR05LmrzyjKXpNhz8dmO&#xA;/NlflKwklDa5czy3LXa00/6wwdorVjyX7IChpdmag8B2zGmeiSyTK0OxV2KtO6IjO7BUUEsxNAAO&#xA;pJwqx2ztZNcM2rSMYopY2g0lSK8YG+3NQ/tT0/4CnvlsJiBG10sxtTH9V0m40+cRXDKyybwOoIqA&#xA;o5DfqQ1fopmbkxYtZExmPd3hrw58mnlcPj3FPdHnttS0O50y/wDjjSJkk33MJHb3X+mYp0ksAiAb&#xA;/GzZ+a45mYFdWBw+W9IhnV2tvXRWrwd3oRXoeJXMbUDtGE/TUo+XD+ncO4x67TThueGXxej+XdR0&#xA;f6pFY2kf1QRAiO2Yk0qanix67nL5YspjxyBF/jo6jJkBmd+LzTvKEMElD+q/wzfaP7SePzzIbllH&#xA;/lm/4JP+asVXKjMaH1VHiWX+BOKpJc/lP+W1873N5Lq8d7MzSTtDLbsrSOeTH95HX7Vdsjxz8mvi&#xA;n5JZrn5aaXa6Lc/oLUL2W4hgY20NzFEzvIprx5o60BXYfD1yUZyvcM4zl1Czyl+Sdhpwj1DzrJ69&#xA;yaSRaBbv3IqPrMy1AB/lTf37YJZjLaPzYHKZbR+bP57xpIIrWKOO1sbcBbeyt1EcMYAp8KD9eRjG&#xA;vesYAe9QyTN2KuxVjPm97cmFSQZFVi/iFNKVycWyDAcKuxV2KuxV2Kss/K5bg+cLYxV4LHKZ6fyc&#xA;CBX/AGZXIZOTCfJ7RPbW04T14klETiSP1FDcXU1VhXoR2OUNLAPNX52eT9JingsZTql+oZVjgB9E&#xA;P0+OU0Wn+pyy2OIsxjJeUWv5tX6wuLqxjlmqSjRuY1APYqQ52+eXZZagyuOSh/VBboYcAG8LPvL2&#xA;ZIYvNGn2lhZj6vp9vDHdTzUElLqWP1IoRyFDw9TnJ9C9zlMpm+KXNoAEeSI8sak9pePptwghjmkd&#xA;Y4h9mC7Uc5oB/kSD97F7EjtkZC91kGW5WxdirsVUby0t7y1ktbhecEw4ypUjkp6iooaHvhBpVVVV&#xA;VCqAFAoANgAMVUL2wtL1Y1uYxIIpFmj6ijodjt9xHcbHbCJEclQkegWUVxLLCWjE0bRNGPs/H3Fc&#xA;yDqpEAHejbUMQB2Q58q2Jtlg9R/hcuJPh5fEAKdOm2WfnpcV0jwRVLF8oWakMs8oYbgjjUH7ske0&#xA;JdwR4AT1QQoBNSBQk98wC3MT1HyFJc3ks9vqktvHKxf0SpcKSakAh028MsGTybRk8kN/yrq8/wCr&#xA;3J/yLb/qrh8XyT4vk7/lXV5/1e5P+Rbf9VcfF8l8Xyd/yrq8/wCr3J/yLb/qrj4vkvi+Tv8AlXV5&#xA;/wBXuT/kW3/VXHxfJfF8nf8AKurz/q9yf8i2/wCquPi+S+L5O/5V1ef9XuT/AJFt/wBVcfF8l8Xy&#xA;d/yrq8/6vcn/ACLb/qrj4vkvi+Tv+VdXn/V7k/5Ft/1Vx8XyXxfJ3/Kurz/q9yf8i2/6q4+L5L4v&#xA;khp/ypE6kPqzfF9oiEVPzq5x8VTlQ3/Kmbb/AKur/wDIkf8ANePio8R3/Kmbb/q6v/yJH/NePir4&#xA;jv8AlTNt/wBXV/8AkSP+a8fFXxHf8qZtv+rq/wDyJH/NePir4ja/kzachy1SQr3AiUH7+RweKviM&#xA;t8t+U9J8vwMlkrNNJT1riQ1dqdtqAD2GQlIlhKVo/VrA6hpd3YCZrc3cMkPrx/bT1FK8lr3FcANF&#xA;AeV/9C46L/1eLn/kXHl3jnubPFKvD/zjt5YW3dJdRu3mZgUlX014qAarx4tWtcfHK+KXpGgaJaaJ&#xA;o9rpdpUw2sapzb7TkD4nb3Y7nKpGzbWTajqflyyv55J2d4ZZYwjNGQDzjYPDKNvtxNXifeh2xEqS&#xA;CmoBAAJqe58cCG8CuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2Kv//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:b86fdf06-ffd3-3543-833d-554eef651b02"
    stRef:documentID="xmp.did:b86fdf06-ffd3-3543-833d-554eef651b02"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:b86fdf06-ffd3-3543-833d-554eef651b02"
      stEvt:when="2021-12-03T14:02:55+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:66532af0-6a87-7447-85e3-5f8a454b10a9"
      stEvt:when="2021-12-03T14:02:58+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="692.003783"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
692.004 400 li
692.004 0 li
cp
clp
692.004 400 mo
-7.35059e-06 400 li
-7.35059e-06 0 li
692.004 0 li
692.004 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.94902 .839216 .941176 rgb
f
101.578 57.5908 mo
69.936 57.5908 37.2519 53.9902 4.22802 46.856 cv
4.06786 46.8213 3.9663 46.6636 4.00048 46.5034 cv
4.03564 46.3433 4.19628 46.2427 4.35302 46.2759 cv
41.729 54.3501 78.6699 57.8926 114.15 56.8062 cv
169.408 55.1128 207.931 45.6899 230.517 38.0835 cv
254.986 29.8423 266.539 21.8994 266.652 21.8203 cv
266.787 21.7266 266.972 21.7598 267.065 21.894 cv
267.159 22.0283 267.125 22.2134 266.991 22.3066 cv
266.877 22.3862 255.277 30.3662 230.741 38.6333 cv
208.112 46.2578 169.52 55.7026 114.168 57.3989 cv
109.992 57.5269 105.793 57.5908 101.578 57.5908 cv
cp
1 1 1 rgb
f
25.1265 84.0054 mo
25.4292 85.1875 26.9956 85.4404 27.6548 84.4131 cv
37.0093 69.8413 li
46.9443 54.3647 li
47.4878 53.5176 46.9849 52.3916 45.9912 52.231 cv
31.9165 49.9604 li
17.8413 47.6895 li
16.8481 47.5293 16.0161 48.4404 16.2661 49.415 cv
20.8296 67.231 li
25.1265 84.0054 li
cp
.643137 .611765 .94902 rgb
f
116.137 89.1216 mo
116.643 90.2319 118.229 90.2051 118.698 89.0781 cv
125.341 73.0874 li
132.397 56.1035 li
132.783 55.1743 132.09 54.1538 131.083 54.1709 cv
116.829 54.4126 li
102.574 54.6548 li
101.568 54.6719 100.909 55.7153 101.327 56.6309 cv
108.955 73.3652 li
116.137 89.1216 li
cp
1 .815686 .521569 rgb
f
214.155 76.6006 mo
214.9 77.5669 216.439 77.1807 216.639 75.9771 cv
219.48 58.896 li
222.499 40.7539 li
222.664 39.7612 221.757 38.9253 220.781 39.1699 cv
206.953 42.6401 li
193.125 46.1108 li
192.149 46.3555 191.744 47.521 192.358 48.3179 cv
203.585 62.8853 li
214.155 76.6006 li
cp
.909804 .384314 .384314 rgb
f
548.624 64.6636 mo
541.442 64.6636 534.249 64.2329 527.099 63.2832 cv
486.554 57.8979 460.606 45.2612 445.979 35.6089 cv
430.107 25.1367 423.747 15.7998 423.685 15.7065 cv
423.593 15.5708 423.63 15.3867 423.766 15.2954 cv
423.901 15.2036 424.086 15.2407 424.177 15.3765 cv
424.239 15.4688 430.554 24.728 446.34 35.1372 cv
460.913 44.7466 486.768 57.3281 527.177 62.6953 cv
581.438 69.9028 638.661 47.1289 667.94 32.9136 cv
668.087 32.8418 668.266 32.9033 668.337 33.0508 cv
668.408 33.1978 668.347 33.3755 668.2 33.4468 cv
642.715 45.8198 596.093 64.6636 548.624 64.6636 cv
cp
1 1 1 rgb
f
443.818 68.3662 mo
443.72 69.5259 445.052 70.2461 445.968 69.5283 cv
458.975 59.3442 li
472.79 48.5278 li
473.546 47.936 473.447 46.7632 472.603 46.3066 cv
460.639 39.8359 li
448.676 33.3647 li
447.831 32.9082 446.795 33.4673 446.714 34.4238 cv
445.223 51.9063 li
443.818 68.3662 li
cp
.909804 .384314 .384314 rgb
f
543.18 95.2666 mo
543.618 96.3447 545.131 96.3823 545.622 95.3271 cv
552.593 80.3496 li
559.995 64.4424 li
560.4 63.5718 559.78 62.5718 558.82 62.5479 cv
545.224 62.21 li
531.626 61.8721 li
530.666 61.8486 529.997 62.8164 530.358 63.7061 cv
536.962 79.9614 li
543.18 95.2666 li
cp
1 .815686 .521569 rgb
f
651.922 74.4014 mo
652.722 75.248 654.146 74.7344 654.221 73.5728 cv
655.29 57.0879 li
656.425 39.5786 li
656.487 38.6206 655.547 37.9131 654.644 38.2388 cv
641.848 42.8511 li
629.053 47.4639 li
628.149 47.7891 627.876 48.9341 628.535 49.6323 cv
640.581 62.3901 li
651.922 74.4014 li
cp
.643137 .611765 .94902 rgb
f
181.77 377.093 mo
513.92 377.093 li
525.518 377.093 534.92 367.69 534.92 356.093 cv
534.92 344.494 525.518 335.093 513.92 335.093 cv
181.77 335.093 li
181.77 377.093 li
cp
.545098 .352941 .556863 rgb
f
304.373 346.322 mo
304.373 99.2813 li
304.373 92.6655 299.009 87.3022 292.393 87.3022 cv
274.352 87.3022 li
267.736 87.3022 262.373 92.6655 262.373 99.2813 cv
262.373 346.322 li
304.373 346.322 li
cp
.988235 .737255 .286275 rgb
f
346.033 328.584 mo
346.033 124.798 li
346.033 118.161 340.653 112.781 334.017 112.781 cv
316.05 112.781 li
309.413 112.781 304.033 118.161 304.033 124.798 cv
304.033 328.584 li
346.033 328.584 li
cp
1 .815686 .521569 rgb
f
388.55 334.395 mo
388.55 79.7158 li
388.55 73.0791 383.169 67.6992 376.533 67.6992 cv
358.566 67.6992 li
351.93 67.6992 346.549 73.0791 346.549 79.7158 cv
346.549 334.395 li
388.55 334.395 li
cp
.905882 .756863 .917647 rgb
f
430.21 316.656 mo
430.21 136.003 li
430.21 128.918 424.468 123.176 417.383 123.176 cv
401.037 123.176 li
393.953 123.176 388.21 128.918 388.21 136.003 cv
388.21 316.656 li
430.21 316.656 li
cp
.760784 .584314 .776471 rgb
f
529.582 42.4678 mo
529.229 43.0991 527.248 48.4204 529.641 53.7881 cv
532.033 59.1558 537.968 55.4204 537.968 55.4204 cv
537.968 45.5171 li
529.582 42.4678 li
cp
.956863 .517647 .384314 rgb
f
550.384 86.979 mo
550.384 86.979 542.101 88.6592 535.347 84.3574 cv
528.593 80.0552 530.419 53.7881 530.419 53.7881 cv
540.826 53.7881 li
546.943 68.2036 li
550.384 86.979 li
cp
f
550.593 195.737 mo
550.593 204.138 li
534.779 203.544 li
534.779 195.737 li
550.593 195.737 li
cp
f
587.105 194.791 mo
587.105 203.191 li
572.468 202.599 li
572.468 194.791 li
587.105 194.791 li
cp
f
555.312 102.192 mo
555.312 102.192 543.9 120.264 537.138 149.2 cv
530.97 175.592 529.641 197.421 529.641 197.421 cv
556.321 197.421 li
556.321 197.421 559.29 175.902 560.08 167.387 cv
560.871 158.873 563.502 147.476 563.502 147.476 cv
563.502 147.476 567.163 196.59 568.036 197.421 cv
568.909 198.252 594.451 197.604 594.178 196.477 cv
593.903 195.349 588.794 117.907 588.103 112.537 cv
585.977 96.0283 555.312 102.192 555.312 102.192 cv
cp
.654902 .435294 .658824 rgb
f
568.834 217.077 mo
568.834 218.56 569.332 220.255 570.352 220.683 cv
571.372 221.109 579.626 221.999 586.849 221.37 cv
593.763 220.766 595.198 220.255 595.708 219.627 cv
595.957 219.307 595.471 217.824 594.913 216.389 cv
594.878 216.318 594.854 216.235 594.818 216.164 cv
594.534 215.44 594.237 214.74 594.023 214.242 cv
593.811 213.768 593.55 213.317 593.241 212.879 cv
592.494 211.847 591.012 209.712 590.632 208.609 cv
590.134 207.139 589.375 203.96 588.865 202.466 cv
588.354 200.995 587.109 200.687 587.109 200.687 cv
587.109 200.687 572.89 199.714 571.87 200.568 cv
570.861 201.41 570.352 208.407 570.352 209.463 cv
570.352 210.519 li
570.352 211.503 569.676 213.448 569.237 215.061 cv
569.118 215.464 569.023 215.844 568.952 216.188 cv
568.881 216.531 568.834 216.828 568.834 217.077 cv
cp
.364706 .156863 .4 rgb
f
509.333 220.102 mo
510.282 220.492 550.641 221.596 551.578 220.102 cv
551.862 219.65 552.064 218.12 552.194 216.199 cv
552.526 211.669 552.526 204.933 552.526 204.933 cv
552.526 204.933 552.823 202.632 552.764 201.564 cv
552.717 200.509 533.302 200.912 533.302 200.912 cv
520.684 210.862 li
520.684 210.862 517.22 210.246 513.437 210.862 cv
511.433 211.183 510.14 213.638 509.499 215.95 cv
508.931 218.002 508.883 219.911 509.333 220.102 cv
cp
f
509.333 220.102 mo
510.282 220.492 550.641 221.596 551.578 220.102 cv
551.862 219.65 552.064 218.12 552.194 216.199 cv
544.521 216.745 525.641 217.776 509.499 215.95 cv
508.931 218.002 508.883 219.911 509.333 220.102 cv
cp
.988235 .737255 .286275 rgb
f
568.834 217.077 mo
568.834 218.56 569.332 220.255 570.352 220.683 cv
571.372 221.109 579.626 221.999 586.849 221.37 cv
593.763 220.766 595.198 220.255 595.708 219.627 cv
595.957 219.307 595.471 217.824 594.913 216.389 cv
588.497 216.875 576.91 217.314 569.237 215.061 cv
569.118 215.464 569.023 215.844 568.952 216.188 cv
568.881 216.531 568.834 216.828 568.834 217.077 cv
cp
f
563.502 147.772 mo
563.349 147.772 563.219 147.654 563.206 147.499 cv
563.198 147.393 562.365 136.811 562.124 132.117 cv
561.922 128.191 561.881 125.973 561.873 125.337 cv
553.404 121.567 li
553.254 121.5 553.187 121.325 553.254 121.176 cv
553.319 121.026 553.494 120.959 553.645 121.025 cv
562.288 124.873 li
562.396 124.92 562.464 125.026 562.465 125.143 cv
562.465 125.165 562.476 127.407 562.716 132.087 cv
562.957 136.772 563.789 147.346 563.798 147.452 cv
563.811 147.616 563.688 147.758 563.525 147.771 cv
563.518 147.772 563.51 147.772 563.502 147.772 cv
cp
f
586.743 208.033 mo
586.718 208.033 586.692 208.029 586.666 208.022 cv
586.61 208.008 581.063 206.534 578.282 207.012 cv
575.402 207.506 li
575.274 207.528 575.142 207.461 575.084 207.34 cv
575.027 207.219 575.059 207.075 575.16 206.988 cv
575.372 206.808 580.394 202.579 583.397 203.865 cv
583.549 203.93 583.618 204.104 583.554 204.254 cv
583.489 204.405 583.315 204.477 583.165 204.41 cv
581.194 203.572 578.028 205.58 576.47 206.722 cv
578.183 206.428 li
581.095 205.924 586.587 207.388 586.82 207.45 cv
586.979 207.492 587.072 207.655 587.029 207.813 cv
586.994 207.945 586.874 208.033 586.743 208.033 cv
cp
.643137 .611765 .94902 rgb
f
523.709 208.773 mo
523.559 208.773 523.43 208.659 523.414 208.507 cv
523.397 208.344 523.516 208.198 523.679 208.182 cv
530.311 207.499 li
528.167 204.976 li
528.061 204.851 528.076 204.663 528.2 204.558 cv
528.327 204.45 528.512 204.467 528.618 204.591 cv
531.127 207.544 li
531.198 207.628 531.218 207.745 531.177 207.847 cv
531.136 207.949 531.041 208.02 530.932 208.031 cv
523.739 208.771 li
523.729 208.772 523.719 208.773 523.709 208.773 cv
cp
f
575.305 61.1265 mo
575.305 61.1265 583.177 61.1001 587.425 65.2388 cv
591.673 69.3779 588.103 109.882 588.103 109.882 cv
588.103 109.882 573.421 111.604 565.386 109.882 cv
557.35 108.161 552.378 104.649 552.378 104.649 cv
552.378 104.649 554.972 67.0781 557.181 63.0928 cv
559.389 59.1069 575.305 61.1265 575.305 61.1265 cv
cp
f
576.86 58.2295 mo
576.815 63.3208 li
576.815 63.3208 574.873 64.9258 572.416 64.9263 cv
569.099 64.9272 567.972 62.3608 567.972 62.3608 cv
568.097 56.3936 li
576.86 58.2295 li
cp
.956863 .517647 .384314 rgb
f
576.86 58.0977 mo
576.86 58.0977 574.854 62.2158 571.098 61.5898 cv
568.07 61.0854 568.1 56.813 568.1 56.813 cv
576.86 58.0977 li
cp
0 0 0 rgb
f
566.823 43.4282 mo
566.823 43.4282 564.913 52.5063 567.801 56.9155 cv
570.688 61.3247 574.558 60.1099 576.305 58.8125 cv
578.661 57.0625 579.18 54.5889 579.18 54.5889 cv
579.18 54.5889 582.368 55.2793 583.478 52.689 cv
584.645 49.9683 582.689 47.7241 581.092 47.5664 cv
579.494 47.4092 579.303 47.6973 579.303 47.6973 cv
579.821 44.7793 li
579.821 44.7793 570.278 33.8066 566.823 43.4282 cv
cp
.956863 .517647 .384314 rgb
f
568.292 47.7227 mo
568.292 47.7227 563.479 45.5713 563.038 49.3193 cv
562.528 53.6611 567.725 53.7881 567.725 53.7881 cv
568.292 47.7227 li
cp
f
565.816 51.6079 mo
565.713 51.6079 565.612 51.5537 565.558 51.4565 cv
563.986 48.6563 li
563.906 48.5137 563.957 48.333 564.1 48.2524 cv
564.241 48.1748 564.424 48.2227 564.504 48.3662 cv
566.075 51.1665 li
566.155 51.3091 566.104 51.4897 565.962 51.5703 cv
565.916 51.5957 565.866 51.6079 565.816 51.6079 cv
cp
0 0 0 rgb
f
579.762 51.937 mo
579.677 51.937 579.592 51.9004 579.533 51.8296 cv
579.429 51.7036 579.446 51.5166 579.572 51.4121 cv
582.076 49.3369 li
582.202 49.2334 582.39 49.251 582.494 49.3765 cv
582.599 49.5024 582.581 49.6895 582.455 49.7939 cv
579.951 51.8691 li
579.896 51.9146 579.828 51.937 579.762 51.937 cv
cp
f
582.035 52.3657 mo
581.972 52.3657 581.907 52.3452 581.853 52.3032 cv
580.414 51.1831 li
580.285 51.0825 580.262 50.8965 580.362 50.7671 cv
580.464 50.6377 580.649 50.6162 580.779 50.7153 cv
582.218 51.8354 li
582.347 51.936 582.37 52.1221 582.27 52.2515 cv
582.211 52.3267 582.123 52.3657 582.035 52.3657 cv
cp
f
565.332 50.7446 mo
563.949 50.7446 li
563.785 50.7446 563.652 50.6118 563.652 50.4482 cv
563.652 50.2847 563.785 50.1519 563.949 50.1519 cv
565.332 50.1519 li
565.496 50.1519 565.629 50.2847 565.629 50.4482 cv
565.629 50.6118 565.496 50.7446 565.332 50.7446 cv
cp
f
574.549 49.5786 mo
574.354 49.5596 574.236 49.4136 574.254 49.251 cv
574.42 47.6895 li
574.438 47.5273 574.572 47.4097 574.746 47.4258 cv
574.909 47.4434 575.027 47.5894 575.01 47.752 cv
574.844 49.3135 li
574.827 49.4658 574.699 49.5786 574.549 49.5786 cv
cp
f
568.57 48.9663 mo
568.376 48.9473 568.258 48.8013 568.275 48.6387 cv
568.441 47.0771 li
568.459 46.9146 568.591 46.793 568.768 46.8135 cv
568.931 46.8311 569.049 46.9771 569.031 47.1396 cv
568.865 48.7012 li
568.849 48.8535 568.721 48.9663 568.57 48.9663 cv
cp
f
571.12 53.189 mo
570.976 53.189 570.849 53.0835 570.827 52.936 cv
570.456 50.4404 571.34 48.4707 571.378 48.3877 cv
571.446 48.2388 571.62 48.1743 571.771 48.2417 cv
571.919 48.3096 571.985 48.4854 571.917 48.6343 cv
571.908 48.6528 571.069 50.5337 571.413 52.8491 cv
571.438 53.0107 571.325 53.1616 571.164 53.186 cv
571.149 53.188 571.134 53.189 571.12 53.189 cv
cp
f
568.281 46.1211 mo
568.175 46.1211 568.071 46.063 568.019 45.9619 cv
567.942 45.8164 567.999 45.6377 568.145 45.562 cv
568.943 45.1455 570.039 45.4189 570.085 45.4297 cv
570.243 45.4697 570.339 45.6309 570.299 45.7896 cv
570.259 45.9487 570.097 46.0415 569.938 46.0044 cv
569.93 46.0015 569.014 45.7778 568.418 46.0874 cv
568.375 46.1104 568.328 46.1211 568.281 46.1211 cv
cp
f
575.823 46.8594 mo
575.746 46.8594 575.669 46.8296 575.611 46.77 cv
575.142 46.2891 574.201 46.2188 574.191 46.2183 cv
574.028 46.207 573.905 46.0654 573.916 45.9023 cv
573.927 45.7393 574.043 45.6094 574.231 45.6265 cv
574.279 45.6299 575.405 45.7114 576.035 46.356 cv
576.149 46.4731 576.147 46.6606 576.03 46.7749 cv
575.973 46.8315 575.898 46.8594 575.823 46.8594 cv
cp
f
577.878 48.5112 mo
577.878 48.5112 575.56 46.9429 575.698 44.564 cv
575.837 42.1855 576.36 41.5786 576.36 41.5786 cv
576.36 41.5786 573.976 42.8462 571.01 41.9521 cv
567.654 40.9409 565.806 36.3301 567.635 35.0728 cv
569.675 33.6709 574.632 35.644 574.632 35.644 cv
574.632 35.644 579.825 35.3589 583.213 39.4834 cv
586.601 43.6079 582.805 48.4653 582.805 48.4653 cv
582.805 48.4653 581.803 46.3394 577.878 48.5112 cv
cp
.262745 .0980392 .286275 rgb
f
571.604 55.7178 mo
571.384 55.7178 571.155 55.6875 570.923 55.6167 cv
570.767 55.5688 570.679 55.4028 570.727 55.2466 cv
570.774 55.0903 570.936 54.9995 571.097 55.0493 cv
572.373 55.4395 573.596 54.1836 573.608 54.1709 cv
573.722 54.0532 573.91 54.0508 574.027 54.1636 cv
574.145 54.2773 574.148 54.4648 574.034 54.583 cv
573.983 54.6362 572.922 55.7178 571.604 55.7178 cv
cp
0 0 0 rgb
f
568.57 38.002 mo
568.57 38.002 566.34 40.0405 565.816 42.5259 cv
565.294 45.0107 565.816 47.1152 565.816 47.1152 cv
566.318 47.1084 li
566.318 47.1084 567.521 41.0825 569.466 40.5298 cv
571.41 39.9771 568.57 38.002 568.57 38.002 cv
cp
.262745 .0980392 .286275 rgb
f
580.736 61.9155 mo
580.736 61.9155 594.052 63.0117 599.828 72.2813 cv
605.605 81.5513 606.051 89.8804 606.051 89.8804 cv
585.301 86.979 li
580.736 61.9155 li
cp
.643137 .611765 .94902 rgb
f
558.513 86.979 mo
547.665 87.4395 li
546.943 68.2036 li
546.943 68.2036 557.597 61.4727 561.91 60.9541 cv
566.224 60.4351 558.513 86.979 558.513 86.979 cv
cp
f
536.327 33.1782 mo
537.968 55.4204 li
531.625 55.4985 li
518.765 59.1211 li
517.413 33.1782 li
530.079 34.0513 li
536.327 33.1782 li
cp
.988235 .737255 .286275 rgb
f
517.413 33.1782 mo
515.64 33.0669 li
516.844 59.5562 li
518.765 59.1211 li
517.413 33.1782 li
cp
.917647 .635294 .176471 rgb
f
528.847 34.6299 mo
529.91 54.8989 li
518.849 58.1367 li
517.413 32.7769 li
517.413 32.7769 526.294 32.7271 528.847 34.6299 cv
cp
.988235 .737255 .286275 rgb
f
529.64 34.5698 mo
529.64 34.5698 530.141 34.2192 532.497 33.6245 cv
534.865 33.0269 535.415 33.2642 535.415 33.2642 cv
537.321 54.8989 li
531.205 54.8989 li
529.64 34.5698 li
cp
f
540.826 54.6953 mo
540.826 54.6953 542.482 48.7603 541.336 46.8291 cv
540.188 44.8984 537.386 42.9248 534.964 43.4653 cv
532.543 44.0059 536.621 47.3423 536.621 47.3423 cv
536.621 47.3423 534.072 52.9624 535.729 55.6206 cv
537.386 58.2788 540.826 54.6953 540.826 54.6953 cv
cp
.956863 .517647 .384314 rgb
f
603.52 89.5264 mo
603.52 89.5264 604.736 104.879 593.394 103.287 cv
580.514 101.479 573.821 74.8926 573.821 74.8926 cv
569.979 72.5293 li
569.979 72.5293 570.717 75.562 567.638 73.9302 cv
564.558 72.2988 565.174 69.2393 565.174 69.2393 cv
568.775 63.0732 li
568.775 63.0732 563.46 58.1367 565.031 57.8872 cv
567.458 57.5029 575.018 62.5503 575.018 62.5503 cv
575.018 62.5503 574.603 59.5083 576.36 60.0117 cv
578.258 60.5552 578.929 66.165 578.929 66.165 cv
599.127 88.4805 li
603.52 89.5264 li
cp
f
569.979 72.8257 mo
569.937 72.8257 569.894 72.8169 569.854 72.7979 cv
567.739 71.8057 li
567.591 71.7358 567.527 71.5596 567.597 71.4111 cv
567.667 71.2637 567.843 71.1992 567.991 71.2686 cv
569.085 71.7822 li
568.328 70.7173 li
568.233 70.5835 568.265 70.3984 568.398 70.3037 cv
568.534 70.21 568.717 70.2407 568.813 70.3735 cv
570.222 72.3574 li
570.299 72.4673 570.293 72.6162 570.207 72.7192 cv
570.149 72.7886 570.065 72.8257 569.979 72.8257 cv
cp
0 0 0 rgb
f
577.91 65.2227 mo
577.844 65.2227 577.777 65.2007 577.722 65.1553 cv
574.023 62.1172 li
573.897 62.0132 573.879 61.8267 573.982 61.7002 cv
574.085 61.5728 574.272 61.5547 574.4 61.6592 cv
578.099 64.6973 li
578.225 64.8013 578.243 64.9878 578.14 65.1143 cv
578.081 65.186 577.996 65.2227 577.91 65.2227 cv
cp
f
570.146 64.2949 mo
570.089 64.2949 570.031 64.2788 569.98 64.2441 cv
568.609 63.3188 li
568.474 63.2275 568.438 63.043 568.529 62.9072 cv
568.622 62.7715 568.808 62.7363 568.941 62.8276 cv
570.313 63.7529 li
570.448 63.8442 570.483 64.0288 570.393 64.1646 cv
570.335 64.249 570.241 64.2949 570.146 64.2949 cv
cp
f
536.651 56.7568 mo
536.617 56.7568 536.583 56.751 536.549 56.7388 cv
534.201 55.8774 535.118 51.0947 535.158 50.8916 cv
535.19 50.7314 535.341 50.6289 535.507 50.6582 cv
535.667 50.6899 535.771 50.8462 535.74 51.0068 cv
535.494 52.2524 535.198 55.6113 536.754 56.1821 cv
536.907 56.2388 536.986 56.4087 536.93 56.5625 cv
536.886 56.6826 536.772 56.7568 536.651 56.7568 cv
cp
f
586.743 121.456 mo
586.685 121.456 586.625 121.439 586.573 121.403 cv
581.945 118.176 580.773 113.607 580.726 113.414 cv
580.687 113.255 580.783 113.094 580.942 113.055 cv
581.103 113.013 581.262 113.113 581.302 113.271 cv
581.313 113.316 582.475 117.822 586.913 120.917 cv
587.047 121.01 587.08 121.195 586.986 121.329 cv
586.929 121.412 586.837 121.456 586.743 121.456 cv
cp
.988235 .737255 .286275 rgb
f
530.079 34.0513 mo
531.625 55.4985 li
529.64 56.0576 li
527.74 34.0513 li
530.079 34.0513 li
cp
.917647 .635294 .176471 rgb
f
354.091 49.042 mo
336.201 49.042 318.236 47.2466 300.461 43.6719 cv
258.798 35.293 232.268 19.8208 232.004 19.6655 cv
231.864 19.582 231.817 19.4004 231.9 19.2593 cv
231.983 19.1172 232.165 19.0708 232.306 19.1548 cv
232.568 19.3096 259.03 34.7388 300.602 43.0952 cv
338.963 50.8076 398.402 53.8999 463.728 24.8447 cv
463.876 24.7778 464.052 24.8457 464.118 24.9951 cv
464.186 25.145 464.118 25.3203 463.968 25.3867 cv
435.056 38.2456 404.87 45.9473 374.251 48.2778 cv
367.551 48.7876 360.826 49.042 354.091 49.042 cv
cp
1 1 1 rgb
f
238.288 56.1934 mo
238.301 57.3574 239.696 57.9453 240.539 57.1426 cv
252.501 45.749 li
265.206 33.6475 li
265.901 32.9854 265.689 31.8276 264.804 31.4546 cv
252.271 26.1704 li
239.738 20.8867 li
238.854 20.5137 237.876 21.1704 237.888 22.1299 cv
238.094 39.6748 li
238.288 56.1934 li
cp
.643137 .611765 .94902 rgb
f
420.306 71.9824 mo
421.024 72.8975 422.489 72.5151 422.669 71.3652 cv
425.226 55.0444 li
427.939 37.71 li
428.088 36.7612 427.216 35.9717 426.287 36.2144 cv
413.126 39.6504 li
399.966 43.0864 li
399.037 43.3286 398.662 44.4443 399.255 45.1987 cv
410.098 58.9941 li
420.306 71.9824 li
cp
1 .815686 .521569 rgb
f
319.463 77.2114 mo
319.839 78.3125 321.348 78.4351 321.898 77.4092 cv
329.699 62.8472 li
337.984 47.3813 li
338.438 46.5347 337.875 45.5015 336.918 45.4238 cv
323.361 44.3218 li
309.805 43.2202 li
308.848 43.1426 308.125 44.0713 308.436 44.98 cv
314.115 61.5811 li
319.463 77.2114 li
cp
f
306.146 303.679 mo
57.2578 303.679 li
45.6597 303.679 36.2578 294.276 36.2578 282.679 cv
36.2578 271.08 45.6597 261.679 57.2578 261.679 cv
306.146 261.679 li
306.146 303.679 li
cp
.654902 .435294 .658824 rgb
f
322.947 303.679 mo
114.567 303.679 li
103.746 303.679 94.9731 294.906 94.9731 284.085 cv
94.9731 281.272 li
94.9731 270.451 103.746 261.679 114.567 261.679 cv
322.947 261.679 li
326.798 261.679 329.92 264.801 329.92 268.652 cv
329.92 296.705 li
329.92 300.557 326.798 303.679 322.947 303.679 cv
cp
.760784 .584314 .776471 rgb
f
329.92 295.567 mo
117.869 295.567 li
110.505 295.567 104.535 289.598 104.535 282.234 cv
104.535 274.87 110.505 268.9 117.869 268.9 cv
329.92 268.9 li
329.92 295.567 li
cp
.905882 .756863 .917647 rgb
f
182.28 377.093 mo
390.66 377.093 li
401.481 377.093 410.253 368.32 410.253 357.499 cv
410.253 354.686 li
410.253 343.864 401.481 335.093 390.66 335.093 cv
182.28 335.093 li
178.428 335.093 175.306 338.215 175.306 342.065 cv
175.306 370.119 li
175.306 373.97 178.428 377.093 182.28 377.093 cv
cp
.654902 .435294 .658824 rgb
f
175.306 368.981 mo
387.358 368.981 li
394.722 368.981 400.691 363.012 400.691 355.647 cv
400.691 348.284 394.722 342.314 387.358 342.314 cv
175.306 342.314 li
175.306 368.981 li
cp
.819608 .662745 .827451 rgb
f
329.921 278.29 mo
258.448 278.29 li
258.172 278.29 257.948 278.066 257.948 277.79 cv
257.948 277.514 258.172 277.29 258.448 277.29 cv
329.921 277.29 li
330.197 277.29 330.421 277.514 330.421 277.79 cv
330.421 278.066 330.197 278.29 329.921 278.29 cv
cp
1 1 1 rgb
f
329.921 287.179 mo
271.196 287.179 li
270.919 287.179 270.696 286.955 270.696 286.679 cv
270.696 286.402 270.919 286.179 271.196 286.179 cv
329.921 286.179 li
330.197 286.179 330.421 286.402 330.421 286.679 cv
330.421 286.955 330.197 287.179 329.921 287.179 cv
cp
f
53.3008 262.012 mo
287.7 262.012 li
299.298 262.012 308.7 252.609 308.7 241.012 cv
308.7 229.414 299.298 220.012 287.7 220.012 cv
53.3008 220.012 li
52.9971 220.012 52.751 220.258 52.751 220.562 cv
52.751 261.462 li
52.751 261.766 52.9971 262.012 53.3008 262.012 cv
cp
.909804 .384314 .384314 rgb
f
47.7695 262.012 mo
228.984 262.012 li
240.582 262.012 249.984 252.609 249.984 241.012 cv
249.984 229.414 240.582 220.012 228.984 220.012 cv
47.7695 220.012 li
44.1387 220.012 41.1953 222.955 41.1953 226.586 cv
41.1953 255.438 li
41.1953 259.068 44.1387 262.012 47.7695 262.012 cv
cp
.956863 .537255 .537255 rgb
f
41.1953 253.9 mo
228.154 253.9 li
235.518 253.9 241.487 247.932 241.487 240.567 cv
241.487 233.203 235.518 227.234 228.154 227.234 cv
41.1953 227.234 li
41.1953 253.9 li
cp
1 .733333 .733333 rgb
f
72.4941 220.345 mo
260.869 220.345 li
272.466 220.345 281.869 210.943 281.869 199.345 cv
281.869 187.747 272.466 178.345 260.869 178.345 cv
72.4941 178.345 li
71.1699 178.345 70.0962 179.418 70.0962 180.743 cv
70.0962 217.947 li
70.0962 219.271 71.1699 220.345 72.4941 220.345 cv
cp
.545098 .333333 .556863 rgb
f
66.5146 220.345 mo
212.287 220.345 li
223.885 220.345 233.287 210.943 233.287 199.345 cv
233.287 187.747 223.885 178.345 212.287 178.345 cv
66.5146 178.345 li
63.2124 178.345 60.5351 181.022 60.5351 184.325 cv
60.5351 214.365 li
60.5351 217.668 63.2124 220.345 66.5146 220.345 cv
cp
.654902 .435294 .658824 rgb
f
60.5351 212.234 mo
212.923 212.234 li
220.287 212.234 226.256 206.265 226.256 198.901 cv
226.256 191.537 220.287 185.567 212.923 185.567 cv
60.5351 185.567 li
60.5351 212.234 li
cp
.819608 .662745 .827451 rgb
f
144.551 236.623 mo
41.0786 236.623 li
40.8022 236.623 40.5786 236.399 40.5786 236.123 cv
40.5786 235.847 40.8022 235.623 41.0786 235.623 cv
144.551 235.623 li
144.828 235.623 145.051 235.847 145.051 236.123 cv
145.051 236.399 144.828 236.623 144.551 236.623 cv
cp
1 1 1 rgb
f
122.997 245.512 mo
41.2725 245.512 li
40.9961 245.512 40.7725 245.288 40.7725 245.012 cv
40.7725 244.735 40.9961 244.512 41.2725 244.512 cv
122.997 244.512 li
123.273 244.512 123.497 244.735 123.497 245.012 cv
123.497 245.288 123.273 245.512 122.997 245.512 cv
cp
f
99.6621 194.956 mo
60.1899 194.956 li
59.9136 194.956 59.6899 194.732 59.6899 194.456 cv
59.6899 194.18 59.9136 193.956 60.1899 193.956 cv
99.6621 193.956 li
99.9385 193.956 100.162 194.18 100.162 194.456 cv
100.162 194.732 99.9385 194.956 99.6621 194.956 cv
cp
.654902 .435294 .658824 rgb
f
115.108 203.845 mo
60.3833 203.845 li
60.1069 203.845 59.8833 203.621 59.8833 203.345 cv
59.8833 203.068 60.1069 202.845 60.3833 202.845 cv
115.108 202.845 li
115.385 202.845 115.608 203.068 115.608 203.345 cv
115.608 203.621 115.385 203.845 115.108 203.845 cv
cp
f
644.1 303.742 mo
391.405 303.742 li
379.808 303.742 370.405 294.34 370.405 282.742 cv
370.405 271.144 379.808 261.742 391.405 261.742 cv
644.1 261.742 li
644.403 261.742 644.649 261.988 644.649 262.291 cv
644.649 303.192 li
644.649 303.496 644.403 303.742 644.1 303.742 cv
cp
.866667 .305882 .305882 rgb
f
649.631 303.742 mo
451.727 303.742 li
440.129 303.742 430.727 294.34 430.727 282.742 cv
430.727 271.144 440.129 261.742 451.727 261.742 cv
649.631 261.742 li
653.262 261.742 656.205 264.686 656.205 268.315 cv
656.205 297.168 li
656.205 300.799 653.262 303.742 649.631 303.742 cv
cp
.937255 .384314 .384314 rgb
f
656.205 295.631 mo
453.236 295.631 li
445.872 295.631 439.903 289.661 439.903 282.298 cv
439.903 274.934 445.872 268.964 453.236 268.964 cv
656.205 268.964 li
656.205 295.631 li
cp
1 .733333 .733333 rgb
f
487.889 335.093 mo
235.195 335.093 li
223.597 335.093 214.195 325.69 214.195 314.093 cv
214.195 302.494 223.597 293.093 235.195 293.093 cv
487.889 293.093 li
488.192 293.093 488.438 293.339 488.438 293.642 cv
488.438 334.543 li
488.438 334.847 488.192 335.093 487.889 335.093 cv
cp
.988235 .737255 .286275 rgb
f
493.42 335.093 mo
295.516 335.093 li
283.918 335.093 274.516 325.69 274.516 314.093 cv
274.516 302.494 283.918 293.093 295.516 293.093 cv
493.42 293.093 li
497.051 293.093 499.994 296.035 499.994 299.666 cv
499.994 328.519 li
499.994 332.149 497.051 335.093 493.42 335.093 cv
cp
1 .815686 .521569 rgb
f
499.994 326.981 mo
297.025 326.981 li
289.662 326.981 283.692 321.012 283.692 313.647 cv
283.692 306.284 289.662 300.314 297.025 300.314 cv
499.994 300.314 li
499.994 326.981 li
cp
1 1 1 rgb
f
624.906 262.075 mo
436.531 262.075 li
424.934 262.075 415.531 252.673 415.531 241.075 cv
415.531 229.478 424.934 220.075 436.531 220.075 cv
624.906 220.075 li
626.23 220.075 627.304 221.148 627.304 222.473 cv
627.304 259.678 li
627.304 261.002 626.23 262.075 624.906 262.075 cv
cp
.654902 .435294 .658824 rgb
f
630.885 262.075 mo
485.113 262.075 li
473.515 262.075 464.113 252.673 464.113 241.075 cv
464.113 229.478 473.515 220.075 485.113 220.075 cv
630.885 220.075 li
634.188 220.075 636.865 222.752 636.865 226.055 cv
636.865 256.096 li
636.865 259.398 634.188 262.075 630.885 262.075 cv
cp
.760784 .584314 .776471 rgb
f
278.783 351.833 mo
175.311 351.833 li
175.034 351.833 174.811 351.609 174.811 351.333 cv
174.811 351.057 175.034 350.833 175.311 350.833 cv
278.783 350.833 li
279.06 350.833 279.283 351.057 279.283 351.333 cv
279.283 351.609 279.06 351.833 278.783 351.833 cv
cp
.654902 .435294 .658824 rgb
f
636.865 254.408 mo
484.477 254.408 li
477.113 254.408 471.144 248.439 471.144 241.075 cv
471.144 233.711 477.113 227.742 484.477 227.742 cv
636.865 227.742 li
636.865 254.408 li
cp
.905882 .756863 .917647 rgb
f
637.211 236.687 mo
597.738 236.687 li
597.462 236.687 597.238 236.463 597.238 236.187 cv
597.238 235.91 597.462 235.687 597.738 235.687 cv
637.211 235.687 li
637.487 235.687 637.711 235.91 637.711 236.187 cv
637.711 236.463 637.487 236.687 637.211 236.687 cv
cp
.760784 .584314 .776471 rgb
f
637.017 245.575 mo
582.292 245.575 li
582.016 245.575 581.792 245.352 581.792 245.075 cv
581.792 244.799 582.016 244.575 582.292 244.575 cv
637.017 244.575 li
637.293 244.575 637.517 244.799 637.517 245.075 cv
637.517 245.352 637.293 245.575 637.017 245.575 cv
cp
f
230.031 361.5 mo
175.307 361.5 li
175.03 361.5 174.807 361.276 174.807 361 cv
174.807 360.724 175.03 360.5 175.307 360.5 cv
230.031 360.5 li
230.308 360.5 230.531 360.724 230.531 361 cv
230.531 361.276 230.308 361.5 230.031 361.5 cv
cp
.654902 .435294 .658824 rgb
f
499.665 309.703 mo
460.192 309.703 li
459.916 309.703 459.692 309.479 459.692 309.203 cv
459.692 308.927 459.916 308.703 460.192 308.703 cv
499.665 308.703 li
499.941 308.703 500.165 308.927 500.165 309.203 cv
500.165 309.479 499.941 309.703 499.665 309.703 cv
cp
.819608 .662745 .827451 rgb
f
500.076 318.593 mo
445.351 318.593 li
445.074 318.593 444.851 318.369 444.851 318.093 cv
444.851 317.816 445.074 317.593 445.351 317.593 cv
500.076 317.593 li
500.353 317.593 500.576 317.816 500.576 318.093 cv
500.576 318.369 500.353 318.593 500.076 318.593 cv
cp
f
109.537 126.506 mo
109.537 126.506 108.294 117.465 107.777 116.971 cv
107.259 116.476 96.167 107.22 95.6719 104.539 cv
95.1772 101.858 97.1055 100.649 97.1055 100.649 cv
97.1055 100.649 127.204 111.302 128.013 112.219 cv
128.822 113.136 124.842 126.24 124.842 126.24 cv
109.537 126.506 li
cp
.956863 .517647 .384314 rgb
f
96.2764 101.487 mo
127.929 114.414 li
129.463 110.032 li
97.5361 97.772 li
96.2764 101.487 li
cp
0 0 0 rgb
f
99.8979 109.832 mo
103.46 113.176 li
108.57 106.507 li
104.982 104.034 li
99.8979 109.832 li
cp
f
140.738 130.172 mo
140.738 130.172 141.157 121.057 140.738 120.477 cv
140.318 119.896 131.09 108.781 131.09 106.055 cv
131.09 103.328 133.206 102.489 133.206 102.489 cv
133.206 102.489 160.871 118.428 161.5 119.477 cv
162.129 120.525 155.837 132.689 155.837 132.689 cv
140.738 130.172 li
cp
.956863 .517647 .384314 rgb
f
173.817 152.776 mo
173.817 152.776 169.534 148.158 151.499 147.773 cv
133.463 147.388 128.504 148.849 128.504 148.849 cv
129.207 122.136 li
106.5 119.175 li
106.5 119.175 96.04 146.619 96.2656 159.507 cv
96.4907 172.395 107.086 177.011 110.468 177.78 cv
113.85 178.55 175.306 178.123 175.306 178.123 cv
173.817 152.776 li
cp
.643137 .611765 .94902 rgb
f
127.602 150.95 mo
137.878 123.342 li
160.547 125.175 li
153.753 148.627 li
127.602 150.95 li
cp
f
153.94 160.882 mo
171.307 177.772 li
171.307 177.772 177.17 179.486 184.788 179.69 cv
192.406 179.894 198.335 179.69 198.335 179.69 cv
202.196 174.999 li
207.636 179.781 li
226.265 163.576 li
226.265 163.576 216.797 155.649 204.848 150.246 cv
192.899 144.842 175.357 144.564 153.94 160.882 cv
cp
.635294 .27451 .686275 rgb
f
205.861 175.925 mo
205.689 175.925 205.55 175.786 205.55 175.615 cv
205.558 158.885 li
205.558 158.713 205.697 158.574 205.868 158.574 cv
206.04 158.574 206.179 158.713 206.179 158.885 cv
206.171 175.615 li
206.171 175.786 206.032 175.925 205.861 175.925 cv
cp
.364706 .156863 .4 rgb
f
175.824 167.988 mo
174.536 168.006 172.255 171.003 171.01 172.857 cv
172.915 172.039 176.001 170.462 176.446 169.087 cv
176.54 168.799 176.507 168.549 176.343 168.302 cv
176.16 168.024 175.962 167.988 175.824 167.988 cv
cp
170.213 173.826 mo
170.122 173.826 170.033 173.786 169.973 173.713 cv
169.889 173.61 169.879 173.465 169.949 173.352 cv
170.327 172.743 173.704 167.397 175.804 167.367 cv
176.253 167.383 176.602 167.566 176.862 167.959 cv
177.13 168.366 177.189 168.81 177.038 169.278 cv
176.311 171.522 170.567 173.714 170.323 173.806 cv
170.287 173.82 170.25 173.826 170.213 173.826 cv
cp
f
214.906 172.755 mo
224.687 164.95 li
224.687 164.95 226.954 167.334 227.046 177.148 cv
227.139 186.961 211.709 190.873 211.709 190.873 cv
210.237 181.487 li
214.906 172.755 li
cp
.956863 .517647 .384314 rgb
f
214.195 171.875 mo
214.195 168.753 li
214.195 168.753 200.41 169.909 200.391 172.577 cv
200.364 176.18 208.414 176.401 208.414 176.401 cv
214.195 171.875 li
cp
1 1 1 rgb
f
183.831 167.774 mo
183.831 173.2 li
200.861 175.512 li
200.821 171.646 li
200.821 171.646 195.34 168.308 183.831 167.774 cv
cp
f
181.884 175.512 mo
181.884 175.512 181.303 171.243 183.831 171.955 cv
186.358 172.666 185.167 176.401 185.167 176.401 cv
181.884 175.512 li
cp
.909804 .439216 .329412 rgb
f
185.755 143.722 mo
184.277 149.392 li
184.277 149.392 185.948 151.933 190.015 152.361 cv
194.155 152.796 193.38 150.697 193.38 150.697 cv
193.705 147.774 li
186.897 144.305 li
185.755 143.722 li
cp
.956863 .517647 .384314 rgb
f
186.888 144.33 mo
186.852 144.521 186.861 144.76 186.9 145.043 cv
187.463 148.877 191.296 150.697 193.38 150.697 cv
193.638 147.946 li
186.888 144.33 li
cp
0 0 0 rgb
f
199.544 132.845 mo
199.544 132.845 200.707 142.398 197.957 146.746 cv
195.206 151.094 191.105 149.053 188.792 147.361 cv
186.48 145.669 185.754 143.723 185.754 143.723 cv
185.754 143.723 183.092 143.819 182.148 141.087 cv
181.205 138.356 182.972 136.074 184.529 135.895 cv
186.086 135.717 187.429 137.205 187.429 137.205 cv
186.878 134.364 li
186.878 134.364 196.024 123.507 199.544 132.845 cv
cp
.956863 .517647 .384314 rgb
f
196.023 143.505 mo
195.963 143.505 195.903 143.487 195.849 143.451 cv
195.708 143.354 195.671 143.162 195.767 143.02 cv
196.712 141.631 196.072 139.607 196.065 139.587 cv
196.013 139.424 196.102 139.249 196.265 139.196 cv
196.429 139.14 196.603 139.231 196.656 139.394 cv
196.687 139.489 197.399 141.725 196.281 143.369 cv
196.221 143.458 196.123 143.505 196.023 143.505 cv
cp
0 0 0 rgb
f
185.94 141.09 mo
185.826 141.09 185.716 141.027 185.662 140.917 cv
184.116 137.789 li
184.04 137.635 184.103 137.448 184.257 137.373 cv
184.411 137.297 184.597 137.359 184.673 137.513 cv
186.219 140.642 li
186.295 140.796 186.232 140.982 186.078 141.058 cv
186.034 141.08 185.987 141.09 185.94 141.09 cv
cp
f
185.374 139.943 mo
185.328 139.939 183.67 139.693 183.67 139.693 cv
183.5 139.668 183.383 139.51 183.409 139.341 cv
183.434 139.171 183.592 139.048 183.761 139.079 cv
185.419 139.325 li
185.589 139.35 185.706 139.508 185.681 139.678 cv
185.658 139.832 185.525 139.943 185.374 139.943 cv
cp
f
187.429 137.205 mo
187.429 137.205 188.124 138.042 189.06 137.247 cv
189.995 136.451 189.508 133.104 189.508 133.104 cv
189.508 133.104 191.937 134.496 193.815 134.128 cv
195.694 133.759 197.214 131.626 197.214 131.626 cv
197.214 131.626 197.643 134.465 201.54 134.469 cv
205.437 134.473 207.603 129.832 204.103 127.675 cv
200.603 125.519 198.008 126.564 198.008 126.564 cv
198.008 126.564 198.605 122.897 193.37 123.193 cv
188.599 123.462 186.229 128.608 186.229 128.608 cv
186.229 128.608 183.618 127.939 182.265 130.586 cv
180.912 133.233 183.565 136.262 183.565 136.262 cv
183.565 136.262 185.759 135.742 187.429 137.205 cv
cp
f
193.169 139.188 mo
193.151 139.188 193.134 139.187 193.116 139.184 cv
192.947 139.155 192.833 138.994 192.862 138.825 cv
193.144 137.193 li
193.173 137.023 193.331 136.912 193.502 136.939 cv
193.671 136.969 193.785 137.129 193.756 137.298 cv
193.475 138.931 li
193.448 139.082 193.317 139.188 193.169 139.188 cv
cp
f
197.947 140.244 mo
197.73 140.215 197.613 140.056 197.639 139.887 cv
197.889 138.249 li
197.915 138.079 198.072 137.964 198.243 137.989 cv
198.413 138.015 198.529 138.173 198.503 138.343 cv
198.253 139.98 li
198.23 140.134 198.098 140.244 197.947 140.244 cv
cp
f
192.734 136.095 mo
192.696 136.095 192.657 136.088 192.619 136.073 cv
192.459 136.009 192.382 135.828 192.446 135.669 cv
192.94 134.437 194.457 134.603 194.522 134.611 cv
194.692 134.631 194.813 134.786 194.793 134.956 cv
194.773 135.125 194.611 135.243 194.449 135.228 cv
194.404 135.224 193.34 135.111 193.022 135.9 cv
192.974 136.021 192.857 136.095 192.734 136.095 cv
cp
f
199.069 137.014 mo
198.902 137.014 198.765 136.882 198.758 136.715 cv
198.754 136.649 198.692 136.091 197.748 136.072 cv
197.577 136.068 197.44 135.926 197.444 135.755 cv
197.448 135.583 197.595 135.438 197.761 135.451 cv
199.018 135.477 199.369 136.277 199.379 136.696 cv
199.383 136.868 199.248 137.01 199.077 137.014 cv
199.074 137.014 199.071 137.014 199.069 137.014 cv
cp
f
193.925 145.797 mo
193.876 145.797 193.826 145.786 193.78 145.761 cv
193.731 145.735 192.588 145.112 192.705 143.936 cv
192.722 143.766 192.879 143.646 193.044 143.658 cv
193.215 143.675 193.34 143.827 193.323 143.998 cv
193.247 144.764 194.063 145.208 194.072 145.213 cv
194.223 145.293 194.281 145.481 194.2 145.633 cv
194.144 145.738 194.037 145.797 193.925 145.797 cv
cp
f
214.906 170.148 mo
214.362 191.275 li
200.375 192.986 li
183.231 191.534 li
183.231 169.411 li
200.821 171.646 li
214.906 170.148 li
cp
.988235 .737255 .286275 rgb
f
200.053 192.986 mo
201.668 192.986 li
201.668 171.499 li
200.053 171.499 li
200.053 192.986 li
cp
.917647 .635294 .176471 rgb
f
132.239 103.162 mo
161.019 121.62 li
163.323 117.589 li
134.152 99.7378 li
132.239 103.162 li
cp
0 0 0 rgb
f
134.285 112.026 mo
137.182 115.961 li
143.417 110.331 li
140.338 107.248 li
134.285 112.026 li
cp
f
127.695 150.636 mo
126.63 151.924 125.128 154.026 125.275 155.153 cv
125.306 155.393 125.41 155.562 125.603 155.684 cv
125.803 155.812 125.93 155.779 126.017 155.736 cv
126.804 155.353 127.408 152.716 127.695 150.636 cv
cp
125.863 156.396 mo
125.688 156.396 125.487 156.347 125.27 156.208 cv
124.924 155.988 124.713 155.651 124.659 155.233 cv
124.408 153.301 127.536 149.847 127.894 149.459 cv
127.911 149.44 127.932 149.423 127.954 149.409 cv
127.984 149.389 128.017 149.375 128.052 149.367 cv
128.441 149.269 142.27 145.813 153.646 147.348 cv
153.815 147.371 153.935 147.527 153.912 147.697 cv
153.889 147.868 153.731 147.991 153.563 147.963 cv
142.969 146.536 130.191 149.487 128.408 149.919 cv
128.281 151.085 127.703 155.605 126.289 156.295 cv
126.177 156.35 126.032 156.396 125.863 156.396 cv
cp
1 1 1 rgb
f
156.485 163.357 mo
156.485 163.357 146.158 177.291 156.831 185.028 cv
167.503 192.766 183.231 191.534 183.231 191.534 cv
185.691 179.781 li
167.281 171.688 li
156.485 163.357 li
cp
.956863 .517647 .384314 rgb
f
210.369 178.618 mo
210.662 178.063 211.114 177.611 211.63 177.254 cv
213.376 176.043 218.868 173.52 220.498 175.066 cv
222.06 176.547 219.052 178.044 219.052 178.044 cv
219.052 178.044 221.717 177.322 221.587 179.306 cv
221.479 180.963 219.782 181.51 219.782 181.51 cv
219.782 181.51 222.625 181.024 221.592 183.397 cv
220.559 185.771 214.679 187.883 212.515 187.817 cv
210.351 187.751 211.884 184.913 211.884 184.913 cv
211.884 184.913 209.56 184.534 209.56 183.246 cv
209.56 181.882 211.388 181.364 211.388 181.364 cv
211.388 181.364 209.316 180.617 210.369 178.618 cv
cp
f
212.069 181.509 mo
211.951 181.509 211.838 181.441 211.786 181.327 cv
211.715 181.17 211.785 180.986 211.941 180.916 cv
218.925 177.761 li
219.079 177.69 219.265 177.76 219.335 177.916 cv
219.406 178.072 219.337 178.256 219.181 178.327 cv
212.197 181.481 li
212.155 181.5 212.112 181.509 212.069 181.509 cv
cp
0 0 0 rgb
f
212.736 184.9 mo
212.616 184.9 212.502 184.83 212.452 184.714 cv
212.383 184.557 212.455 184.374 212.611 184.305 cv
219.657 181.226 li
219.815 181.156 219.997 181.229 220.066 181.385 cv
220.135 181.542 220.063 181.726 219.906 181.794 cv
212.86 184.874 li
212.82 184.892 212.777 184.9 212.736 184.9 cv
cp
f
190.487 178.618 mo
190.195 178.063 189.742 177.611 189.226 177.254 cv
187.48 176.043 181.988 173.52 180.358 175.066 cv
178.796 176.547 181.804 178.044 181.804 178.044 cv
181.804 178.044 179.14 177.322 179.269 179.306 cv
179.377 180.963 181.075 181.51 181.075 181.51 cv
181.075 181.51 178.231 181.024 179.264 183.397 cv
180.297 185.771 186.177 187.883 188.341 187.817 cv
190.506 187.751 188.973 184.913 188.973 184.913 cv
188.973 184.913 191.297 184.534 191.296 183.246 cv
191.296 181.882 189.469 181.364 189.469 181.364 cv
189.469 181.364 191.54 180.617 190.487 178.618 cv
cp
.956863 .517647 .384314 rgb
f
188.788 181.509 mo
188.745 181.509 188.702 181.5 188.66 181.481 cv
181.676 178.327 li
181.52 178.256 181.451 178.072 181.521 177.916 cv
181.592 177.76 181.776 177.69 181.932 177.761 cv
188.916 180.916 li
189.072 180.986 189.142 181.17 189.071 181.327 cv
189.019 181.441 188.906 181.509 188.788 181.509 cv
cp
0 0 0 rgb
f
188.121 184.9 mo
188.079 184.9 188.037 184.892 187.996 184.874 cv
180.95 181.794 li
180.793 181.726 180.722 181.542 180.791 181.385 cv
180.859 181.229 181.043 181.156 181.199 181.226 cv
188.245 184.305 li
188.402 184.374 188.474 184.557 188.405 184.714 cv
188.354 184.83 188.24 184.9 188.121 184.9 cv
cp
f
185.94 186.006 mo
185.94 186.006 187.926 191.51 183.231 191.534 cv
178.537 191.557 179.039 186.006 179.039 186.006 cv
183.716 184.589 li
185.94 186.006 li
cp
.956863 .517647 .384314 rgb
f
190.669 152.691 mo
190.457 152.691 190.233 152.685 189.996 152.671 cv
185.561 152.408 183.459 149.013 183.372 148.869 cv
183.283 148.722 183.33 148.532 183.476 148.443 cv
183.624 148.354 183.814 148.401 183.903 148.547 cv
183.922 148.58 185.933 151.808 190.033 152.051 cv
193.268 152.241 193.64 150.981 193.643 150.968 cv
193.685 150.805 193.848 150.701 194.014 150.739 cv
194.178 150.776 194.283 150.935 194.25 151.1 cv
194.235 151.168 193.886 152.691 190.669 152.691 cv
cp
.364706 .156863 .4 rgb
f
422.896 169.39 mo
422.896 164.445 li
422.896 164.445 435.216 165.66 435.735 169.043 cv
436.255 172.426 422.896 169.39 422.896 169.39 cv
cp
1 1 1 rgb
f
422.018 237.053 mo
422.724 244.91 li
437.817 244.91 li
437.817 236.012 li
422.018 237.053 li
cp
.956863 .517647 .384314 rgb
f
448.94 240.684 mo
450.465 248.563 li
467.077 244.624 li
464.175 236.012 li
448.94 240.684 li
cp
f
467.423 133.125 mo
467.423 133.125 471.386 129.49 477.027 132.457 cv
482.67 135.425 481.967 143.875 481.967 143.875 cv
481.967 143.875 487.898 145.975 488.385 153.232 cv
488.872 160.489 480.545 163.312 480.545 163.312 cv
466.364 161.078 li
466.364 161.078 463.534 156.858 463.555 156.703 cv
463.575 156.546 462.992 139.067 462.992 139.067 cv
467.423 133.125 li
cp
0 0 0 rgb
f
436.773 192.741 mo
436.773 192.741 440.87 162.174 451.893 157.342 cv
462.915 152.51 482.329 161.185 482.329 161.185 cv
478.815 197.531 li
436.773 192.741 li
cp
.643137 .611765 .94902 rgb
f
445.968 191.163 mo
445.968 191.163 424.14 185.851 418.153 195.074 cv
412.168 204.298 420.538 239.495 420.538 239.495 cv
440.639 239.495 li
445.968 191.163 li
cp
.45098 .168627 .509804 rgb
f
495.383 199.16 mo
495.383 199.16 499.303 217.933 490.194 221.333 cv
481.085 224.733 460.715 223.048 460.715 223.048 cv
469.233 238.08 li
441.836 246.196 li
441.836 246.196 419.085 205.115 432.933 194.167 cv
446.78 183.218 475.928 199.16 475.928 199.16 cv
495.383 199.16 li
cp
.533333 .219608 .588235 rgb
f
421.556 240.684 mo
421.556 240.684 416.332 246.848 415.118 247.433 cv
413.903 248.019 401.238 252.283 398.81 254.661 cv
396.38 257.04 396.207 261.714 396.9 262.152 cv
397.595 262.592 439.257 262.152 439.257 262.152 cv
439.693 242.063 li
421.556 240.684 li
cp
.545098 .537255 .898039 rgb
f
447.971 245.248 mo
447.971 245.248 445.845 253.507 444.131 254.376 cv
442.418 255.244 435.046 259.87 431.041 264.07 cv
427.683 267.592 431.041 269.614 431.041 269.614 cv
454.252 269.614 li
474.206 254.956 li
467.077 239.709 li
447.971 245.248 li
cp
.643137 .611765 .94902 rgb
f
417.339 244.912 mo
417.339 244.912 423.148 251.572 421.82 252.114 cv
420.491 252.655 409.271 250.937 409.561 249.736 cv
409.851 248.536 415.994 244.814 417.339 244.912 cv
cp
1 1 1 rgb
f
445.803 250.247 mo
445.803 250.247 453.25 255.007 452.127 255.899 cv
451.004 256.792 439.753 258.296 439.694 257.063 cv
439.635 255.828 444.485 250.531 445.803 250.247 cv
cp
f
465.713 151.299 mo
466.638 157.217 li
466.638 157.217 465.696 159.139 461.826 160.133 cv
458.942 160.873 457.827 160.477 457.827 160.477 cv
457.766 157.405 li
457.71 154.409 li
464.563 151.747 li
465.713 151.299 li
cp
.956863 .517647 .384314 rgb
f
464.568 151.764 mo
464.582 151.95 464.549 152.179 464.482 152.445 cv
463.551 156.053 459.567 157.474 457.903 157.912 cv
457.742 154.529 li
464.568 151.764 li
cp
0 0 0 rgb
f
453.646 139.483 mo
453.646 139.483 451.553 148.497 453.736 152.938 cv
455.919 157.377 460.05 155.847 462.435 154.467 cv
464.82 153.086 465.714 151.3 465.714 151.3 cv
465.714 151.3 468.249 151.666 469.433 149.151 cv
470.615 146.637 469.16 144.272 467.689 143.941 cv
466.219 143.611 464.782 144.896 464.782 144.896 cv
465.602 142.236 li
465.602 142.236 457.972 130.916 453.646 139.483 cv
cp
.956863 .517647 .384314 rgb
f
455.949 149.994 mo
455.858 149.994 455.771 149.945 455.725 149.859 cv
454.835 148.192 455.736 146.146 455.775 146.06 cv
455.832 145.932 455.985 145.876 456.11 145.932 cv
456.239 145.99 456.296 146.14 456.238 146.268 cv
456.23 146.287 455.402 148.175 456.174 149.62 cv
456.239 149.744 456.192 149.898 456.069 149.964 cv
456.031 149.984 455.99 149.994 455.949 149.994 cv
cp
0 0 0 rgb
f
465.839 148.722 mo
465.792 148.722 465.745 148.708 465.702 148.682 cv
465.584 148.606 465.549 148.45 465.624 148.331 cv
467.423 145.498 li
467.499 145.379 467.654 145.345 467.774 145.42 cv
467.893 145.495 467.928 145.652 467.853 145.771 cv
466.054 148.604 li
466.005 148.68 465.923 148.722 465.839 148.722 cv
cp
f
466.499 147.683 mo
466.363 147.683 466.251 147.575 466.245 147.438 cv
466.239 147.298 466.349 147.18 466.489 147.174 cv
468.099 147.109 li
468.236 147.098 468.356 147.213 468.362 147.353 cv
468.368 147.493 468.259 147.612 468.118 147.617 cv
466.509 147.682 li
466.506 147.682 466.502 147.683 466.499 147.683 cv
cp
f
458.099 151.405 mo
458.465 151.557 459.02 151.685 459.466 151.345 cv
459.889 151.02 460.115 150.561 460.235 150.207 cv
458.099 151.405 li
cp
458.803 152.072 mo
458.084 152.072 457.459 151.647 457.422 151.622 cv
457.35 151.572 457.309 151.488 457.313 151.4 cv
457.316 151.313 457.365 151.234 457.442 151.191 cv
460.489 149.481 li
460.571 149.435 460.674 149.438 460.752 149.49 cv
460.831 149.542 460.875 149.633 460.866 149.727 cv
460.861 149.779 460.734 151.012 459.774 151.748 cv
459.461 151.988 459.123 152.072 458.803 152.072 cv
cp
f
434.694 168.609 mo
434.694 168.609 440.89 166.441 446.856 166.094 cv
452.824 165.747 456.007 166.094 456.007 166.094 cv
456.007 170.894 li
434.694 168.609 li
cp
1 1 1 rgb
f
459.995 142.907 mo
459.92 142.907 459.846 142.874 459.795 142.81 cv
459.271 142.14 458.286 142.542 458.245 142.56 cv
458.112 142.614 457.966 142.553 457.912 142.425 cv
457.857 142.296 457.917 142.147 458.046 142.092 cv
458.101 142.068 459.427 141.518 460.195 142.496 cv
460.281 142.606 460.263 142.766 460.152 142.853 cv
460.105 142.889 460.05 142.907 459.995 142.907 cv
cp
0 0 0 rgb
f
453.396 143.186 mo
453.342 143.186 453.287 143.168 453.241 143.133 cv
453.131 143.047 453.109 142.888 453.195 142.777 cv
453.219 142.746 453.776 142.03 454.508 141.981 cv
454.865 141.953 455.198 142.091 455.491 142.381 cv
455.591 142.48 455.592 142.641 455.493 142.741 cv
455.395 142.842 455.234 142.841 455.134 142.743 cv
454.946 142.558 454.755 142.475 454.544 142.488 cv
454.042 142.521 453.602 143.082 453.598 143.087 cv
453.548 143.152 453.473 143.186 453.396 143.186 cv
cp
f
454.445 146.679 mo
454.31 146.679 454.197 146.572 454.191 146.436 cv
454.126 144.956 li
453.479 144.411 li
453.372 144.32 453.358 144.16 453.449 144.052 cv
453.54 143.945 453.7 143.933 453.808 144.022 cv
454.539 144.639 li
454.593 144.685 454.626 144.751 454.629 144.822 cv
454.699 146.413 li
454.705 146.553 454.597 146.672 454.456 146.678 cv
454.453 146.678 454.449 146.679 454.445 146.679 cv
cp
f
459.123 146.16 mo
458.99 146.16 458.878 146.057 458.869 145.922 cv
458.775 144.458 li
457.852 143.843 li
457.734 143.765 457.703 143.607 457.78 143.491 cv
457.857 143.373 458.018 143.343 458.133 143.42 cv
459.162 144.105 li
459.229 144.149 459.271 144.221 459.275 144.3 cv
459.377 145.89 li
459.386 146.03 459.279 146.15 459.14 146.159 cv
459.134 146.16 459.128 146.16 459.123 146.16 cv
cp
f
464.465 144.83 mo
464.465 144.83 460.265 144.269 458.472 141.466 cv
456.679 138.663 456.776 137.326 456.776 137.326 cv
456.776 137.326 454.703 138.53 453.969 140.098 cv
453.234 141.666 453.108 142.5 453.108 142.5 cv
453.108 142.5 452.413 139.13 452.77 138.099 cv
453.127 137.066 455.085 131.285 463.148 131.991 cv
475.377 133.062 470.403 142.988 464.465 144.83 cv
cp
f
422.031 166.093 mo
422.018 191.889 li
434.043 194.35 li
455.779 195.657 li
456.825 168.2 li
436.26 167.69 li
422.031 166.093 li
cp
.917647 .305882 .305882 rgb
f
464.849 184.75 mo
464.849 184.75 461.686 182.686 460.106 182.121 cv
458.61 181.585 456.412 181.304 456.412 181.304 cv
456.007 183.896 li
456.007 183.896 451.314 184.589 447.406 186.131 cv
443.497 187.674 444.028 189.436 444.028 189.436 cv
444.028 189.436 441.512 190.758 442.442 191.869 cv
443.374 192.979 447.378 192.303 447.378 192.303 cv
447.378 192.303 442.278 193.741 444.223 195.026 cv
446.168 196.312 450.696 196.367 450.696 196.367 cv
450.696 196.367 460.343 198.93 463.876 195.811 cv
467.408 192.692 464.849 184.75 464.849 184.75 cv
cp
.956863 .517647 .384314 rgb
f
444.278 189.439 mo
444.159 189.439 444.053 189.355 444.029 189.234 cv
444.002 189.096 444.092 188.963 444.229 188.936 cv
452.025 187.407 li
452.165 187.378 452.296 187.47 452.323 187.608 cv
452.351 187.746 452.261 187.879 452.123 187.906 cv
444.327 189.435 li
444.311 189.438 444.294 189.439 444.278 189.439 cv
cp
0 0 0 rgb
f
446.857 192.631 mo
446.738 192.631 446.632 192.547 446.608 192.426 cv
446.581 192.289 446.67 192.155 446.808 192.127 cv
451.695 191.151 li
451.832 191.124 451.968 191.213 451.994 191.351 cv
452.021 191.488 451.933 191.622 451.795 191.649 cv
446.907 192.625 li
446.891 192.629 446.874 192.631 446.857 192.631 cv
cp
f
436.183 167.581 mo
436.022 194.684 li
433.902 194.428 li
434.062 167.282 li
436.183 167.581 li
cp
.847059 .247059 .247059 rgb
f
463.424 181.529 mo
459.121 197.259 li
459.121 197.259 487.136 217.394 498.838 201.607 cv
510.539 185.82 488.77 162.161 479.616 159.938 cv
470.462 157.714 475.087 183.142 475.087 183.142 cv
463.424 181.529 li
cp
.643137 .611765 .94902 rgb
f
456.007 184.151 mo
455.875 184.151 455.764 184.05 455.754 183.917 cv
455.742 183.777 455.847 183.654 455.986 183.643 cv
458.125 183.472 li
458.266 183.459 458.389 183.565 458.398 183.705 cv
458.41 183.845 458.306 183.967 458.166 183.979 cv
456.027 184.15 li
456.021 184.15 456.014 184.151 456.007 184.151 cv
cp
0 0 0 rgb
f
456.193 216.109 mo
455.95 216.109 455.707 216.179 455.458 216.319 cv
455.075 216.534 454.888 216.798 454.883 217.127 cv
454.863 218.639 458.294 221.155 460.228 222.396 cv
459.756 220.784 458.477 216.979 456.747 216.229 cv
456.562 216.149 456.378 216.109 456.193 216.109 cv
cp
460.715 223.345 mo
460.662 223.345 460.609 223.33 460.563 223.303 cv
459.917 222.916 454.259 219.465 454.29 217.119 cv
454.295 216.74 454.451 216.205 455.167 215.802 cv
455.768 215.463 456.38 215.422 456.982 215.686 cv
459.447 216.752 460.94 222.724 461.003 222.978 cv
461.031 223.093 460.987 223.215 460.891 223.286 cv
460.839 223.325 460.777 223.345 460.715 223.345 cv
cp
.364706 .156863 .4 rgb
f
483.1 184.021 mo
483.064 184.021 483.027 184.015 482.992 184.001 cv
477.561 181.901 466.621 182.246 466.509 182.25 cv
466.349 182.258 466.209 182.127 466.203 181.964 cv
466.197 181.8 466.325 181.664 466.489 181.658 cv
466.942 181.643 477.662 181.305 483.207 183.449 cv
483.359 183.508 483.436 183.679 483.376 183.832 cv
483.331 183.95 483.219 184.021 483.1 184.021 cv
cp
1 1 1 rgb
f
481.3 179.745 mo
479.925 179.745 477.72 180.806 476.174 181.685 cv
479.46 181.195 482.115 180.5 482.266 180.06 cv
482.26 180.059 482.236 180.023 482.157 179.967 cv
481.94 179.812 481.646 179.745 481.3 179.745 cv
cp
474.799 182.469 mo
474.676 182.469 474.563 182.392 474.521 182.274 cv
474.473 182.145 474.521 182 474.637 181.924 cv
475.239 181.531 480.581 178.118 482.501 179.483 cv
482.886 179.757 482.88 180.05 482.842 180.201 cv
482.542 181.387 477.143 182.181 474.835 182.467 cv
474.823 182.468 474.811 182.469 474.799 182.469 cv
cp
f
458.03 160.775 mo
457.915 160.775 457.842 160.773 457.818 160.773 cv
457.655 160.768 457.526 160.632 457.531 160.468 cv
457.535 160.304 457.679 160.172 457.836 160.18 cv
457.901 160.18 463.942 160.315 466.4 157.04 cv
466.5 156.908 466.688 156.882 466.815 156.98 cv
466.946 157.079 466.973 157.264 466.875 157.395 cv
464.472 160.598 459.173 160.775 458.03 160.775 cv
cp
f
427.265 177.474 mo
426.963 176.9 426.495 176.434 425.962 176.064 cv
424.156 174.813 418.48 172.205 416.795 173.803 cv
415.181 175.334 418.29 176.881 418.29 176.881 cv
418.29 176.881 415.536 176.135 415.669 178.186 cv
415.781 179.898 417.536 180.463 417.536 180.463 cv
417.536 180.463 414.597 179.962 415.665 182.415 cv
416.732 184.868 422.81 187.051 425.047 186.982 cv
427.284 186.914 425.699 183.981 425.699 183.981 cv
425.699 183.981 428.102 183.589 428.102 182.258 cv
428.102 180.849 426.212 180.313 426.212 180.313 cv
426.212 180.313 428.354 179.541 427.265 177.474 cv
cp
.956863 .517647 .384314 rgb
f
425.509 180.396 mo
425.474 180.396 425.438 180.389 425.404 180.373 cv
418.186 177.112 li
418.058 177.055 418.001 176.904 418.059 176.776 cv
418.116 176.647 418.266 176.59 418.395 176.649 cv
425.613 179.91 li
425.741 179.968 425.798 180.118 425.74 180.246 cv
425.698 180.34 425.605 180.396 425.509 180.396 cv
cp
0 0 0 rgb
f
424.819 183.901 mo
424.785 183.901 424.751 183.894 424.718 183.879 cv
417.435 180.696 li
417.306 180.64 417.247 180.49 417.304 180.361 cv
417.359 180.232 417.509 180.174 417.638 180.23 cv
424.921 183.414 li
425.05 183.47 425.108 183.62 425.052 183.748 cv
425.011 183.844 424.917 183.901 424.819 183.901 cv
cp
f
587.848 348.322 mo
586.848 360.44 li
605.767 360.44 li
605.767 348.322 li
587.848 348.322 li
cp
.956863 .517647 .384314 rgb
f
556.509 314.126 mo
548.066 322.877 li
562.716 334.85 li
570.385 325.466 li
556.509 314.126 li
cp
f
605.766 376.319 mo
605.545 376.319 605.322 376.256 605.125 376.123 cv
604.601 375.769 604.462 375.056 604.815 374.53 cv
647.232 311.626 li
647.587 311.101 648.298 310.962 648.825 311.316 cv
649.35 311.671 649.488 312.384 649.135 312.909 cv
606.718 375.813 li
606.496 376.142 606.134 376.319 605.766 376.319 cv
cp
.505882 .32549 .54902 rgb
f
648.185 376.319 mo
647.812 376.319 647.445 376.137 647.225 375.802 cv
610.187 319.384 li
609.839 318.854 609.986 318.143 610.516 317.795 cv
611.046 317.448 611.756 317.595 612.104 318.124 cv
649.143 374.542 li
649.49 375.072 649.343 375.783 648.813 376.131 cv
648.619 376.258 648.4 376.319 648.185 376.319 cv
cp
f
618.845 331.628 mo
618.224 331.628 617.713 331.131 617.699 330.506 cv
617.686 329.873 618.188 329.349 618.821 329.335 cv
636.128 328.963 li
636.774 328.963 637.285 329.46 637.299 330.085 cv
637.313 330.718 636.811 331.242 636.177 331.256 cv
618.87 331.628 li
618.862 331.628 618.854 331.628 618.845 331.628 cv
cp
f
644.292 262.663 mo
644.292 262.663 663.848 269.64 660.177 295.205 cv
656.806 318.687 632.895 326.176 612.668 320.65 cv
592.44 315.125 595.812 299.188 595.812 299.188 cv
644.292 262.663 li
cp
.364706 .156863 .4 rgb
f
651.204 308.133 mo
651.124 308.133 651.045 308.101 650.986 308.037 cv
650.875 307.917 650.883 307.729 651.003 307.618 cv
656.003 302.993 656.97 293.901 656.979 293.811 cv
656.995 293.647 657.141 293.529 657.304 293.545 cv
657.467 293.562 657.586 293.706 657.569 293.869 cv
657.531 294.251 656.572 303.274 651.405 308.054 cv
651.349 308.106 651.276 308.133 651.204 308.133 cv
cp
.262745 .0980392 .286275 rgb
f
583.761 319.145 mo
583.761 351.589 li
609.982 351.589 li
614.871 306.815 li
593.982 304.478 li
583.761 319.145 li
cp
.643137 .611765 .94902 rgb
f
552.205 312.922 mo
552.205 312.922 573.538 287.589 586.427 283.589 cv
599.315 279.589 639.315 280.922 639.315 280.922 cv
639.315 280.922 643.315 299.589 632.649 304.478 cv
621.982 309.366 601.395 308.478 597.911 310.256 cv
594.427 312.033 573.094 332.922 573.094 332.922 cv
552.205 312.922 li
cp
f
559.861 376.492 mo
559.444 376.437 559.163 376.025 559.237 375.591 cv
559.585 373.531 560.822 367.778 564.079 365.337 cv
568.081 362.336 576.467 361.136 579.517 359.135 cv
582.565 357.134 585.978 352.305 587.797 353.219 cv
589.617 354.133 593.048 358.335 598.003 357.734 cv
602.958 357.134 605.244 355.934 606.578 357.134 cv
607.913 358.335 608.675 375.14 608.104 376.14 cv
607.531 377.14 600.552 376.216 599.944 376.378 cv
599.337 376.54 597.621 372.538 596.478 373.139 cv
595.334 373.739 593.939 375.616 592.255 376.478 cv
590.683 377.282 564.857 377.162 559.861 376.492 cv
cp
.364706 .156863 .4 rgb
f
517.272 322.05 mo
516.955 321.773 516.947 321.276 517.247 320.954 cv
518.67 319.426 522.867 315.301 526.93 315.052 cv
531.923 314.745 539.587 318.354 543.234 318.359 cv
546.881 318.364 552.387 316.206 553.403 317.971 cv
554.421 319.735 554.977 325.131 559.445 327.354 cv
563.914 329.577 566.484 329.832 566.938 331.568 cv
567.393 333.304 558.79 347.76 557.762 348.281 cv
556.734 348.802 551.413 344.192 550.816 343.994 cv
550.22 343.795 550.986 339.51 549.702 339.382 cv
548.417 339.255 546.22 340.056 544.338 339.85 cv
542.583 339.657 521.078 325.356 517.272 322.05 cv
cp
f
590.232 257.826 mo
590.261 249.057 li
580.572 247.882 li
580.572 247.882 571.842 274.733 583.761 280.328 cv
593.181 284.75 601.71 274.515 601.71 274.515 cv
590.232 257.826 li
cp
.956863 .517647 .384314 rgb
f
646.862 267.194 mo
646.862 267.194 644.488 245.209 634.332 242.752 cv
624.177 240.296 608.295 245.107 601.171 249.676 cv
595.359 253.402 590.232 257.826 590.232 257.826 cv
602.054 276.144 li
604.251 274.723 li
604.251 283.303 li
637.099 283.303 li
637.629 269.46 li
646.862 267.194 li
cp
.635294 .27451 .686275 rgb
f
570.75 285.653 mo
648.473 285.653 li
649.798 285.653 650.873 284.579 650.873 283.253 cv
650.873 281.928 649.798 280.854 648.473 280.854 cv
570.75 280.854 li
569.425 280.854 568.35 281.928 568.35 283.253 cv
568.35 284.579 569.425 285.653 570.75 285.653 cv
cp
.545098 .333333 .556863 rgb
f
644.885 267.68 mo
644.885 267.68 645.992 275.391 642.479 281.748 cv
638.967 288.104 612.816 283.755 612.816 283.755 cv
610.991 276.144 li
626.181 271.44 li
626.444 268.758 li
626.444 268.758 636.659 268.045 644.885 267.68 cv
cp
.956863 .517647 .384314 rgb
f
610.991 276.144 mo
610.991 276.144 606.619 276.83 603.978 277.614 cv
601.337 278.399 597.238 279.307 595.507 278.853 cv
593.776 278.399 593.595 279.125 594.05 280.136 cv
594.505 281.146 596.509 281.683 596.509 281.683 cv
596.509 281.683 594.414 290.07 595.234 290.757 cv
596.054 291.443 598.422 288.796 598.422 288.796 cv
598.422 288.796 598.877 289.384 599.515 289.482 cv
600.152 289.58 601.063 289.188 601.063 289.188 cv
601.063 289.188 601.306 289.973 602.414 290.169 cv
603.522 290.365 604.251 289.776 604.251 289.776 cv
604.251 289.776 604.889 291.181 605.617 290.871 cv
606.346 290.561 609.625 289.58 609.442 288.6 cv
609.261 287.619 606.528 287.814 606.528 287.814 cv
606.164 286.147 li
606.164 286.147 608.987 288.306 611.629 286.834 cv
614.271 285.363 613.99 281.683 613.99 281.683 cv
610.991 276.144 li
cp
f
598.422 289.093 mo
598.337 289.093 598.253 289.056 598.194 288.985 cv
596.019 286.371 598.617 281.669 598.729 281.47 cv
598.81 281.327 598.992 281.279 599.133 281.356 cv
599.275 281.437 599.326 281.617 599.246 281.761 cv
599.221 281.806 596.734 286.306 598.649 288.606 cv
598.755 288.732 598.737 288.919 598.611 289.023 cv
598.557 289.07 598.489 289.093 598.422 289.093 cv
cp
0 0 0 rgb
f
601.063 289.484 mo
600.977 289.484 600.891 289.445 600.832 289.372 cv
599.471 287.665 600.426 285.2 600.468 285.096 cv
600.528 284.944 600.699 284.867 600.853 284.93 cv
601.004 284.99 601.079 285.162 601.019 285.314 cv
601.01 285.337 600.15 287.566 601.295 289.003 cv
601.397 289.131 601.376 289.317 601.248 289.419 cv
601.193 289.463 601.129 289.484 601.063 289.484 cv
cp
f
604.251 290.073 mo
604.186 290.073 604.12 290.052 604.065 290.008 cv
602.593 288.827 602.781 286.424 602.789 286.322 cv
602.804 286.16 602.927 286.033 603.11 286.053 cv
603.273 286.066 603.394 286.21 603.381 286.373 cv
603.379 286.395 603.212 288.564 604.437 289.545 cv
604.564 289.647 604.585 289.834 604.482 289.962 cv
604.424 290.035 604.338 290.073 604.251 290.073 cv
cp
f
580.952 230.818 mo
595.012 224.066 li
596.753 232.514 li
580.952 230.818 li
cp
1 1 1 rgb
f
599.322 228.752 mo
602.165 247.614 li
583.943 250.534 li
580.952 230.818 li
599.322 228.752 li
cp
.988235 .737255 .286275 rgb
f
580.244 237.738 mo
580.448 237.087 581.025 236.626 581.707 236.572 cv
584.116 236.384 589.677 236.063 589.84 237.114 cv
590.049 238.456 584.551 239.714 584.551 239.714 cv
584.551 239.714 586.268 240.583 586.202 241.527 cv
586.118 242.729 584.41 242.949 584.41 242.949 cv
584.41 242.949 586.061 243.05 585.887 244.292 cv
585.713 245.535 585.031 246.355 585.031 246.355 cv
585.031 246.355 586.799 247.748 586.256 248.705 cv
585.713 249.662 583.278 250.266 581.081 248.442 cv
578.088 245.958 579.493 240.145 580.244 237.738 cv
cp
.956863 .517647 .384314 rgb
f
632.292 226.621 mo
632.292 226.621 634.719 229.563 633.438 231.798 cv
632.157 234.033 629.601 234.609 629.601 234.609 cv
629.601 234.609 630.222 236.668 627.823 238.037 cv
625.424 239.406 624.368 236.091 624.368 236.091 cv
624.55 227.534 li
629.556 223.431 li
632.292 226.621 li
cp
.262745 .0980392 .286275 rgb
f
625.237 237.637 mo
625.901 243.955 li
625.901 243.955 624.953 245.891 621.289 246.579 cv
618.559 247.092 617.526 246.571 617.526 246.571 cv
617.574 243.331 li
617.625 240.172 li
624.145 238.002 li
625.237 237.637 li
cp
.956863 .517647 .384314 rgb
f
624.145 238.002 mo
624.146 238.177 624.103 238.387 624.024 238.631 cv
622.942 241.936 619.149 243.022 617.574 243.331 cv
617.625 240.172 li
624.145 238.002 li
cp
0 0 0 rgb
f
614.703 225.919 mo
614.703 225.919 612.22 234.188 613.989 238.452 cv
615.759 242.716 619.695 241.536 621.998 240.393 cv
624.301 239.248 625.239 237.639 625.239 237.639 cv
625.239 237.639 627.578 238.129 628.828 235.857 cv
630.079 233.587 628.864 231.299 627.515 230.904 cv
626.165 230.509 624.751 231.62 624.751 231.62 cv
625.672 229.192 li
625.672 229.192 619.239 218.199 614.703 225.919 cv
cp
.956863 .517647 .384314 rgb
f
616.239 235.902 mo
616.127 235.902 616.02 235.838 615.97 235.729 cv
615.228 234.097 616.202 232.221 616.244 232.142 cv
616.32 231.997 616.498 231.942 616.645 232.019 cv
616.789 232.095 616.845 232.273 616.769 232.419 cv
616.759 232.436 615.889 234.119 616.509 235.482 cv
616.577 235.632 616.511 235.808 616.362 235.875 cv
616.322 235.894 616.28 235.902 616.239 235.902 cv
cp
0 0 0 rgb
f
625.522 235.305 mo
625.462 235.305 625.4 235.286 625.348 235.247 cv
625.216 235.151 625.187 234.966 625.283 234.833 cv
627.127 232.302 li
627.223 232.171 627.409 232.141 627.541 232.237 cv
627.673 232.333 627.702 232.519 627.605 232.651 cv
625.762 235.183 li
625.704 235.262 625.614 235.305 625.522 235.305 cv
cp
f
627.702 234.412 mo
627.695 234.412 626.192 234.376 626.192 234.376 cv
626.028 234.371 625.898 234.235 625.902 234.072 cv
625.906 233.911 626.039 233.782 626.199 233.782 cv
626.206 233.782 627.709 233.818 627.709 233.818 cv
627.873 233.823 628.003 233.959 627.999 234.122 cv
627.995 234.283 627.862 234.412 627.702 234.412 cv
cp
f
618.281 237.283 mo
618.596 237.416 619.021 237.501 619.385 237.26 cv
619.727 237.03 619.946 236.704 620.083 236.418 cv
618.281 237.283 li
cp
618.864 238.01 mo
618.128 238.01 617.497 237.521 617.462 237.492 cv
617.382 237.429 617.34 237.328 617.351 237.227 cv
617.362 237.125 617.425 237.037 617.518 236.992 cv
620.456 235.581 li
620.554 235.534 620.673 235.547 620.761 235.61 cv
620.85 235.677 620.895 235.786 620.877 235.895 cv
620.869 235.944 620.675 237.109 619.715 237.752 cv
619.434 237.94 619.142 238.01 618.864 238.01 cv
cp
f
619.422 232.521 mo
619.258 232.521 619.125 232.389 619.125 232.225 cv
619.125 230.738 li
619.125 230.574 619.258 230.441 619.422 230.441 cv
619.586 230.441 619.719 230.574 619.719 230.738 cv
619.719 232.225 li
619.719 232.389 619.586 232.521 619.422 232.521 cv
cp
f
615.036 232.727 mo
614.867 232.723 614.736 232.588 614.739 232.424 cv
614.768 230.938 li
614.772 230.775 614.896 230.655 615.07 230.647 cv
615.233 230.651 615.364 230.786 615.361 230.95 cv
615.333 232.436 li
615.329 232.597 615.197 232.727 615.036 232.727 cv
cp
f
620.427 229.545 mo
620.333 229.545 620.24 229.5 620.183 229.416 cv
619.759 228.8 618.861 229.1 618.822 229.113 cv
618.668 229.166 618.5 229.085 618.445 228.931 cv
618.392 228.776 618.472 228.608 618.626 228.554 cv
618.682 228.534 619.989 228.085 620.671 229.08 cv
620.764 229.215 620.729 229.399 620.595 229.492 cv
620.543 229.527 620.484 229.545 620.427 229.545 cv
cp
f
614.267 229.411 mo
614.197 229.411 614.127 229.387 614.071 229.337 cv
613.948 229.229 613.936 229.043 614.044 228.92 cv
614.068 228.892 614.648 228.239 615.358 228.236 cv
615.71 228.236 616.031 228.393 616.294 228.688 cv
616.402 228.811 616.392 228.997 616.27 229.106 cv
616.146 229.214 615.959 229.203 615.851 229.082 cv
615.7 228.912 615.54 228.83 615.362 228.83 cv
614.996 228.83 614.607 229.178 614.489 229.312 cv
614.431 229.378 614.349 229.411 614.267 229.411 cv
cp
f
624.751 231.62 mo
624.751 231.62 622.856 231.098 622.23 229.357 cv
621.604 227.617 622.528 226.145 622.528 226.145 cv
622.528 226.145 619.371 227.396 617.628 226.072 cv
615.885 224.749 616.217 224.057 616.217 224.057 cv
614.419 226.972 li
614.419 226.972 613.895 223.616 615.012 221.847 cv
616.129 220.077 618.034 221.178 618.034 221.178 cv
618.034 221.178 617.74 218.579 620.945 218.25 cv
624.15 217.921 624.76 220.703 624.76 220.703 cv
624.76 220.703 627.776 219.401 630.3 221.633 cv
632.823 223.865 632.292 226.621 632.292 226.621 cv
624.751 231.62 li
cp
.262745 .0980392 .286275 rgb
f
584.551 240.011 mo
584.545 240.011 580.946 239.939 580.946 239.939 cv
580.782 239.936 580.652 239.801 580.655 239.637 cv
580.659 239.475 580.791 239.346 580.952 239.346 cv
580.958 239.346 584.557 239.417 584.557 239.417 cv
584.721 239.421 584.851 239.556 584.848 239.72 cv
584.844 239.882 584.712 240.011 584.551 240.011 cv
cp
0 0 0 rgb
f
590.227 258.727 mo
589.684 260.362 588.978 263.117 589.622 264.123 cv
589.766 264.348 589.966 264.46 590.251 264.479 cv
590.514 264.496 590.702 264.421 590.835 264.242 cv
591.505 263.345 590.777 260.443 590.227 258.727 cv
cp
590.318 265.073 mo
590.284 265.073 590.249 265.072 590.214 265.07 cv
589.744 265.04 589.366 264.823 589.123 264.442 cv
588.056 262.776 589.758 258.232 589.956 257.72 cv
590 257.605 590.11 257.529 590.232 257.529 cv
590.358 257.53 590.468 257.608 590.511 257.724 cv
590.711 258.269 592.435 263.09 591.311 264.597 cv
591.077 264.91 590.735 265.073 590.318 265.073 cv
cp
.937255 .427451 .227451 rgb
f
630.54 270.514 mo
629.801 270.514 628.813 270.771 627.941 271.066 cv
629.419 270.975 630.766 270.82 631.259 270.639 cv
631.069 270.551 630.822 270.514 630.54 270.514 cv
cp
626.181 271.737 mo
626.043 271.737 625.923 271.642 625.892 271.508 cv
625.86 271.37 625.929 271.229 626.057 271.171 cv
626.482 270.977 630.247 269.296 631.671 270.188 cv
632.011 270.4 632.006 270.638 631.972 270.761 cv
631.915 270.968 631.742 271.599 626.188 271.737 cv
626.186 271.737 626.183 271.737 626.181 271.737 cv
cp
f
584.549 322.221 mo
584.477 322.221 584.405 322.194 584.348 322.142 cv
584.228 322.031 584.22 321.843 584.331 321.723 cv
584.745 321.273 594.514 310.713 597.847 309.967 cv
601.108 309.235 614.128 308.087 614.68 308.039 cv
614.838 308.021 614.987 308.145 615.001 308.308 cv
615.016 308.471 614.896 308.615 614.732 308.629 cv
614.597 308.642 601.199 309.822 597.976 310.545 cv
594.823 311.251 584.867 322.017 584.767 322.125 cv
584.708 322.188 584.629 322.221 584.549 322.221 cv
cp
.988235 .737255 .286275 rgb
f
596.422 304.325 mo
596.393 304.325 596.352 304.337 596.291 304.377 cv
595.528 304.879 596.453 307.185 597.554 309.104 cv
597.405 307.014 597.033 304.629 596.477 304.341 cv
596.464 304.334 596.447 304.325 596.422 304.325 cv
cp
597.911 310.553 mo
597.813 310.553 597.719 310.504 597.663 310.418 cv
597.079 309.524 594.252 305.009 595.965 303.881 cv
596.225 303.712 596.503 303.686 596.749 303.814 cv
597.96 304.441 598.177 309.282 598.207 310.246 cv
598.212 310.379 598.127 310.499 598 310.539 cv
597.971 310.548 597.94 310.553 597.911 310.553 cv
cp
f
579.251 327.261 mo
579.175 327.261 579.099 327.231 579.041 327.173 cv
563.638 311.718 li
563.522 311.603 563.522 311.414 563.639 311.299 cv
563.754 311.184 563.942 311.183 564.058 311.3 cv
579.461 326.755 li
579.576 326.87 579.576 327.059 579.46 327.174 cv
579.402 327.231 579.327 327.261 579.251 327.261 cv
cp
f
609.991 345.496 mo
591.395 345.496 li
591.23 345.496 591.098 345.363 591.098 345.199 cv
591.098 345.035 591.23 344.902 591.395 344.902 cv
609.991 344.902 li
610.155 344.902 610.288 345.035 610.288 345.199 cv
610.288 345.363 610.155 345.496 609.991 345.496 cv
cp
f
639.942 376.319 mo
639.569 376.319 639.203 376.137 638.982 375.802 cv
579.493 285.183 li
579.146 284.652 579.293 283.941 579.822 283.594 cv
580.352 283.246 581.062 283.394 581.411 283.923 cv
640.9 374.542 li
641.248 375.072 641.101 375.783 640.571 376.131 cv
640.377 376.258 640.158 376.319 639.942 376.319 cv
cp
.545098 .333333 .556863 rgb
f
246.557 262.438 mo
246.557 262.438 250.175 262.703 249.023 267.819 cv
247.871 272.936 244.574 266.574 244.574 266.574 cv
246.557 262.438 li
cp
.94902 .458824 .341176 rgb
f
282.266 361.027 mo
281.563 361.43 240.779 359.316 239.863 358.475 cv
239.536 358.174 239.554 356.235 239.816 353.474 cv
240.29 348.449 243.13 339.867 244.702 334.574 cv
244.702 334.574 258.975 335.533 260.248 336.345 cv
261.53 337.163 275.277 348.768 275.277 348.768 cv
275.277 348.768 280.523 350.765 282.404 353.867 cv
282.954 354.777 283.234 355.747 283.33 356.651 cv
283.566 358.841 282.757 360.755 282.266 361.027 cv
cp
.364706 .156863 .4 rgb
f
232.36 246.58 mo
230.488 258.572 li
247.683 255.914 li
232.36 246.58 li
cp
.917647 .635294 .176471 rgb
f
282.266 361.027 mo
281.563 361.43 240.779 359.316 239.863 358.475 cv
239.536 358.174 239.554 356.235 239.816 353.474 cv
283.33 356.651 li
283.566 358.841 282.757 360.755 282.266 361.027 cv
cp
1 1 1 rgb
f
270.567 345.178 mo
270.543 345.177 258.631 344.223 258.631 344.223 cv
258.504 344.212 258.398 344.123 258.367 344 cv
258.335 343.877 258.386 343.748 258.492 343.679 cv
264.342 339.856 li
264.48 339.766 264.664 339.807 264.752 339.942 cv
264.842 340.079 264.803 340.263 264.666 340.353 cv
259.542 343.7 li
270.59 344.585 li
270.753 344.599 270.875 344.741 270.862 344.904 cv
270.85 345.06 270.72 345.178 270.567 345.178 cv
cp
f
232.36 296.854 mo
232.36 296.854 255.001 280.843 274.543 285.759 cv
294.085 290.675 265.547 338.196 265.547 338.196 cv
237.141 338.26 li
239.909 324.645 li
205.808 324.579 li
220.855 303.272 li
232.36 296.854 li
cp
.45098 .258824 .466667 rgb
f
258.553 299.701 mo
258.499 299.701 258.444 299.687 258.395 299.655 cv
258.257 299.567 258.215 299.384 258.303 299.246 cv
258.328 299.206 260.878 295.202 264.301 292.281 cv
264.426 292.176 264.613 292.188 264.719 292.314 cv
264.826 292.438 264.811 292.626 264.686 292.732 cv
261.331 295.596 258.829 299.523 258.805 299.563 cv
258.748 299.652 258.652 299.701 258.553 299.701 cv
cp
.262745 .0980392 .286275 rgb
f
229.126 274.257 mo
248.566 280.122 li
248.566 280.122 248.762 293.265 236.417 296.854 cv
224.072 300.443 222.639 285.477 222.639 285.477 cv
229.126 274.257 li
cp
.643137 .611765 .94902 rgb
f
239.627 276.738 mo
239.627 276.738 239.023 284.121 244.906 283.42 cv
250.789 282.718 250.427 274.271 250.427 274.271 cv
239.627 276.738 li
cp
.94902 .458824 .341176 rgb
f
193.723 314.327 mo
193.723 314.327 182.392 273.423 191.933 262.166 cv
201.473 250.909 223.621 260.288 223.621 260.288 cv
234.219 297.827 li
193.723 314.327 li
cp
.643137 .611765 .94902 rgb
f
209.994 286.534 mo
209.994 286.534 215.721 277.463 218.501 276.43 cv
221.281 275.396 228.001 276.757 228.003 277.563 cv
228.005 278.367 221.78 279.346 221.78 279.346 cv
221.78 279.346 225.279 285.46 225.335 286.834 cv
225.391 288.208 222.235 292.21 221.542 292.609 cv
220.849 293.01 219.109 290.778 219.109 290.778 cv
219.109 290.778 217.187 293.104 214.478 293.82 cv
211.77 294.536 208.661 290.428 208.661 290.428 cv
209.994 286.534 li
cp
.94902 .458824 .341176 rgb
f
219.109 291.075 mo
219 291.075 218.898 291.015 218.846 290.915 cv
218.787 290.801 218.808 290.662 218.898 290.57 cv
220.692 288.749 li
220.807 288.633 220.995 288.63 221.112 288.746 cv
221.229 288.86 221.23 289.049 221.115 289.165 cv
219.963 290.334 li
221.345 290.102 li
221.507 290.073 221.66 290.183 221.687 290.345 cv
221.714 290.506 221.605 290.659 221.444 290.686 cv
219.159 291.07 li
219.142 291.073 219.125 291.075 219.109 291.075 cv
cp
0 0 0 rgb
f
218.045 280.271 mo
217.903 280.271 217.778 280.169 217.753 280.023 cv
217.727 279.862 217.835 279.709 217.997 279.683 cv
221.731 279.054 li
221.889 279.025 222.046 279.135 222.073 279.297 cv
222.1 279.458 221.991 279.611 221.83 279.638 cv
218.095 280.267 li
218.079 280.27 218.062 280.271 218.045 280.271 cv
cp
f
247.683 255.914 mo
228.72 247.868 li
226.94 259.12 li
247.683 255.914 li
cp
1 1 1 rgb
f
223.479 252.778 mo
220.726 279.374 li
244.945 282.109 li
247.683 255.914 li
223.479 252.778 li
cp
.988235 .737255 .286275 rgb
f
200.173 250.654 mo
200.352 257.952 li
200.352 257.952 201.719 260.018 205.996 260.26 cv
209.183 260.44 210.282 259.694 210.282 259.694 cv
209.749 256.01 li
209.223 252.416 li
201.473 250.909 li
200.173 250.654 li
cp
.94902 .458824 .341176 rgb
f
201.595 251.53 mo
201.619 251.721 201.7 251.944 201.824 252.201 cv
203.537 255.661 207.976 256.319 209.798 256.438 cv
209.27 252.993 li
201.595 251.53 li
cp
0 0 0 rgb
f
210.192 236.995 mo
210.192 236.995 214.078 245.674 212.75 250.581 cv
211.422 255.489 206.955 254.758 204.278 253.836 cv
201.601 252.913 200.348 251.288 200.348 251.288 cv
200.348 251.288 197.863 252.155 196.175 249.853 cv
194.487 247.55 195.49 244.879 196.907 244.256 cv
198.325 243.633 200.027 244.646 200.027 244.646 cv
198.678 242.125 li
198.678 242.125 204.144 229.207 210.192 236.995 cv
cp
.94902 .458824 .341176 rgb
f
209.889 248.089 mo
209.86 248.089 209.831 248.084 209.802 248.075 cv
209.646 248.027 209.558 247.861 209.605 247.705 cv
210.094 246.113 208.896 244.386 208.884 244.368 cv
208.79 244.234 208.822 244.05 208.956 243.955 cv
209.089 243.862 209.273 243.892 209.369 244.026 cv
209.425 244.105 210.747 246.005 210.173 247.879 cv
210.133 248.007 210.016 248.089 209.889 248.089 cv
cp
0 0 0 rgb
f
199.665 248.753 mo
199.586 248.753 199.508 248.722 199.45 248.66 cv
197.077 246.157 li
196.965 246.038 196.97 245.851 197.088 245.738 cv
197.208 245.625 197.394 245.63 197.508 245.749 cv
199.88 248.252 li
199.993 248.371 199.988 248.559 199.869 248.671 cv
199.812 248.726 199.738 248.753 199.665 248.753 cv
cp
f
197.158 248.086 mo
197.014 248.086 196.888 247.98 196.865 247.834 cv
196.84 247.672 196.951 247.521 197.113 247.496 cv
198.75 247.244 li
198.907 247.224 199.063 247.33 199.088 247.492 cv
199.113 247.654 199.002 247.806 198.84 247.83 cv
197.203 248.082 li
197.188 248.084 197.173 248.086 197.158 248.086 cv
cp
f
200.027 244.646 mo
200.027 244.646 200.928 245.234 201.579 244.21 cv
202.23 243.186 200.793 240.167 200.793 240.167 cv
200.793 240.167 203.492 240.773 205.158 239.877 cv
206.824 238.981 207.636 236.524 207.636 236.524 cv
207.636 236.524 208.87 239.079 212.55 237.945 cv
216.23 236.812 216.92 231.798 212.987 230.784 cv
209.053 229.77 206.909 231.514 206.909 231.514 cv
206.909 231.514 206.402 227.877 201.546 229.685 cv
197.121 231.331 196.385 236.881 196.385 236.881 cv
196.385 236.881 193.726 237.011 193.221 239.904 cv
192.715 242.798 196.104 244.884 196.104 244.884 cv
196.104 244.884 198.023 243.752 200.027 244.646 cv
cp
f
205.933 244.848 mo
205.787 244.848 205.659 244.738 205.64 244.589 cv
205.429 242.966 li
205.408 242.804 205.522 242.655 205.685 242.634 cv
205.845 242.606 205.995 242.728 206.017 242.89 cv
206.228 244.513 li
206.249 244.675 206.134 244.823 205.972 244.845 cv
205.959 244.847 205.946 244.848 205.933 244.848 cv
cp
f
210.752 244.449 mo
210.608 244.449 210.481 244.344 210.459 244.196 cv
210.217 242.578 li
210.193 242.416 210.304 242.266 210.466 242.241 cv
210.629 242.206 210.779 242.327 210.804 242.49 cv
211.046 244.108 li
211.07 244.271 210.958 244.421 210.796 244.445 cv
210.781 244.448 210.767 244.449 210.752 244.449 cv
cp
f
204.413 241.738 mo
204.368 241.738 204.322 241.728 204.278 241.705 cv
204.133 241.631 204.075 241.452 204.15 241.307 cv
204.743 240.144 206.212 240.443 206.276 240.457 cv
206.436 240.491 206.537 240.648 206.503 240.808 cv
206.47 240.968 206.308 241.065 206.153 241.037 cv
206.109 241.03 205.064 240.821 204.677 241.576 cv
204.625 241.679 204.521 241.738 204.413 241.738 cv
cp
f
209.117 240.725 mo
209.06 240.725 209.002 240.708 208.951 240.673 cv
208.815 240.58 208.78 240.396 208.873 240.261 cv
209.117 239.902 209.432 239.696 209.81 239.648 cv
210.575 239.548 211.289 240.175 211.319 240.201 cv
211.442 240.31 211.454 240.496 211.346 240.619 cv
211.238 240.742 211.051 240.756 210.928 240.646 cv
210.777 240.515 210.293 240.188 209.882 240.237 cv
209.679 240.264 209.509 240.38 209.363 240.595 cv
209.305 240.679 209.212 240.725 209.117 240.725 cv
cp
f
248.673 272.056 mo
248.673 272.056 253.837 271.463 252.249 269.088 cv
250.661 266.712 241.318 265.576 240.321 268.364 cv
239.325 271.153 248.673 272.056 248.673 272.056 cv
cp
.94902 .458824 .341176 rgb
f
248.114 276.32 mo
248.114 276.32 253.278 275.728 251.69 273.353 cv
250.101 270.977 240.758 269.84 239.762 272.629 cv
238.766 275.418 248.114 276.32 248.114 276.32 cv
cp
f
245.127 279.889 mo
246.236 280.256 247.425 280.372 248.566 280.122 cv
249.586 279.899 250.478 279.387 249.964 278.231 cv
248.938 275.92 240.962 273.521 239.672 275.803 cv
238.711 277.504 242.922 279.157 245.127 279.889 cv
cp
f
249.282 271.487 mo
249.259 271.486 243.261 271.038 243.261 271.038 cv
243.098 271.025 242.975 270.884 242.987 270.72 cv
243 270.557 243.154 270.451 243.305 270.446 cv
249.303 270.895 li
249.467 270.907 249.589 271.049 249.577 271.213 cv
249.565 271.368 249.435 271.487 249.282 271.487 cv
cp
0 0 0 rgb
f
248.311 276.209 mo
248.289 276.208 242.291 275.76 242.291 275.76 cv
242.127 275.747 242.004 275.605 242.017 275.441 cv
242.029 275.278 242.188 275.174 242.334 275.168 cv
248.333 275.616 li
248.496 275.629 248.619 275.771 248.606 275.935 cv
248.595 276.09 248.464 276.209 248.311 276.209 cv
cp
f
202.675 315.147 mo
202.536 315.147 202.409 315.055 202.372 314.914 cv
201.363 311.114 li
201.319 310.947 201.418 310.775 201.586 310.73 cv
201.755 310.687 201.926 310.787 201.97 310.954 cv
202.978 314.754 li
203.022 314.921 202.923 315.093 202.755 315.138 cv
202.729 315.145 202.701 315.147 202.675 315.147 cv
cp
.32549 .270588 .47451 rgb
f
232.467 305.609 mo
232.297 305.609 232.158 305.475 232.153 305.304 cv
232.046 301.257 li
232.042 301.084 232.179 300.939 232.352 300.936 cv
232.562 300.949 232.669 301.068 232.674 301.241 cv
232.781 305.288 li
232.785 305.461 232.648 305.605 232.475 305.609 cv
232.472 305.609 232.469 305.609 232.467 305.609 cv
cp
f
229.126 308.126 mo
228.954 308.126 228.813 307.986 228.813 307.813 cv
228.803 303.524 li
228.802 303.351 228.943 303.21 229.116 303.21 cv
229.29 303.21 229.43 303.35 229.431 303.522 cv
229.44 307.812 li
229.441 307.985 229.3 308.126 229.127 308.126 cv
229.126 308.126 li
cp
f
207.817 250.549 mo
206.749 250.549 205.978 249.764 205.689 249.277 cv
205.605 249.137 205.651 248.956 205.792 248.872 cv
205.932 248.789 206.114 248.833 206.198 248.974 cv
206.23 249.026 206.98 250.233 208.251 249.897 cv
208.412 249.859 208.572 249.95 208.614 250.109 cv
208.656 250.268 208.561 250.43 208.403 250.472 cv
208.199 250.525 208.003 250.549 207.817 250.549 cv
cp
0 0 0 rgb
f
319.212 345.436 mo
318.884 346.176 284.772 368.63 283.536 368.494 cv
283.094 368.446 281.96 366.873 280.536 364.493 cv
277.941 360.164 275.147 351.567 273.278 346.371 cv
273.278 346.371 285.346 338.69 286.853 338.59 cv
288.371 338.49 306.32 339.697 306.32 339.697 cv
306.32 339.697 311.729 338.199 315.083 339.585 cv
316.064 339.993 316.864 340.608 317.478 341.279 cv
318.965 342.903 319.446 344.925 319.212 345.436 cv
cp
.364706 .156863 .4 rgb
f
319.212 345.436 mo
318.884 346.176 284.772 368.63 283.536 368.494 cv
283.094 368.446 281.96 366.873 280.536 364.493 cv
317.478 341.279 li
318.965 342.903 319.446 344.925 319.212 345.436 cv
cp
1 1 1 rgb
f
291.185 346.006 mo
291.118 346.006 291.051 345.982 290.997 345.938 cv
290.898 345.857 290.862 345.724 290.907 345.605 cv
293.356 339.061 li
293.414 338.906 293.584 338.831 293.738 338.887 cv
293.891 338.943 293.969 339.114 293.912 339.268 cv
291.766 345 li
301.192 339.17 li
301.331 339.083 301.515 339.126 301.6 339.266 cv
301.686 339.405 301.643 339.588 301.503 339.674 cv
291.34 345.961 li
291.292 345.991 291.238 346.006 291.185 346.006 cv
cp
f
193.723 314.327 mo
193.723 314.327 242.542 289.499 253.305 293.038 cv
267.434 297.684 293.037 335.999 293.037 335.999 cv
270.595 357.719 li
270.595 357.719 247.354 326.352 243.633 326.767 cv
239.331 327.246 215.121 337.429 206.506 334.66 cv
197.892 331.892 193.723 314.327 193.723 314.327 cv
cp
.545098 .333333 .556863 rgb
f
247.38 319.742 mo
246.879 319.742 246.458 319.918 246.094 320.277 cv
244.813 321.544 244.685 324.642 244.696 326.04 cv
246.472 324.111 248.71 321.182 248.315 320.141 cv
248.283 320.056 248.186 319.798 247.555 319.749 cv
247.496 319.744 247.438 319.742 247.38 319.742 cv
cp
244.421 327.062 mo
244.387 327.062 244.352 327.056 244.318 327.043 cv
244.208 327.003 244.132 326.901 244.125 326.784 cv
244.111 326.577 243.815 321.696 245.677 319.854 cv
246.204 319.335 246.849 319.1 247.601 319.157 cv
248.432 319.222 248.75 319.613 248.87 319.931 cv
249.577 321.794 245.142 326.446 244.634 326.971 cv
244.577 327.03 244.5 327.062 244.421 327.062 cv
cp
.262745 .0980392 .286275 rgb
f
196.825 258.457 mo
196.825 258.457 163.115 273.042 168.97 298.214 cv
174.55 322.199 213.026 301.249 213.026 301.249 cv
211.124 282.423 li
193.169 284.341 li
196.825 258.457 li
cp
.643137 .611765 .94902 rgb
f
187.139 283.764 mo
187.001 283.764 186.878 283.667 186.849 283.526 cv
186.815 283.366 186.919 283.21 187.079 283.177 cv
197.004 281.128 208.234 281.807 208.346 281.813 cv
208.509 281.824 208.633 281.965 208.623 282.128 cv
208.613 282.292 208.477 282.414 208.309 282.405 cv
208.197 282.398 197.043 281.725 187.199 283.757 cv
187.179 283.762 187.159 283.764 187.139 283.764 cv
cp
1 1 1 rgb
f
190.587 279.557 mo
190.48 279.557 190.377 279.563 190.278 279.577 cv
189.899 279.63 189.617 279.786 189.417 280.055 cv
189.217 280.321 189.282 280.449 189.306 280.497 cv
189.691 281.26 192.888 281.629 195.487 281.688 cv
194.333 280.907 192.114 279.557 190.587 279.557 cv
cp
196.223 282.289 mo
194.715 282.289 189.495 282.186 188.777 280.765 cv
188.661 280.535 188.595 280.164 188.942 279.699 cv
189.238 279.303 189.66 279.064 190.196 278.989 cv
192.528 278.667 196.444 281.63 196.609 281.757 cv
196.71 281.833 196.75 281.966 196.71 282.086 cv
196.652 282.261 196.479 282.289 196.223 282.289 cv
cp
f
207.01 260.486 mo
202.9 260.486 200.192 258.206 200.158 258.177 cv
200.034 258.07 200.02 257.883 200.127 257.759 cv
200.234 257.634 200.421 257.621 200.545 257.728 cv
200.584 257.762 204.587 261.111 210.196 259.411 cv
210.356 259.363 210.519 259.452 210.566 259.608 cv
210.613 259.765 210.525 259.931 210.369 259.978 cv
209.173 260.341 208.047 260.486 207.01 260.486 cv
cp
f
195.291 308.109 mo
195.172 308.109 195.06 308.036 195.014 307.919 cv
194.956 307.766 195.032 307.595 195.185 307.536 cv
195.303 307.49 207.067 302.963 212.864 299.156 cv
213 299.064 213.184 299.105 213.274 299.241 cv
213.364 299.379 213.326 299.563 213.189 299.652 cv
207.339 303.493 195.516 308.044 195.397 308.089 cv
195.362 308.103 195.326 308.109 195.291 308.109 cv
cp
f
234.034 296.6 mo
233.884 296.6 233.755 296.485 233.74 296.332 cv
233.213 290.999 230.645 283.604 230.619 283.53 cv
230.564 283.376 230.646 283.207 230.801 283.152 cv
230.954 283.102 231.124 283.181 231.178 283.335 cv
231.205 283.409 233.796 290.869 234.33 296.273 cv
234.346 296.437 234.227 296.582 234.064 296.598 cv
234.054 296.599 234.044 296.6 234.034 296.6 cv
cp
f
337.576 222.8 mo
337.576 222.8 337.713 199.596 346.698 197.366 cv
355.682 195.136 357.138 201.635 357.138 201.635 cv
357.138 201.635 360.142 201.38 360.843 206.445 cv
361.544 211.511 360.015 224.828 360.015 224.828 cv
337.576 222.8 li
cp
0 0 0 rgb
f
335.677 224.42 mo
335.677 224.42 333.626 216.958 349.204 216.369 cv
364.781 215.78 362.143 224.42 362.143 224.42 cv
348.283 228.014 li
335.677 224.42 li
cp
.45098 .258824 .466667 rgb
f
317.324 247.694 mo
317.324 247.694 327.623 224.752 338.328 221.672 cv
349.033 218.593 336.812 250.189 336.812 250.189 cv
317.324 247.694 li
cp
.545098 .333333 .556863 rgb
f
357.975 222.8 mo
357.975 222.8 376.224 226.181 380.685 242.832 cv
385.146 259.483 360.081 267.445 360.081 267.445 cv
357.975 222.8 li
cp
f
368.681 295.14 mo
368.105 302.368 li
383.351 303.551 li
383.351 296.322 li
368.681 295.14 li
cp
.956863 .517647 .384314 rgb
f
360.277 265.42 mo
360.277 265.42 379.748 243.595 398.591 248.38 cv
417.434 253.166 389.798 298.95 389.798 298.95 cv
362.393 298.95 li
363.33 291.761 li
332.193 292.486 li
336.162 257.139 li
360.277 265.42 li
cp
.364706 .156863 .4 rgb
f
338.852 284.966 mo
348.058 284.966 li
344.062 300.453 li
338.2 300.453 li
338.852 284.966 li
cp
.956863 .517647 .384314 rgb
f
321.247 266.226 mo
321.247 266.226 286.844 275.294 284.835 288.437 cv
282.827 301.579 307.436 307.298 318.987 308.118 cv
330.539 308.938 340.357 308.118 340.357 308.118 cv
340.357 261.448 li
321.247 266.226 li
cp
.364706 .156863 .4 rgb
f
328.89 266.226 mo
328.89 266.226 330.264 224.929 338.328 221.672 cv
347.146 218.11 362.038 222.461 364.83 227.98 cv
367.621 233.5 360.277 265.42 360.277 265.42 cv
360.277 265.42 343.894 269.38 328.89 266.226 cv
cp
.545098 .333333 .556863 rgb
f
353.571 215.509 mo
353.421 222.249 li
353.421 222.249 352.163 224.159 348.213 224.392 cv
345.271 224.565 344.253 223.879 344.253 223.879 cv
344.739 220.475 li
345.216 217.154 li
352.37 215.747 li
353.571 215.509 li
cp
.956863 .517647 .384314 rgb
f
352.37 215.747 mo
352.35 215.931 352.274 216.146 352.16 216.393 cv
350.577 219.726 346.438 220.36 344.739 220.475 cv
345.216 217.154 li
352.37 215.747 li
cp
0 0 0 rgb
f
344.055 201.759 mo
344.055 201.759 340.33 210.131 341.62 214.856 cv
342.91 219.582 347.213 218.868 349.79 217.974 cv
352.368 217.079 353.572 215.511 353.572 215.511 cv
353.572 215.511 355.968 216.341 357.59 214.118 cv
359.211 211.896 358.239 209.324 356.872 208.727 cv
355.504 208.13 353.867 209.109 353.867 209.109 cv
355.161 206.678 li
355.161 206.678 349.866 194.242 344.055 201.759 cv
cp
.956863 .517647 .384314 rgb
f
344.637 212.479 mo
344.512 212.496 344.385 212.431 344.33 212.31 cv
343.54 210.59 344.563 208.604 344.606 208.52 cv
344.682 208.375 344.862 208.318 345.005 208.395 cv
345.149 208.471 345.206 208.649 345.13 208.794 cv
345.121 208.812 344.2 210.609 344.867 212.063 cv
344.936 212.211 344.871 212.387 344.722 212.455 cv
344.694 212.468 344.666 212.476 344.637 212.479 cv
cp
0 0 0 rgb
f
354.224 213.075 mo
354.15 213.075 354.078 213.049 354.021 212.994 cv
353.902 212.883 353.896 212.695 354.009 212.576 cv
356.289 210.159 li
356.401 210.041 356.589 210.036 356.707 210.147 cv
356.826 210.26 356.831 210.447 356.719 210.565 cv
354.438 212.982 li
354.381 213.044 354.302 213.075 354.224 213.075 cv
cp
f
356.638 212.428 mo
356.594 212.425 355.016 212.186 355.016 212.186 cv
354.854 212.161 354.743 212.011 354.768 211.85 cv
354.792 211.688 354.939 211.575 355.104 211.601 cv
356.682 211.84 li
356.844 211.864 356.954 212.015 356.931 212.177 cv
356.908 212.322 356.782 212.428 356.638 212.428 cv
cp
f
346.25 214.197 mo
346.569 214.391 347.028 214.563 347.469 214.343 cv
347.884 214.136 348.169 213.795 348.353 213.499 cv
346.25 214.197 li
cp
347.025 215.041 mo
346.156 215.041 345.455 214.336 345.418 214.299 cv
345.346 214.226 345.318 214.121 345.342 214.022 cv
345.366 213.924 345.44 213.844 345.536 213.812 cv
348.818 212.721 li
348.923 212.688 349.038 212.712 349.117 212.789 cv
349.196 212.864 349.227 212.979 349.195 213.084 cv
349.181 213.135 348.822 214.327 347.732 214.872 cv
347.491 214.993 347.253 215.041 347.025 215.041 cv
cp
f
348.175 210.091 mo
347.976 210.067 347.86 209.92 347.882 209.758 cv
348.081 208.193 li
348.103 208.031 348.243 207.918 348.412 207.938 cv
348.574 207.958 348.689 208.106 348.668 208.269 cv
348.468 209.832 li
348.449 209.981 348.322 210.091 348.175 210.091 cv
cp
f
343.531 209.718 mo
343.327 209.691 343.215 209.541 343.238 209.379 cv
343.468 207.818 li
343.492 207.658 343.637 207.545 343.804 207.569 cv
343.965 207.593 344.077 207.743 344.053 207.905 cv
343.824 209.466 li
343.802 209.612 343.676 209.718 343.531 209.718 cv
cp
f
349.633 207.092 mo
349.526 207.092 349.423 207.034 349.37 206.932 cv
349 206.212 348.001 206.411 347.958 206.42 cv
347.8 206.457 347.642 206.353 347.607 206.192 cv
347.573 206.033 347.675 205.877 347.834 205.842 cv
347.895 205.829 349.318 205.536 349.896 206.661 cv
349.971 206.806 349.914 206.984 349.769 207.06 cv
349.725 207.082 349.679 207.092 349.633 207.092 cv
cp
f
345.098 206.125 mo
345.004 206.125 344.911 206.08 344.854 205.997 cv
344.714 205.793 344.553 205.682 344.359 205.657 cv
343.96 205.617 343.505 205.925 343.361 206.051 cv
343.238 206.158 343.051 206.147 342.943 206.024 cv
342.836 205.902 342.847 205.716 342.97 205.607 cv
342.999 205.582 343.692 204.977 344.43 205.07 cv
344.797 205.115 345.104 205.315 345.342 205.662 cv
345.434 205.798 345.399 205.981 345.265 206.073 cv
345.213 206.108 345.155 206.125 345.098 206.125 cv
cp
f
341.881 284.468 mo
341.881 284.468 358.626 283.534 359.58 284.438 cv
360.533 285.343 359.963 302.507 359.963 302.507 cv
359.963 302.507 362.06 321.856 360.615 323.716 cv
359.864 324.682 358.294 325.644 356.957 326.345 cv
355.443 327.14 353.557 326.787 352.484 325.456 cv
351.545 324.29 350.55 322.533 350.047 320.006 cv
348.935 314.41 348.935 314.41 348.935 314.41 cv
341.538 301.618 li
341.881 284.468 li
cp
.643137 .611765 .94902 rgb
f
367.03 302.231 mo
367.03 302.231 366.295 314.999 367.043 315.981 cv
367.79 316.965 390.501 326.897 391.357 327.267 cv
392.216 327.635 399.85 327.846 401.754 327.976 cv
403.657 328.105 403.514 321.575 402.323 319.631 cv
401.132 317.687 396.539 316.002 396.539 316.002 cv
384.032 301.229 li
367.15 300.465 li
367.03 302.231 li
cp
f
363.33 292.057 mo
363.296 292.057 363.262 292.051 363.228 292.038 cv
363.074 291.981 362.997 291.812 363.054 291.658 cv
363.128 291.457 370.652 271.349 379.505 262.577 cv
379.621 262.462 379.809 262.463 379.923 262.578 cv
380.038 262.695 380.037 262.882 379.922 262.997 cv
371.161 271.677 363.682 291.663 363.607 291.864 cv
363.563 291.983 363.45 292.057 363.33 292.057 cv
cp
f
338.853 285.262 mo
338.829 285.262 338.805 285.259 338.781 285.252 cv
338.61 285.21 321.472 280.954 303.203 279.856 cv
303.04 279.847 302.916 279.707 302.926 279.543 cv
302.935 279.381 303.086 279.254 303.238 279.267 cv
321.564 280.367 338.753 284.636 338.924 284.679 cv
339.083 284.719 339.179 284.879 339.139 285.037 cv
339.105 285.172 338.985 285.262 338.853 285.262 cv
cp
f
330.444 246.619 mo
330.296 246.619 330.168 246.508 330.149 246.357 cv
329.761 243.068 332.304 233.224 332.412 232.807 cv
332.454 232.648 332.618 232.55 332.773 232.594 cv
332.933 232.635 333.027 232.797 332.986 232.955 cv
332.96 233.057 330.363 243.108 330.739 246.287 cv
330.758 246.45 330.642 246.598 330.479 246.617 cv
330.468 246.618 330.456 246.619 330.444 246.619 cv
cp
.988235 .737255 .286275 rgb
f
307.548 276.799 mo
307.491 276.799 307.437 276.803 307.387 276.812 cv
307.246 276.837 307.193 276.896 307.164 276.944 cv
306.907 277.363 306.988 277.628 307.072 277.791 cv
307.657 278.929 310.965 279.54 313.026 279.779 cv
311.403 278.585 308.718 276.799 307.548 276.799 cv
cp
314.034 280.468 mo
313.352 280.421 307.521 279.959 306.545 278.062 cv
306.387 277.754 306.279 277.256 306.661 276.635 cv
306.792 276.419 307.008 276.278 307.283 276.229 cv
309.037 275.931 313.692 279.526 314.217 279.939 cv
314.318 280.02 314.356 280.157 314.31 280.278 cv
314.266 280.393 314.156 280.468 314.034 280.468 cv
cp
.643137 .611765 .94902 rgb
f
343.646 208.091 mo
343.604 208.091 343.563 208.082 343.523 208.064 cv
342.748 207.714 li
342.599 207.646 342.532 207.471 342.6 207.321 cv
342.668 207.172 342.843 207.107 342.992 207.173 cv
343.768 207.523 li
343.917 207.591 343.983 207.767 343.916 207.916 cv
343.866 208.025 343.758 208.091 343.646 208.091 cv
cp
0 0 0 rgb
f
348.353 208.452 mo
348.301 208.452 348.249 208.438 348.201 208.41 cv
347.449 207.964 li
347.309 207.881 347.262 207.698 347.346 207.558 cv
347.43 207.415 347.61 207.37 347.752 207.454 cv
348.504 207.9 li
348.645 207.983 348.691 208.166 348.607 208.307 cv
348.552 208.4 348.453 208.452 348.353 208.452 cv
cp
f
351.606 244.58 mo
351.606 241.012 li
351.606 241.012 337.458 242.796 332.744 245.728 cv
328.028 248.658 342.105 251.632 342.105 251.632 cv
351.606 244.58 li
cp
1 1 1 rgb
f
317.324 242.286 mo
317.324 246.322 li
334.742 247.694 li
334.742 247.694 331.852 242.371 317.324 242.286 cv
cp
f
316.679 244.02 mo
317.3 268.116 li
333.253 270.067 li
352.807 268.411 li
352.807 243.179 li
332.744 245.728 li
316.679 244.02 li
cp
.917647 .305882 .305882 rgb
f
333.62 270.067 mo
331.777 270.067 li
331.777 245.56 li
333.62 245.56 li
333.62 270.067 li
cp
.847059 .247059 .247059 rgb
f
359.271 252.273 mo
359.271 252.273 353.604 249.239 352.807 248.984 cv
352.807 248.984 352.358 252.227 352.623 252.608 cv
352.889 252.991 341.015 254.821 341.045 255.969 cv
341.076 257.115 342.179 257.37 342.179 257.37 cv
342.179 257.37 339.802 257.88 340.439 259.027 cv
341.076 260.174 342.179 260.221 342.179 260.221 cv
342.179 260.221 339.84 261.356 342.179 262.804 cv
344.517 264.252 355.989 265.144 359.666 261.475 cv
362.369 258.776 359.271 252.273 359.271 252.273 cv
cp
.956863 .517647 .384314 rgb
f
353.867 209.109 mo
353.867 209.109 349.929 208.36 348.274 205.8 cv
346.762 203.457 346.25 200.779 346.25 200.779 cv
346.25 200.779 345.404 201.197 344.132 202.582 cv
342.859 203.967 342.81 205.061 342.81 205.061 cv
342.81 205.061 341.409 199.978 346.506 198.258 cv
351.604 196.538 355.765 200.042 356.934 203.228 cv
358.103 206.414 353.867 209.109 353.867 209.109 cv
cp
0 0 0 rgb
f
355.699 248.754 mo
356.004 264.004 li
356.004 264.004 358.035 265.709 365.734 260.188 cv
375.671 253.061 369.766 246.466 369.766 246.466 cv
366.15 243.886 li
355.699 248.754 li
cp
.545098 .333333 .556863 rgb
f
321.751 253.914 mo
321.471 253.383 321.039 252.952 320.546 252.61 cv
318.878 251.454 313.632 249.043 312.075 250.521 cv
310.583 251.936 313.456 253.365 313.456 253.365 cv
313.456 253.365 310.911 252.676 311.035 254.571 cv
311.138 256.153 312.76 256.676 312.76 256.676 cv
312.76 256.676 310.043 256.212 311.03 258.479 cv
312.017 260.746 317.633 262.764 319.701 262.701 cv
321.769 262.638 320.304 259.927 320.304 259.927 cv
320.304 259.927 322.524 259.564 322.524 258.334 cv
322.524 257.032 320.778 256.537 320.778 256.537 cv
320.778 256.537 322.757 255.823 321.751 253.914 cv
cp
.956863 .517647 .384314 rgb
f
342.179 257.667 mo
342.03 257.667 341.901 257.556 341.884 257.404 cv
341.865 257.241 341.982 257.095 342.145 257.075 cv
348.934 256.291 li
349.109 256.28 349.244 256.39 349.263 256.552 cv
349.281 256.715 349.164 256.861 349.002 256.881 cv
342.213 257.665 li
342.201 257.666 342.189 257.667 342.179 257.667 cv
cp
0 0 0 rgb
f
348.968 260.518 mo
342.179 260.518 li
342.015 260.518 341.882 260.385 341.882 260.221 cv
341.882 260.057 342.015 259.924 342.179 259.924 cv
348.968 259.924 li
349.132 259.924 349.265 260.057 349.265 260.221 cv
349.265 260.385 349.132 260.518 348.968 260.518 cv
cp
f
320.128 256.676 mo
320.087 256.676 320.046 256.667 320.006 256.649 cv
313.334 253.636 li
313.185 253.568 313.118 253.393 313.186 253.243 cv
313.254 253.095 313.429 253.028 313.578 253.095 cv
320.25 256.108 li
320.399 256.176 320.466 256.352 320.398 256.501 cv
320.349 256.61 320.24 256.676 320.128 256.676 cv
cp
f
319.49 259.915 mo
319.45 259.915 319.41 259.906 319.371 259.89 cv
312.641 256.947 li
312.491 256.882 312.423 256.707 312.488 256.557 cv
312.554 256.406 312.727 256.339 312.879 256.404 cv
319.609 259.347 li
319.759 259.412 319.827 259.587 319.762 259.737 cv
319.713 259.849 319.604 259.915 319.49 259.915 cv
cp
f
335.674 222.576 mo
335.674 222.576 338.357 224.569 341.349 226.037 cv
344.34 227.504 346.25 228.014 346.25 228.014 cv
346.25 228.014 353.585 226.783 356.8 225.806 cv
360.015 224.828 362.143 223.979 362.143 223.979 cv
355.852 218.627 li
348.058 222.177 li
342.634 219.965 li
342.634 219.965 336.923 221.219 335.674 222.576 cv
cp
.45098 .258824 .466667 rgb
f
351.331 233.408 mo
351.204 233.408 351.087 233.326 351.048 233.198 cv
349.49 228.101 li
349.442 227.943 349.53 227.778 349.687 227.73 cv
349.845 227.682 350.009 227.77 350.057 227.927 cv
351.614 233.024 li
351.662 233.182 351.574 233.347 351.418 233.395 cv
351.389 233.403 351.359 233.408 351.331 233.408 cv
cp
.988235 .737255 .286275 rgb
f
341.691 233.408 mo
341.665 233.408 341.638 233.404 341.611 233.396 cv
341.453 233.353 341.361 233.188 341.406 233.031 cv
342.844 227.934 li
342.889 227.775 343.052 227.681 343.209 227.729 cv
343.367 227.772 343.459 227.937 343.414 228.094 cv
341.977 233.191 li
341.939 233.322 341.821 233.408 341.691 233.408 cv
cp
f
353.571 248.568 mo
353.463 248.568 353.358 248.508 353.307 248.404 cv
353.232 248.258 353.292 248.08 353.438 248.007 cv
353.826 247.812 363.005 243.223 367.767 242.883 cv
367.957 242.887 368.072 242.994 368.084 243.157 cv
368.096 243.321 367.973 243.463 367.81 243.475 cv
363.165 243.807 353.799 248.489 353.704 248.536 cv
353.662 248.558 353.616 248.568 353.571 248.568 cv
cp
f
363.997 240.401 mo
362.64 240.401 361.182 242.827 360.356 244.553 cv
362.638 242.642 364.338 240.852 364.229 240.432 cv
364.22 240.432 364.169 240.406 364.039 240.401 cv
364.025 240.401 364.011 240.401 363.997 240.401 cv
cp
359.593 245.856 mo
359.531 245.856 359.469 245.837 359.417 245.798 cv
359.309 245.719 359.268 245.576 359.316 245.452 cv
359.544 244.87 361.591 239.808 363.997 239.808 cv
364.019 239.808 364.039 239.809 364.061 239.81 cv
364.552 239.827 364.729 240.056 364.791 240.244 cv
365.158 241.36 361.407 244.495 359.777 245.792 cv
359.724 245.835 359.658 245.856 359.593 245.856 cv
cp
f
389.823 308.78 mo
384.082 308.78 li
383.918 308.78 383.785 308.647 383.785 308.483 cv
383.785 308.319 383.918 308.187 384.082 308.187 cv
389.823 308.187 li
389.987 308.187 390.12 308.319 390.12 308.483 cv
390.12 308.647 389.987 308.78 389.823 308.78 cv
cp
.364706 .156863 .4 rgb
f
393.613 312.843 mo
385.544 312.843 li
385.38 312.843 385.247 312.71 385.247 312.546 cv
385.247 312.382 385.38 312.249 385.544 312.249 cv
393.613 312.249 li
393.777 312.249 393.91 312.382 393.91 312.546 cv
393.91 312.71 393.777 312.843 393.613 312.843 cv
cp
f
344.082 306.315 mo
344.059 306.315 344.035 306.313 344.012 306.307 cv
343.853 306.268 343.755 306.107 343.794 305.948 cv
344.816 301.771 li
344.855 301.61 345.018 301.513 345.175 301.553 cv
345.334 301.592 345.432 301.752 345.393 301.911 cv
344.37 306.089 li
344.337 306.225 344.216 306.315 344.082 306.315 cv
cp
f
346.883 310.757 mo
346.861 310.757 346.84 310.754 346.818 310.749 cv
346.658 310.714 346.558 310.555 346.594 310.396 cv
347.965 304.27 li
348 304.109 348.162 304.01 348.318 304.045 cv
348.479 304.08 348.579 304.239 348.543 304.398 cv
347.172 310.524 li
347.142 310.663 347.019 310.757 346.883 310.757 cv
cp
f
82.5962 373.135 mo
82.2275 373.135 81.8657 372.957 81.6445 372.629 cv
39.2275 309.725 li
38.873 309.199 39.0117 308.486 39.5371 308.132 cv
40.0625 307.778 40.7754 307.917 41.1289 308.441 cv
83.5459 371.346 li
83.9004 371.871 83.7617 372.584 83.2363 372.938 cv
83.04 373.071 82.8169 373.135 82.5962 373.135 cv
cp
.505882 .32549 .54902 rgb
f
40.1772 373.135 mo
39.9609 373.135 39.7427 373.073 39.5488 372.946 cv
39.019 372.599 38.8721 371.888 39.2192 371.357 cv
76.2573 314.938 li
76.6055 314.409 77.3164 314.264 77.8457 314.609 cv
78.3755 314.957 78.5225 315.668 78.1753 316.198 cv
41.1372 372.617 li
40.917 372.952 40.5508 373.135 40.1772 373.135 cv
cp
f
69.5171 328.443 mo
69.4922 328.443 52.1851 328.071 52.1851 328.071 cv
51.5518 328.058 51.0493 327.533 51.063 326.9 cv
51.0762 326.267 51.5952 325.811 52.2339 325.778 cv
69.541 326.15 li
70.1743 326.164 70.6768 326.688 70.6631 327.321 cv
70.6499 327.946 70.1392 328.443 69.5171 328.443 cv
cp
f
40.2324 262.424 mo
40.2324 262.424 24.7383 271.69 28.1846 292.02 cv
32.1494 315.408 55.4668 322.991 75.6938 317.466 cv
95.9209 311.94 92.5498 296.004 92.5498 296.004 cv
40.2324 262.424 li
cp
.364706 .156863 .4 rgb
f
128.904 356.599 mo
128.904 356.599 143.731 363.701 148.114 367.841 cv
152.498 371.981 152.721 374.8 152.216 376.186 cv
151.711 377.572 121.041 376.196 121.041 376.196 cv
121.041 376.196 120.709 367.771 117.441 368.315 cv
114.174 368.859 115.959 376.406 115.959 376.406 cv
106.687 376.318 li
106.687 376.318 106.259 367.943 106.932 364.655 cv
107.658 361.108 109.717 356.318 109.717 356.318 cv
128.904 356.599 li
cp
.643137 .611765 .94902 rgb
f
125.738 354.149 mo
125.738 354.149 138.497 361.348 136.168 362.096 cv
133.84 362.843 120.691 362.969 116.836 361.566 cv
112.982 360.164 109.757 356.168 109.757 356.168 cv
118.507 352.024 li
125.738 354.149 li
cp
.956863 .517647 .384314 rgb
f
109.757 356.168 mo
108.101 348.859 li
123.783 345.674 li
126.057 357.26 li
109.757 356.168 li
cp
f
88.7549 348.542 mo
88.7549 348.542 97.8535 362.235 99.4985 368.036 cv
101.144 373.836 99.8916 376.372 98.7485 377.304 cv
97.6055 378.236 71.9663 361.348 71.9663 361.348 cv
71.9663 361.348 75.9951 353.942 72.9101 352.736 cv
69.8252 351.529 67.4936 358.926 67.4936 358.926 cv
59.5737 354.103 li
59.5737 354.103 63.4961 346.689 65.7573 344.211 cv
68.1977 341.536 72.4194 338.476 72.4194 338.476 cv
88.7549 348.542 li
cp
.643137 .611765 .94902 rgb
f
87.29 344.817 mo
87.29 344.817 94.5635 357.534 92.1802 356.983 cv
89.7974 356.433 78.439 349.808 75.8467 346.629 cv
73.2539 343.45 72.5303 338.366 72.5303 338.366 cv
82.1675 339.289 li
87.29 344.817 li
cp
.956863 .517647 .384314 rgb
f
72.5303 338.366 mo
74.8511 331.241 li
89.9517 336.535 li
85.9717 347.651 li
72.5303 338.366 li
cp
f
83.3252 301.106 mo
68.2998 336.677 li
93.7261 345.674 li
102.79 324.156 li
95.2768 301.106 li
83.3252 301.106 li
cp
.635294 .27451 .686275 rgb
f
50.4663 286.175 mo
50.4663 286.175 48.8257 304.917 53.4311 307.315 cv
58.0366 309.715 91.6802 313.377 93.3877 314.876 cv
95.0952 316.375 106.553 352.726 106.553 352.726 cv
134.586 349.923 li
134.586 349.923 124.455 299.839 117.079 294.741 cv
111.537 290.911 80.8369 286.175 80.8369 286.175 cv
50.4663 286.175 li
cp
f
96.8804 262.491 mo
96.8804 262.491 98.3589 260.464 101.718 258.94 cv
106.957 256.565 110.777 256.141 110.777 256.141 cv
110.777 259.114 li
96.8804 262.491 li
cp
1 1 1 rgb
f
69.9477 222.271 mo
69.9477 222.271 64.0806 219.651 58.852 222.965 cv
53.623 226.278 55.5635 233.967 55.5635 233.967 cv
55.5635 233.967 48.5298 240.806 47.7617 247.772 cv
46.9936 254.738 50.5913 256.565 50.5913 256.565 cv
62.3726 251.256 li
67.0102 229.422 li
69.9477 222.271 li
cp
.262745 .0980392 .286275 rgb
f
83.0776 249.423 mo
83.0776 249.423 84.7905 243.653 82.3516 240.44 cv
79.7827 237.057 75.603 236.845 75.6245 234.05 cv
75.6743 227.557 70.9678 224.557 70.9678 224.557 cv
70.7695 250.128 li
83.0776 249.423 li
cp
f
73.9751 244.792 mo
73.9751 244.792 81.1489 245.242 84.2412 248.949 cv
86.4043 251.542 96.2685 260.709 97.7471 262.539 cv
99.0874 264.198 108.135 263.068 110.777 261.762 cv
110.997 261.652 111.243 261.776 111.291 262.019 cv
111.855 264.908 114.439 272.203 113.688 278.891 cv
113.555 280.07 102.311 288.81 91.7954 285.384 cv
81.2793 281.958 77.7466 272.015 77.7466 272.015 cv
73.9751 244.792 li
cp
.988235 .737255 .286275 rgb
f
88.8413 288.981 mo
88.8413 288.981 67.3481 292.57 66.9692 289.681 cv
66.103 283.08 61.1611 248.418 61.1611 248.418 cv
64.1035 243.767 li
73.5102 244.873 li
73.5102 244.873 78.0181 245.355 82.4292 257.441 cv
86.8403 269.527 88.8413 288.981 88.8413 288.981 cv
cp
f
63.1802 239.473 mo
63.3501 246.234 li
63.3501 246.234 64.6182 248.146 68.5815 248.369 cv
71.5337 248.535 72.4287 246.998 72.4287 246.998 cv
71.5669 241.1 li
64.3852 239.708 li
63.1802 239.473 li
cp
.956863 .517647 .384314 rgb
f
64.3852 239.708 mo
64.4072 239.892 64.4829 240.108 64.5981 240.355 cv
66.1958 243.694 70.3501 244.319 72.0557 244.429 cv
71.5669 241.1 li
64.3852 239.708 li
cp
0 0 0 rgb
f
72.688 225.65 mo
72.688 225.65 76.4487 234.039 75.168 238.783 cv
73.8877 243.528 69.5688 242.825 66.9805 241.935 cv
64.3921 241.045 63.1797 239.475 63.1797 239.475 cv
63.1797 239.475 60.7778 240.314 59.1445 238.089 cv
57.5112 235.864 58.479 233.281 59.8491 232.678 cv
61.2192 232.075 62.8652 233.053 62.8652 233.053 cv
61.5591 230.617 li
61.5591 230.617 66.8354 218.125 72.688 225.65 cv
cp
.956863 .517647 .384314 rgb
f
62.8652 233.053 mo
62.8652 233.053 66.4873 233.784 69.0039 229.753 cv
71.52 225.722 71.2891 224.066 71.2891 224.066 cv
73.7964 228.229 li
73.7964 228.229 74.3569 225.343 73.2026 223.503 cv
72.0488 221.664 70.8506 222.045 70.8506 222.045 cv
62.8638 224.04 li
60.7607 230.442 li
62.8652 233.053 li
cp
.262745 .0980392 .286275 rgb
f
72.4009 236.386 mo
72.3721 236.386 72.3428 236.382 72.314 236.372 cv
72.1572 236.324 72.0693 236.158 72.1172 236.002 cv
72.5874 234.468 71.4311 232.802 71.4194 232.785 cv
71.3252 232.651 71.3569 232.467 71.4907 232.372 cv
71.623 232.277 71.8081 232.31 71.9038 232.442 cv
71.9585 232.521 73.2407 234.36 72.6846 236.176 cv
72.6455 236.304 72.5278 236.386 72.4009 236.386 cv
cp
0 0 0 rgb
f
68.6528 230.584 mo
68.6196 230.584 68.5854 230.578 68.5522 230.566 cv
68.3984 230.511 68.3184 230.341 68.3735 230.187 cv
69.0347 228.35 70.2183 228.65 70.2695 228.666 cv
70.4277 228.71 70.5205 228.873 70.477 229.031 cv
70.4341 229.187 70.2764 229.283 70.1172 229.239 cv
70.081 229.233 69.395 229.1 68.9321 230.388 cv
68.8887 230.509 68.7744 230.584 68.6528 230.584 cv
cp
f
73.9663 229.289 mo
73.833 229.289 73.7119 229.198 73.6782 229.063 cv
73.6523 228.961 73.54 228.678 73.3364 228.598 cv
73.1465 228.521 72.9018 228.641 72.73 228.752 cv
72.5908 228.839 72.4077 228.801 72.3198 228.662 cv
72.2309 228.524 72.271 228.341 72.4087 228.252 cv
72.8325 227.979 73.2197 227.911 73.5586 228.047 cv
74.0796 228.256 74.2383 228.854 74.2544 228.922 cv
74.2934 229.082 74.1953 229.242 74.0361 229.28 cv
74.0127 229.286 73.9893 229.289 73.9663 229.289 cv
cp
f
62.5176 237.033 mo
62.439 237.033 62.3608 237.002 62.3022 236.94 cv
60.0073 234.522 li
59.8945 234.403 59.8994 234.216 60.0185 234.104 cv
60.1367 233.99 60.3242 233.996 60.438 234.114 cv
62.7329 236.532 li
62.8457 236.651 62.8408 236.839 62.7217 236.951 cv
62.6645 237.006 62.5908 237.033 62.5176 237.033 cv
cp
f
60.0933 236.391 mo
59.9497 236.391 59.8232 236.285 59.8008 236.139 cv
59.7754 235.978 59.8867 235.825 60.0483 235.801 cv
61.6304 235.557 li
61.7925 235.526 61.9438 235.643 61.9687 235.805 cv
61.9941 235.966 61.8828 236.118 61.7212 236.143 cv
60.1392 236.387 li
60.1235 236.39 60.1084 236.391 60.0933 236.391 cv
cp
f
73.3481 290.739 mo
73.3481 290.739 63.3691 244.501 63.354 244.106 cv
63.3384 243.712 63.3384 243.712 63.3384 243.712 cv
63.3384 243.712 54.6479 246.257 51.6484 249.918 cv
49.4678 252.58 53.0718 289.524 54.1191 290.214 cv
55.167 290.904 73.3481 290.739 73.3481 290.739 cv
cp
.988235 .737255 .286275 rgb
f
88.8413 288.981 mo
88.8413 288.981 86.5098 278.734 81.1221 264.596 cv
75.687 250.334 72.0557 244.429 72.0557 244.429 cv
72.0557 244.429 78.6518 245.309 80.9575 246.573 cv
82.585 247.466 88.9087 261.526 89.9824 271.631 cv
91.0561 281.736 91.6724 288.266 91.6724 288.266 cv
91.1582 288.711 88.8413 288.981 88.8413 288.981 cv
cp
f
98.6333 263.769 mo
97.4673 264.817 95.6973 266.643 95.814 267.624 cv
95.8291 267.755 95.8857 267.946 96.1958 268.096 cv
96.4487 268.221 96.6694 268.22 96.8867 268.1 cv
97.8061 267.594 98.3828 265.247 98.6333 263.769 cv
cp
96.5581 268.781 mo
96.354 268.781 96.1455 268.73 95.938 268.631 cv
95.4101 268.375 95.2588 267.98 95.2246 267.694 cv
95.022 265.988 98.4609 263.117 98.8535 262.795 cv
98.9473 262.719 99.0781 262.706 99.1836 262.764 cv
99.29 262.822 99.3501 262.938 99.3364 263.059 cv
99.2808 263.537 98.7476 267.754 97.1728 268.619 cv
96.977 268.727 96.77 268.781 96.5581 268.781 cv
cp
.262745 .0980392 .286275 rgb
f
68.416 248.599 mo
68.0674 248.599 67.6982 248.577 67.3086 248.526 cv
63.8721 248.084 63.0825 245.75 63.0508 245.65 cv
63.0005 245.495 63.0859 245.329 63.2412 245.278 cv
63.3935 245.229 63.5635 245.312 63.6152 245.468 cv
63.6431 245.552 64.3379 247.546 67.3848 247.938 cv
70.4961 248.337 72.2109 246.796 72.2275 246.78 cv
72.3476 246.67 72.5347 246.676 72.647 246.797 cv
72.7583 246.917 72.751 247.104 72.6309 247.216 cv
72.562 247.279 71.1001 248.599 68.416 248.599 cv
cp
f
73.876 233.091 mo
73.7285 233.091 73.5996 232.983 73.5776 232.833 cv
73.3506 231.29 li
73.3384 231.207 73.3613 231.122 73.4141 231.057 cv
74.0024 230.327 li
74.1079 230.196 74.2983 230.177 74.4272 230.281 cv
74.5571 230.386 74.5776 230.576 74.4731 230.706 cv
73.9678 231.333 li
74.1753 232.745 li
74.1997 232.91 74.0854 233.063 73.9204 233.088 cv
73.9058 233.09 73.8906 233.091 73.876 233.091 cv
cp
0 0 0 rgb
f
69.2817 233.46 mo
69.1318 233.46 69.0019 233.349 68.9824 233.196 cv
68.7851 231.648 li
68.7734 231.555 68.8057 231.461 68.873 231.396 cv
69.7358 230.546 li
69.8545 230.429 70.0464 230.43 70.1631 230.549 cv
70.2803 230.668 70.2788 230.859 70.1597 230.976 cv
69.4038 231.721 li
69.582 233.12 li
69.603 233.285 69.4858 233.437 69.3203 233.458 cv
69.3076 233.46 69.2944 233.46 69.2817 233.46 cv
cp
f
86.7891 262.788 mo
86.6567 262.788 86.5361 262.699 86.5019 262.565 cv
84.8628 256.215 li
84.8218 256.056 84.917 255.895 85.0757 255.854 cv
85.2334 255.807 85.3965 255.907 85.437 256.066 cv
87.0762 262.417 li
87.1172 262.576 87.022 262.737 86.8633 262.778 cv
86.8384 262.785 86.8135 262.788 86.7891 262.788 cv
cp
.262745 .0980392 .286275 rgb
f
78.4282 258.774 mo
78.4282 263.276 li
101.179 263.786 li
101.179 263.786 100.327 261.28 93.8994 259.879 cv
88.186 258.633 78.4282 258.774 78.4282 258.774 cv
cp
1 1 1 rgb
f
112.051 257.891 mo
112.051 283.624 li
98.7119 286.764 li
78.2749 287.044 li
77.7695 260.629 li
98.1606 261.068 li
112.051 257.891 li
cp
.917647 .305882 .305882 rgb
f
71.3174 273.631 mo
71.3174 273.631 74.0078 271.67 75.373 271.101 cv
76.6655 270.562 77.9536 270.246 77.9536 270.246 cv
78.4282 272.51 li
78.4282 272.51 83.2261 272.873 86.7378 274.054 cv
90.2495 275.234 89.8618 276.81 89.8618 276.81 cv
89.8618 276.81 92.1382 277.859 91.3691 278.88 cv
90.5996 279.9 87.0434 279.486 87.0434 279.486 cv
87.0434 279.486 91.5991 280.521 89.9453 281.741 cv
88.291 282.962 84.3061 283.216 84.3061 283.216 cv
84.3061 283.216 75.9292 285.912 72.6772 283.326 cv
69.4248 280.74 71.3174 273.631 71.3174 273.631 cv
cp
.956863 .517647 .384314 rgb
f
78.4292 272.764 mo
78.3911 272.761 75.666 272.354 75.666 272.354 cv
75.5273 272.334 75.4316 272.205 75.4521 272.066 cv
75.4731 271.926 75.605 271.828 75.7412 271.853 cv
78.4663 272.259 li
78.605 272.279 78.7007 272.408 78.6802 272.547 cv
78.6611 272.674 78.5527 272.764 78.4292 272.764 cv
cp
0 0 0 rgb
f
89.6309 276.854 mo
89.5942 276.852 82.6611 275.861 82.6611 275.861 cv
82.5225 275.841 82.4258 275.712 82.4458 275.573 cv
82.4653 275.434 82.5957 275.345 82.7334 275.357 cv
89.6665 276.348 li
89.8052 276.368 89.9018 276.497 89.8818 276.636 cv
89.8638 276.763 89.7554 276.854 89.6309 276.854 cv
cp
f
87.5059 279.781 mo
87.4687 279.779 83.1211 279.143 83.1211 279.143 cv
82.9819 279.122 82.8857 278.993 82.9062 278.854 cv
82.9263 278.715 83.0615 278.631 83.1943 278.639 cv
87.542 279.275 li
87.6811 279.296 87.7773 279.425 87.7568 279.564 cv
87.7383 279.69 87.6299 279.781 87.5059 279.781 cv
cp
f
104.696 270.002 mo
104.976 269.472 105.408 269.041 105.901 268.699 cv
107.569 267.543 112.815 265.132 114.372 266.609 cv
115.864 268.024 112.991 269.454 112.991 269.454 cv
112.991 269.454 115.536 268.765 115.413 270.66 cv
115.31 272.242 113.688 272.765 113.688 272.765 cv
113.688 272.765 116.404 272.301 115.417 274.568 cv
114.431 276.835 108.814 278.853 106.746 278.789 cv
104.679 278.727 106.143 276.016 106.143 276.016 cv
106.143 276.016 103.923 275.653 103.923 274.423 cv
103.923 273.121 105.669 272.626 105.669 272.626 cv
105.669 272.626 103.69 271.912 104.696 270.002 cv
cp
.956863 .517647 .384314 rgb
f
106.32 272.765 mo
106.207 272.765 106.099 272.699 106.05 272.59 cv
105.982 272.44 106.048 272.265 106.198 272.197 cv
112.869 269.184 li
113.017 269.116 113.193 269.183 113.261 269.332 cv
113.329 269.481 113.263 269.657 113.113 269.725 cv
106.442 272.738 li
106.402 272.756 106.361 272.765 106.32 272.765 cv
cp
0 0 0 rgb
f
106.957 276.003 mo
106.843 276.003 106.734 275.937 106.686 275.825 cv
106.62 275.675 106.688 275.5 106.838 275.435 cv
113.569 272.493 li
113.719 272.427 113.894 272.495 113.959 272.646 cv
114.025 272.796 113.957 272.971 113.807 273.036 cv
107.076 275.978 li
107.037 275.994 106.997 276.003 106.957 276.003 cv
cp
f
70.1553 238.066 mo
70.4399 238.38 70.79 238.693 71.0967 238.778 cv
71.3823 238.861 71.854 238.697 72.2773 238.484 cv
70.1553 238.066 li
cp
71.2612 239.392 mo
71.1494 239.392 71.0405 239.379 70.938 239.351 cv
70.0918 239.115 69.2671 237.921 69.1758 237.786 cv
69.1089 237.687 69.1084 237.557 69.1748 237.456 cv
69.2412 237.356 69.3618 237.305 69.479 237.329 cv
73.1484 238.051 li
73.2646 238.073 73.3564 238.163 73.3813 238.279 cv
73.4062 238.395 73.3599 238.515 73.2637 238.583 cv
73.1348 238.675 72.104 239.392 71.2612 239.392 cv
cp
f
56.5718 246.627 mo
56.5718 246.627 36.3476 256.26 37.1831 276.6 cv
37.9043 294.157 67.8935 290.289 68.937 290.302 cv
70.9429 290.326 73.3408 289.88 73.3408 289.88 cv
73.3408 289.88 72.6865 270.46 72.0669 269.887 cv
71.4468 269.313 59.04 268.01 59.04 268.01 cv
56.5718 246.627 li
cp
.988235 .737255 .286275 rgb
f
97.5234 261.004 mo
97.5234 287.044 li
99.5625 286.81 li
99.5625 260.729 li
97.5234 261.004 li
cp
.847059 .247059 .247059 rgb
f
53.2148 266.938 mo
52.4184 266.938 51.7593 267.094 51.4004 267.497 cv
51.2622 267.652 51.2202 267.763 51.2397 267.799 cv
51.5225 268.325 54.6709 268.247 57.8101 267.873 cv
56.4556 267.423 54.6216 266.938 53.2148 266.938 cv
cp
72.0674 270.184 mo
72.0244 270.181 59.0405 268.31 59.0405 268.31 cv
57.1968 268.573 51.374 269.302 50.7173 268.08 cv
50.6089 267.879 50.5625 267.547 50.957 267.103 cv
52.6558 265.19 58.4624 267.457 59.1465 267.732 cv
59.1518 267.734 72.1094 269.593 72.1094 269.593 cv
72.2715 269.616 72.3838 269.767 72.3603 269.929 cv
72.3393 270.077 72.2124 270.184 72.0674 270.184 cv
cp
.262745 .0980392 .286275 rgb
f
100.259 332.351 mo
100.14 332.351 100.028 332.278 99.9824 332.161 cv
97.7803 326.51 93.3765 315.534 92.4697 314.452 cv
91.6714 313.499 84.167 312.66 79.6245 312.354 cv
79.4609 312.344 79.3374 312.202 79.3486 312.039 cv
79.3589 311.875 79.5029 311.741 79.6645 311.763 cv
80.8926 311.845 91.7012 312.611 92.9248 314.071 cv
94.1196 315.497 100.274 331.275 100.535 331.946 cv
100.595 332.099 100.519 332.271 100.367 332.33 cv
100.331 332.344 100.294 332.351 100.259 332.351 cv
cp
f
96.853 307.915 mo
96.8257 307.915 96.8003 307.918 96.7778 307.921 cv
95.7446 308.091 94.2178 311.163 93.292 313.521 cv
94.6089 312.63 97.227 310.681 97.5093 309.116 cv
97.5747 308.757 97.5029 308.451 97.291 308.183 cv
97.1167 307.962 96.9658 307.915 96.853 307.915 cv
cp
92.6973 314.559 mo
92.6304 314.559 92.564 314.536 92.5098 314.491 cv
92.4126 314.412 92.3755 314.28 92.418 314.162 cv
92.6558 313.496 94.7959 307.646 96.6816 307.336 cv
96.9624 307.289 97.3774 307.335 97.7568 307.815 cv
98.0757 308.22 98.189 308.692 98.0933 309.223 cv
97.668 311.573 93.0474 314.396 92.8511 314.516 cv
92.8037 314.544 92.7505 314.559 92.6973 314.559 cv
cp
f
37.1582 304.947 mo
37.0859 304.947 37.0137 304.921 36.9565 304.868 cv
31.7895 300.09 30.831 291.066 30.7925 290.685 cv
30.7764 290.521 30.895 290.377 31.0581 290.36 cv
31.2197 290.341 31.3667 290.462 31.3833 290.626 cv
31.3921 290.717 32.3594 299.809 37.3599 304.433 cv
37.48 304.544 37.4873 304.731 37.376 304.852 cv
37.3174 304.915 37.2378 304.947 37.1582 304.947 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2112.w037.n003.50B.p1.50-temp_01.eps)
%%CreationDate: 12/3/2021 2:02 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj4b4oCqkQ^978AT[@G3jQqe:A'r65/^`pC5r^>+JZrZ3oA]f'TDDR\J\ur\,U5"]+O[0slIr;>S#)rT[8eZA.d*5b?Q0;'
%Z#48Z_XYm(p;d3!QCaCK#*&$h.1Q=4YbFFU9i#NeWeK#(:h_!%X+d4oaB$L7H=J1^rK49/p@@D=,bK;tPfqTA':EmTE(Oop48-d>
%W>o_UlW<mo_F\HHBV'2'<t/n5*T1j9^/HJF>K,N^g'>Tf.sg(1-gh:j3!u*KROX;s@n&,DA>57gJG<:Cn1lsV24F2cZW+&S>".!6
%N['/t"gu!*T['JXqH9MIM-P"cDj?eIRma.irRkFMTSp4r5n,+LDWT513r`mY7m?0D]-.#SfC?USXoC'PD'[>Y-0#sdjtMN5'c\f6
%g%<on%J7@8:pRs%`#9[%=1*(_))+BOb=UBDF[OXA/c$Wl9\A<]l].17I#k.>H%*n,\@.a02;M'dPH*E3JDbc'pi@\M1rpJc\jCMM
%hE3:d9aGU"%FL8`p9I[.lE;\6-7th,A\OgIY?D@WJkjk:Fu^'98!aLr_]$SkqK^F5\uh9&^rAj\CQGdY]%YF/#jRDR6iZ5?(0$<p
%YBdSB"JK7-?G^eu)2sg?-$3KQ'>!.+^`/#Jl-0K(AaHG2d1Nqr#B56o6__\THKi(Afi\!NPiWfi@bk)VEDN1U9>qC_\jjQ#?eg.R
%MnJuWV5?tFctioO&.[MUamO:t,5ggKW%j;c>$%VeHjP^%UUs:<_osmS!L6p(RGT,B1(8q7oiE@/UWNE:(,ntcFr^GRIJhB&_c"t%
%]4p9(C#Z++b1#`pDD'0R#Lse!T,\*d*!b"6B6u`,eFuh\pJJu/J)&iR;9ei4%=d=qWb&N8QHc.<2N&s9/F%%ij6?9Gj)FVWD,f0E
%Q:<WDRBk%-`g!B7)Ep)SC5t5P"'kV\C4Igf<h9=?r'h\,L#3;c\/`p6E8``>!@[k8=0brV21WP^L)kc:(iWn_=]:^hWW=sS7\/p`
%P_E6!aid<">09b%[kni`"TXt)bYH1@abQf%X2mM)"-!#7Xosjg\NEfH_]Pf](dh!?dR[l`Lu7t1!/1pP>>6/-pl0$=&\eL;68#RR
%1'<IQdK33.UneQE1.>>m<0P9/f1)DL!-n&i2&TQn%acV'_LJKd!(.Y.JD=BPQcFUg^JR^=*AGXI87VQe*<8XT6RiU,8X</l&5!JT
%3@(&TmWe:h1-uZuPD$H2eX-*Rg<7RCGWbd50d1p"I8gTpQgU[PGqT-HjFpHbZ3C!.5gmV0rtA;uE5/cRjrsJBpaf[O%NbtQLHNqW
%6uLkTVNCC2fFHNEK+6$R>Y]1n=d!a8iKV6BV.45>lYHT9GZUV;=8r[r*d-?$T4Q.-cFa"Lk-cj1STjnm](3E'0)n%05'pU_FAMj.
%Vr^e=?2eCjo""?Es/:2q-UjSMq7!aXT0)N4:M]u/EZR3YDo&W)%R8&s?o4sdA^f@EY5\QGrC!suDk?[^]XW7"W`.]CIaV>^mWWP4
%pedQ*1f(1&reW7Ve`bV%3[KU:hYq^gs,@GVp<tA>I4E0(4H]0_/+7Adg[5j4"ofA]/t3Uh_<T&"J#7To`,S<E`=1M/o!ATb/I26)
%5f2'dQFKK_SO\c+BjFS>Dc8mdiCA`_m@7c#13.(R>eXXqmE>m;!Q=png'0FDr!`>&#fDY[V&r4&7o-$gL,."Joo/:9Zdtf35#p(<
%DH=s/qCAkqO^kCqfsEK4CVnM#RSD[]YJ?7mO7O"UDpT_tAgU"b8nYG%2#Er%m]JXrIK#r7U"s,l[clg'A=@t9RU_#Pfo9)$cK!G/
%gYB!E[]:8h+[nn6=iM`A4ZPf/g;G`Y8bK?30B2onA"I_^`bF=pQ(YZCHW-9nE4l)$n<NG+8mr'&JN/],N?@s62$,W:(m.rU?23/g
%/T"#pY*f0p+AT*[#mhA$8*NA1@SX879#L-N85(f`q[f]f`[cV^Rr(;DS6<\TIfIkn>_HU5iHQIP[EAGhF0e?e_"t:.<f$:FYa9U]
%Qpq;77`Q"l##!Rgf6mqCcTl?o_7M6f$n8CD@@XR=Qm=<Zmr09OO.MXe=X1'-DhnJPGO;cp9uKY_.!k(p4VSVTl%b-)?SS]J:0\pS
%PE$r+#hrIC*gH>FhJQ6qjF]I9F:qMA>%]!I7$?+<^#jjm\$lU!MWdrl.XWAqgUJ6-dd<Ar4m;FcKU_@<<0m49X!7_pdH8G^6NM;f
%V\t_9fC^:iN&JrT_hPJ\kI,!!V2Q6=rVW5['dC]N(2:J,mpjV)[]kS/@p`A>K6n]hV9*V(er]!D1-e^fjA/6`PMTG3&D&F0#J@_9
%!1J^ZSG85uJEB=E0PQJkoo?1B_k[_g%9a>V?BD,J0Nm&WHk^MnMN-!l46i(@[?0$!"/L:!1d\bj+`0]]9TljhM[[%2+@>:I<[1**
%==^SPgFeM)iHJ=/$mBnAI8u'L`H=maT8f"U8/DgRYZ?TC^b"N7pN#'iEC#[*AD);A,Ru[Ng3-cJ,8``gXb3P.e*.q.U.\`>W35M!
%77Q`*66nIn&dBk\O^5n-H(`=,%+k!ee$0A"F`Yu&>f=0,$&(;$h$qV`/i@WsOYL>;Nb-=I`$EMN:@gG-n#*WX/$f\Kf^R[$ehjaN
%cSjd?N0#[1U3;5IqF!eW>R[hg@u?2kA0SCs!FWKHCH?)!Qn(s\CIE%#-JCKmMX,(_Zp7S/Y;oh0H:2TETckHi8O$5Q<9+0&YXa80
%-i_DMf;tTY#0&9?STV64`:uu879nToHAQBEY`ZVrNhF17a!hD00#+`7KCm5B6Ck>0>sIA\6l<)mdCUI'MqBPP2FTHdTakk1#4P3P
%\!oar>$61hQRb[)!lO?*"IeqSrPF.I-/A2$Nc#6'J+A,^-7<=Y%]FRB=BqF0I`%5"MF:&3+gI,+j5FV^J((d\[VW`p9<8N_g2n!]
%]JKI\(lAY*@@HAo#KA4o57sIpDSY/cc(hJVk2U.Uj+m1A6u0(K(U<7NE[44JE#?KWL.DI[Q!L1>J.?6%(^,Ik2e8L'I*^5qoG=\j
%rSHs"N&aMHs1fB-#lGA%3X3iik.8"2Lo=rt_6GAg<h*7prc#GMicN+-Y<<JTL5q(G-k2mT+1PCsh&Ijm,/S3#hhtl1\V^I\:b##L
%JY(Aa4cgLq,-$_bb[lYba+OfPrS@fH<'b_4&>LZT7P[g@36i7*TQ`+[W?Ndi$rf-Lp&NKOKTlHOaat\lDoW>b'OqlbK`2\JrO+<(
%YI$U.86"O$o^406).l%=?QGOWmtqGr6q]diTbu^1V@c5i@'P%?B<XL30:aU;+s"k<)'s"OS;,rt-g91])o$N);&qk`])5-0pUDA0
%#"(U$W6lgm_%_u0U;7#@8QVQF/#2WL\8F9"AF^luK^Z'7R.tE*2"QCJXH$NkI2Ps!!sI##QdmcNML(B;+DN)M)S-VO-l0*sI,&*L
%CdAlHja:^(*QUTJT`d`QNRTp]dk):OG5fr:+sk=4*"-8[rO37e,18oHWIWCP0nR6"8-HhcZ`)>H5o5[2H!u#@RDCU]=%J/IOgQ-.
%,U8hA36]9`>spEGGHrUTiWK(\lpmj/ISkAdoB^Y8eM,ch+E.T'i[0kNAb4JB`eK?\4b^VCUX;pJ+_?=iiLb?.#.'7B-TE_qF;'A?
%jg-h(-mAP*/#.WD,F[J'cEWM=4:281G_8<3KO>PS5Sf#Z,kn(VWd@[hc#of_2\1aT9ZV($\Id^ZTe,?3#ffBk3>dRFO+H+$!/Te0
%jreFhbsKmeEf*+&,*ObD6JIu;JfsrQPY[_mRnOTRb@9YJ6^=3%-K[\?0f;2M+US()j,+7VR>qG0r#H_0*$rm@GRl8435L?l!.HF;
%IF1(a0H8N-<j+0m[\FHJMAEM)]]j)P1(634@aQ2<U+IeQX,-k36:fK$/iHGr?&08G@_:>dl[i=V%Q[Z)>j.lc@Z.[31^NGRG!e/+
%WDq^go7VfTn9OJ[<VA=h-AE_E/'OY[L5>-aKGqjT'>k!,(b[%4aEr^"%CJV!0r(?AD&`M4*gGl%De6@aBoU2?d+)V[\6E"ZE^]Z5
%)EA%_;UA^cV7$m82qKF).-Y3N%d:1PHlSn.qUpR'+Od"gDVcOqhKMZNcO'i1Ekog,2%RbDB%&-G]uU1(92OdSCA%!$k*:hj(oD9?
%Bl,_/P;7$G7>HMSKE74`Tig4;`Hhc4/cptpGZM<ah1R2>h2I&Q-c;Q!DKA^o(_Af.(CW%5bMSn.\m?=qckrp$&<t7X&5STU;^K<m
%\fZ[^^9,W9QNChnagn!eQ8X@;M85"iIH#C<ZqI]tD$b=R:;$"X4MsXG'f?2GpDcQe._NA6r*shS316NfOJrYElO^cd_"ei%Agj!5
%AWlh/WEUBQC=/B?;0&7IC@p_2Z<=/iN>Zj(F2e/?,;dH)Dr\5'c<;Kaf(_`_<N5"a0p;HoQd21eBK,Q(8#+9$0(jjjOS"Hu+D\&5
%mo\6+B9g%>k&REe(8K-g>A4OG0,teRXUCC;ljAq_gOir*&]pcga:(Kc\s,%C+ed1&kW'a)E0:%Xg9@GcqKNNZNtc`OYjtonYYJkW
%0X,-oFt/)U'D#9bSJoY_/+Tm=[]/&5!+V`4Z*'a;F8gu>j?V,@Z7c;hi-9f:=J,=a3lb,L2A\'Yc%0[SM0/A1DHJf6)]XsfV&&4s
%a9iL"@ZYf</rWG"6Qro*%&diFJ7K,8BSJCq[Osn/2"]Vmm*r:gm44YaNXZNPVeO6@+oSCH'q>d(hMl<f1dO_8NX6s^2ku&^H)XVQ
%>)*f-CG@-o'r&:9?=s^02G2`0A]u[,.AHn=&Jh1:BUOF>1qfoIQ5Sb!o:h?e@^J0:f[KffC#-qiG_90'[15@(G@;LH0bZH6ps*uR
%'/%V.gK"Tl,GANmhJ5nTE6pZW61,B-3RVq13c]7G0@]J9<-=Z!Nl;Z[$U$9GmmCC]cIl5R!UHJ&o'=L0c`=,k=tjtcbja_l3u[#!
%5o14$>N,k`[cMDUCTA+b<i[tKKuk8:MiS]'f%1qP8(>`PToNu.kG91M"j(;=2mTjq?D#Ja'&F\9Z6@#;/?\agYeme`]:hEd`[L\]
%+,>@/Ct\X@`]IhjZ'#Ig>^WBe7_LqXV_a.-+LVEY;1H/`J$?+l%=AnB%)Zufj'=>el&gEaZrm>iCE$`!2Bpm]#h=JSEh.F29_2O;
%FNC^:Zo5L'*'a#>O\u_j^BiSW9,DJbq.u:VH=sm'1/qO\&k(`@]H/oF0MRVJgG8SA-6*jN7`Gpdk7#T(Cq03hnJ(oh7-bsJ`KrkI
%>S!B"pp@29Rt>GP!N[=[6g?\V1u(OXK5<qe3\u[^#+0rF%"OEOZm(R??\p<3:A."$%&?07dZ4`e0Xn="*PsR;OdZi^T'o#Mp.8IQ
%Zn8A<X0FrcDiQ:K0C&tG)<Gn-9Fi#$dHM:EK@#^([P#.L]&!m]=_=TLC'Fg*+WjIDGuos96g`7*?#_\2[eQ"a9@?qDr(_]HHaCF>
%HD`8ePKNt^lAh^W0Zt)hg\;MP((P!Q@q,nZ,7-%:+W?b<L4hari$bjlnH4fKjm4_@_h]&O&jtg1hGA8n8BiFFB>\5PMY'7h2[#&F
%H&7;t`5u36k_`,sqA!OmI$oY]W[pVT/nA.#N]3Xd[Bf&5#3);B=I!UYR(;"GQS&"cJmf7[(bM2'(aeV@b2\6mXb19:N+jkqeBWE^
%`f\UQ#qB-Y2U:(&.+lLh1#t"jdlOGIA?o'R'Y@O1d)[jEaAPJnpccKL&.P[VB-*2qUX5j=o<skaS/(6L9"Z\<'QP+IG@U`nD\So(
%V7V=&o'27]Me7YtZGim'ad>E7Yiu>?m2'HQ@38O=8eF4,XGgUf5@dl0'^.i/7GgU>([0@,-!oqaOu\Q1mi4k8&9)E3:EedgW!,O#
%g5.5c")d@H'J.,eOR-0aG2Wu`)^eHh!"s`$;k7[e.Gk;05GIcU^NI<(Sp-%GLk!eGZ:);)mTpc!*682XB/?f&^Sa4`$$o,-[GRfS
%m0<:(@AB<:ZM&\I2bro4ZHP'a6qA$C=[6B+@_J_r@%[1k\(+(,aLgfV\pPQqcWae"f[2rjA4)JD)^8u*ng4,C(kd3?=V;_bTU54"
%fXcSVO:aM,H&lduDK-?ONckY:d+i?QU4URE+`[9k9A+5M8g'd3k;Wn,<M[!mI+[TECaQ`-k^"5\5_gC2'epE/b]1OKG;n-nM6)61
%!e4O'+1=Cl=?_qF*Q<9\Mo;P\>UDSq&O#O_#<2iZhE.o;@B"YmJX`.j6LbX[51^/KMM!Kdk5+!YF1@&qoGI.DLYr&dlKiAZmL?%;
%n?%<.cnF'h[;X&+F<h$Gi>ij'pVN:$3q^HS+MU?HiW9PJVG5eZ?0\H^bMfTaO"PEML=qK([+Eu5n+U^EF3>";-P9)h"pmLM8IK8n
%/KOlD!b-an]^'mb/6TmrSMoYD<-EU`[aj)JS)ZJgq!XcN_dh_DD:_7OJ0hHm.MBV_5Dpo"4s?,IWR1Gl&Mp6$oo%r2Qd5m\,%VD!
%(f[n9l`a9k/@OXPD$]AoWCT;qc,(RgL@\&p'bOJD/B`D?&I]C=a`4*f0f4PF[C0f!c->bFACh^Ln2J,VI:bDl&j.3*$:j5][H3G^
%e-_dD:kY<1\\Z,TTg<:H!ag=9&(-=GQhTXTW(d7e$>j]hKj0u(C.,R\96%\t?$C8Zh"[4XpP7haK\L0VT#ud[-Xk(,p$^6-q`o&E
%#sn)V.A+kA8qUs;hLsU"&gH`%HM64Fk"EYL<@lTF0S[5qfk2M17@D6JL9b0m3'-;IP&Z5fhsE7KAXLRG)7H?OQlY&m@\LKUl;ZD?
%G&[pZo?)MN>,nQtcc@N>5]<,)HuNZ;A^idNOUIR[%Tb-u8Lb]F#`3OtMV]K:\iJH-njP.-&Rb,TONXo(^4R!$0>a9CE)T>RjNo;W
%)I4GhWA`f`2Jm-op)j^4NQA>Kbeh<S8`:n;`&_\\M4QCS^oqC_[kC4Amb9(+,:m<4aaQO2C^07-GM^k4Ek3Iugp;\d&&l'o5=$1r
%@aH1\.l")b4U"bd#[#c&.d*Vn!8PpAnFe1hA(Vj8%\7gkn,:i6YkMrm5I.M.a)&$oIhaS/L\Z';PrH;W;<=<K]?;='Fh!Y62t>LH
%`TdFpH_"66H,O0Qor]Y!f&BHghF\3WZg04/cte.'d/;ggd%2KtaH?:?j=L'J@B'shn[79/_J30f2`L#-RcjI2lgc6ZE1q+1En;%G
%dO&3P9N`5S80@^IZ6qLCbt$7$Dn%Q3Jt)N"]g'N7TT=F!A'!oIR-ustqXboupG]"EV6*?%[pZ4#ZdgS]?]$p!jbD!sHF7!@=&1n"
%pt8NkCt8NHgHW7,AA:_G8ep-uq8`O/jdC=5=DlO(-hV5T[So2erpdagFKp-1,[L_0B!ktA4")Ec:;>54e\hgP@[f?[k6ocEI;[Y.
%j\*#30cb.uoCX4L:T5pq%,^*PcNRt3qGjEq.G_"O&'EF+UgpA?VoQ\q^65ZIpd)O0h9pLnP,EHfFGYl@o51QmK6j:^bJLr3SY#gN
%</<Yo2&%ZGX]H->`=cTfaClga*;u:D(+sc'Vi<[rAb5#(l+EUk?'G\Q9YJud8/t^3jn;dYT!qcTqMZMijlf!El5+*08hm7lN`r8k
%cl&a-<PtrbM5,uV%E4m,8(UkPK*p<A![M$X*Z3>uVR20d^eKd=DDc)QH8nWo*#3^0#*%%/W'-.jT"n36Z-#A/fP#I^+$9Efnjlob
%H2kB8Xd2V>X3Pf3-&;;BZW&=X7m@p:@#QcR.A#1kYjd4.W)jYc<hig2!]&MNIUnG/_isPXVk'W-%-ut-a#Yqsc-ZC,`tacWM/:b9
%:Ph;/(!$0\g6mtL6Ad:nR+Bm0W[qG>LI\P?CmW:=>i:%6rHD_'5/#e,h6.Rrr]=12i1B=`rPt9qRu*EFY0%K*\5)7iQVLc0J8fXt
%.]2P)HuGRm7B'On#8OCM,jt&]^1]aLYN?A:VRsXqc:PTP]?$W.X,20ne90lc]B]-<\Y\SWMF6Z.nlJ_Ck($'JD[;^[gB*LApW(0n
%`gG`NdpiC0<VrYde2;)W4CEZ)MTq%r+K9ZG"\]n4I`)6Ha/%bU+t0!h1h/c`<h*]Z$tH@e*.PBr(cTc4PDRObrH.rUe:U5k*!`0G
%`LB1B^hJqr/d13cP#c'YC3P+O!#ahUW3i];$I/MC+HBE^<k^;k954*EYYOeL@(RJ-CCrJb8B%1s2[*H_HIOL.1H-Aj#1paOVo1l+
%=7)BlAf([I-j[h^&]*us/rNDN1`gN;77Ym/]b!:<-THi0=G^Mp<c3rYL/'E(7(!f[oAhXE!2WWe-Dbr,]F5I6h2!e'S6n6PdbrJD
%%!MG@ZX@j'qulHLK!WDXe@9PMgm+A@Eg,`Ib[%bN_oUVuRj(r%XI^e0V7^.e2.jgqMkR5Ld$]e(9qD0%F'ihQbKYIG\M#o9jTbO$
%RG`Eg5.\fOX+/F5k+$>6OKZ!.b_!;;$R8U1mDQoaD#6;ljjl+'30!ot=>ClHRK5JsL9&d:(3@=d;BGFdAMcoXhlmjb,i<>n9)2(k
%3"8Wkh-<*)CBVloe"9)FMEu@'3-qTLK8M,g$ut?SnZSF7+eE5YNXWNk?9_guR7])m@7qi/YZ9!#Zdh[CRBOP;oDU'qB%:Vc!SmOP
%<ilMV!jL/7V?"P.%U-d44H2*W7cm49<BnYCJtkZH*%.W<?2^YY.`3DpibY;lY1>Q2]GM\6kd#bg`.LqPrO2q+Ue0$X?))mJmg>9I
%(^l;;@t=+D%>&$/K&YDY^q\(4338Dqc/!W\LV(<>)FmEim4)O&Pt'*dl-.ck9mg&Nk-d4O)7>mW?&hL?!9I+B&!"qs#`.H]?,e%j
%9B5/BLnUq(LV_XIK0It50]TrVhR(LqSNZRl^!s^)$CYsbR4@<=%D@63`A4^B5:lN]`AlH8.*$%DK!2M#0J*mn]qBfq?mTI@g6kZ_
%r75#pZ[@4-Q;=qm/SF?7n99i,kesCor'q66kd-Mp'IsE%_P=THQH3UWJ7c7]Qsp2YVC"tK-O;WpP$Ll&3-8NR(JCki@Q^`:Zd/QO
%Um2Zfja<SHeXq!UDq+'SenZ)33\Z9mRQrfBQHl)@3O(7SA!<clk/(md]RH1*A&S&<7s`Fs&XrAq8EPnSnngEsE`8J3HQ#Bd:(;9b
%!+t5YHNqgia2i%e_R'1qLi#c1p;^'oPAX7C0.<34jmt5sGVa]/Y>g,E;,HCZS`<+"qjQ:S$)V3#e?9BiJ!1h8'>q,$VUB^F!R/J$
%%l5B>A!q>#T@FU-Sf2U0n[-X2gn_C#Po@&N^(B6"?2!isWDkmU0jNo+&QuGZ_rFag\r2[o0GU0S/1!(9nlJJ;5Dd*=or^O""3Z26
%0rr3L2_=!p32*i@MBjQS^;]TLVanJ?!+t6P>:^p\koq:r@JPE3b*#?V[^2>=HY90q3F5lnH(o;+<j,iKJV1#Z'HAi\7^F#RP,R61
%$6H'"UVXq-4I4c!okk,$HGE:nG^/eu@L6Bl(^$R/eJfa=(^MV2\c538h%U_%nt5_"0gHmTTUE"(Zl,\%9n?7r<J#UW!uU)s(\XkK
%o&q;uD[NF8[1\7I$AI&2CIB@8(Crqah\90ICka?_iSaSA`cqd$leeXROft"P@c?G:n!_'$>g-69V+d+5^eDC^ZgQ'o;0j7iGp^\[
%n\ZnhU;R(EigG,t1K!.:MDp6g-o:dlJ[*_cUkd:Y\L8,pIce0he")CpR&+&P35A5#q(NJF4-h$Kq7.n.gpD>Zb.g\UZ]p@\#FL>a
%=Yl>$&ke'T])3S4J25G>R:Q+O9=ZHjJ=1ZX(/%1o\k&3M>a/sTV4#>nRTPM,-/nX`^-"&LqV<,)ds&^IoH</&cJg0`0PgD!k4nq9
%P@#<=RR[5j-Or-g2p9G!D:nGaB'+.$VrX:&QYS=A?nU'nEc!G\VF%G&eZ!(sY0G5!8JZ(BLib9"k#1Sm;Jg<Qc&K-A<1?Og=cmIH
%*MJ[(S7XL8_C`b?r22FQkA56g2KIts'OqI3Cc#e"?8ahqr=tP-bP<5-ZZ(Hb^[Y<([[+.-,fn)4?cL6NMq":qq,\*0W^C]oR't1B
%jqic2"R5&%%+4*CBRXI4NSHit_jqt26(6[JEq;5EPUaZ1XAg):"iFUk=:=]E>V)J(e@dRCOjH#r/YUqk>>*=YPQ%HR9mVor4k]3]
%F0'bJQ15s/nR^-BUXN=P@6HKYqshIiG[G$j^92DrI[Fph:oI^NWXVk5#H\hMT0@%r@+)SukQHCO%aoIcnm1G&oh>dFCrf+F0*PtP
%p9baA>fNJAb8WRn+![M(3=O1c)"bqi_lsiW/f;g%KAh-FEoL(l^0YP\>QrA3@X&5[9PjTOi\0t\_uIXJb.Do=RN3\7N>iJ]e?SV/
%Ie/bP'=%R!$[5k$pODB'^[qE]q>Ti1s7a:?s#^8#M#%&="RQ/oP/\!9Tl%eKf^h8`q4@&&chAN31\(IdI*[#NkPK2S,B.hWMXtBi
%;^2KU6T"=r+@]m<!Lp2laJ,iU5u1jG)`)qP8;:1DN;UPf\G&sH<M+4f2!KVh7o1g>ru;P?\TE;JU^HDkgg(j$W87^lbZuF8if[YM
%m?i36daZ)q68jmdrJN3ds%_*iKPV\QRn(Q>=<X0socU2LP%>AE'!S5(lK7h=[2_"^lToNs>0g9)DYQt:kU`#k234Bc\?ViV0`nfZ
%^IqY1k-4<*lU"6Ho;:`sM#g@JVGAok23GI/*2^iCf\,'aA)1g98l!%f?,bdO8bOm[UeqL,U_W4I#YakL\N-uQ5(Hjee]=]!(4_r&
%2[*SKPM&"[&IWIILscb/YepOF^Gq`?&%p*g0D!!&4Rb*:]Z^I2o>&OFK8)(<"C>%AL>srY^rnk0Emr$+H%[8(<?(l-!7Eu[FM3MN
%.G'!J,=o-YJ%-7n'CW'Lk]IQRjXfmq8uCjeCnb0L*p-*__l(s3#3)0#T(I@VinVp8l1[li_8E)+1GNZPKJBeL9uKggSmO6-=,tm3
%Nq6JB-;-GGDdf(Cm24`*S1DT.EJir%E=.uk2"%h[6at?Z?^fldFAl_=hDmU-a;:n,cG+\gB<GR07`dJsVt+Kd3.$Sld,rC%Dif7E
%B4m3sM<WWE@SEMc)HMac/XXKo?c1$O-5hPHC7u#i^MXO9?_<C+P<=?1/G!6@!IdL?9FFn)k6t$&Aq&dSa7LKcm\*@ALGlmepEr)1
%RgFOJg<t5]r[\doV;8+s2[.F:DT;`(Na6m^Ata+^_8o%V0E81\EO'Qsa3OX!*ljWVkA.Nc(sY7(1!p3p9ZJm#)2Me@JRKV?R)^p.
%<EMp&<p+I]WCP)nN\N,*N+P7S!n'2g0amm&Kc'?[WA,j^!&O.UHWJH/RecN'[1k!P>hY/@W87EjhA'%)>oaL3hd[Z=O&itDTX7[W
%Rta]0NF9@>HtrnN66'X8VuDZ1dP"@O]:nO;NgceV@9E$-/'*9fa/*f-ip3U-V.+q_/fKVbM.cMH<?+Q>g<Dnrj-qfmeMmWFH?2p,
%k&!]]bE@TaIIkXFk*ICmk:]JcA*a'uY7:>6JY1t'rNoS%[@Y[:?n>Z-dS9*(ocS8D1Mt`rbQF^%#pm9+dLe_l_p6=u;r$V%P4YTq
%:srDb:aS?e.i(=G-KQ`f0XI>>eKh+R6X'oBEE;5/`StC'XA!%N?CTbQr$7!$kJ#_9OEkncmb\4^m`j"i\Y&BR@d&uc2`LKnk2+nK
%S""bG;ru9K?uAu'Wt_GXT8Na#gmsqHF)uPCm`s)5\[afRn'8VG<f?/6HlO2pqf7nZbLn]4bH:*:i6B6XaOGHUnSg8<rnNH<`t7k/
%ntZZg=o3f3(uF$F?AU*m.R#^FTfVHCJ8(/Ro8>fq(M*GiiUpt=aLIY&l$2++4#N0N-9MqpW6WQHCs0:6Dk*-bL!._o'NJrE6E0cj
%,??q9dJQk%'5gnEDO?El!T6ptd7c(j#%,68SIrl!.j-1p+.0T0oZu@$1n+O18X"(t^P$TAKNe;WQ(2rI(?8R)"`1VNiU9s2iu@X!
%\1-WNjGc$#os9#h3%F"LffEEhB?(%a&MX3sLir!mN$pP`=<FAfUG2@!Qsf%h8J[Zh\n]:88X$"\(cepA/X1.m&23jo9385tqd]#^
%2[,6Uj%cPG9V5c`La.%\fR1i,=:af=gD7Eu4"%n&EEC8[WO1es#ds0F7B^,ToJa<8[Z80.iG?"&W`:Rc[/fPM\M90C3a_hH2(&.S
%e=2qRp$"Alju1WB-Mm2a6q9ii9smhTRl^52?P5T^.VRsRhXg+"$'YSO(YI&q(l4jf0B3VqV/_-B8IQGje`hZOT56Uu]D&<5#4n^'
%f'FY_k3Jl+`DmK8q\c8'\]!Cb\s?fn=N25E&(AKWem(5\Q/hNPbG6Z/3;bMqatXAI-=&XOB90T0S._H=XrF982bmicH2_B-dr4m&
%-9cnE/>eRS`nn]iNJ?p2hW-JVhi]n@2m^f\Qbh!$-CT0Nre+H67c]b,UEI=o;g0s61mn[_IN;EMnH)!PB^06W?gX$HORf#`6q(5J
%`]^qS[D"SW/gjjsbim`ofi#<N4#/.PM%4.nR-],-UO;(iQ<9c5b9^aVKJpf99H^DEU`@_3c,\FT*@>*8c<P,?cfggCL>BTt%q;%R
%S/Qrt4ZPIk1-pum*Un-&qM#mPm9*9C0%FS`IeB0ElSNJd2tNqeQ=26eGt'!tD@?XF3c9&?X7cuqPO2DIn8^"ta=Ip+b"ZQ+=XUO'
%F#(@A1=KlCQt:.l3J:ZXS?kG_k:;Ou38^McJM[lc,fi/Z2VRgtc\_C=AhO(&m:/3Kd)WnP(/B-JQcm-6&ko'UF'T)4/b/[O9<nCh
%1UuS6+>'F6FR<V>;J^h#&sq9"3n^];%]L8Y/S&.PB7f_Q-2Q\`s6\G5R4$;jb:WR=^u+lR'1s(AVa2M*D`'-[Hhg;54K'V;l:%0%
%\;(B9Ra%2BV/qd"Wp4T3>/!MA>D7t9O701t;JJN$7/(eP")('a#7-(/E0W4XFG'U/)S[I\^OH0r4A4:q8%<iU62^Mj;Z3r=T>6[A
%+,D!/,h>-kl0K(O0[Cf*Y%m'k>tI[/i)c:7K:fVuPe<f!.G+,rK<4^0j8-?*nK/[7d3$*">ILRN^.k@oR"Y))#<k;G^V3V!T<o;h
%]u5\%>,(cs4a[QZTM^S')9rKma[U!ra'qHP)S\Ikq/Xhu"p2m)l#gUPo&1nfctLujRS#(60])egea%\Ra8ZVWoZD:<diS1.Lt\\#
%]9(JPZrHim\ffSeLIXS3:9.rJp&Ca1Tr3"b#\qeuC8#c=r^/<q,cXs-\JH$3G4;b0_,3Kdq[Id4>aJ:K[Pmrj](ndi$krJ1-R4oM
%d`KXPV/c&h?Z0b@e_!h=&&rq2mFa>-5>M/TSX(c#P.C*cI8lQ!oI+D@o:!U"Y%[L?'*2p'I.fOMQE,__@-hH,4Hm#7Y9]!T^(;OV
%U8=&u\1Src'8n[+@/%['&"ug524E'rh^B6e!m9hc^5_UOTg[^P;>P2Wd>^U:2A^H`$(CXRqJYlJdJ.g^IsXAc`QF1H5:9gO:BI"B
%b,)uALiLHo;OV3DM0gn.I!GkIZ+`2`-dqhUfUE+ah'2T:*,&gqFa4$Q-3U,(&B4NA=e8%B>@h^o[dfH=bt")I-NkKR2OS<&'Ki;D
%-<X0W_--B&?90/Mn)VU_2jtR.Ju,5qGkh`V-c:fajYd_B\-e]#,+2NI?o%^GT$1Y@`COIc>bneV%bimY22CgaT?,WRVq$1.R,G$9
%'7/ZF1R&Z\6$c&Q'4FCf;PRF@2Zp&tYg_CF;s:WGrSUknNe>K2o6RC'BU&K+HLT<HHq<nC%,[Yt<PEJ+41TaL'QT,.HD]!)^.]o=
%9so@'FAP]Q@]ik8Pu>:hhl'PESHV^U,grf,2=WHZBEn,>'XhEfhXH4U'(r[t4Eet2<QFfZ?4Ybs'Z#j&W9%e\SX0)O<UOC8`oqA(
%^+V"tgfI]S)S=_'`J#a%;8'$j_g9Z8lJI64EU[$cYuN>4o;AF*W>TGch(_(!h/sPHbiUG5o8TLT!]niW]s]/@AE((5M/?FMAl,0I
%iSg5^8-#NhXt]CZTQ/@K0!AO>AO$sdMC`4<K7d427Z0"8M#s?"DS,_eGq4@c,S$l_p4B`naHV=M#UT"%hh@N?e!JG[dDpG*pdr#B
%RP2DaC9;Md_#1b9EOFBJen[K6%-k?JWEK'=4<^Rb_(<%oC3HDnLq5^HY0'U^EY<#%K]FZ.;M)D:h\]0eMc:sj/!h_OU=$&D07uao
%ar2Wt`2dor[9<ubU]?LQa8fcAU6PtG-$Fq05rn)K9qp!cCRAO1*aQc6NOt%B<ini5f1<QjQ2HJkmm4Wf01D3SKHWBmSS;j;4"VuQ
%&0WgT8#f'S[88L+M!5HOpko9s3FTTU?qSfn[?(EiiO%>$`W/r<*M]N&p[H-?F\[N\2i+LQc\!=WReE+$7mZrb^.Fk-i'Dc=fAO]%
%c(&t5h.e*?#3U0[Nn-20>VL8u*XsVgY#.SG?D_qT>NKl2`bV;QRO117pI9rj<9qMr2uo,[^&;]Pqg#Y-gH%GhA:]B7_SOEh3%tu@
%9LdN;q61YL9<G7N2#4N4,N^]8(tf[53[cY#>8l;J;:Ue$L=VJ^LS_b;1@b$?crnZ!;duChbt*n1WCjQcFGWnL$!1\q%%'5/*Ai7/
%.U5j8TU1bJ4rbRkQ9O`@ZtoF0,=;@cCLP"P(B[-B1XMmHlTKA\:/G]tc``CQ_E(1m!c]3nL;N(Za1JkU[<e8c9as1e:S%41$WT:A
%FQ^L*kWTrPV:m@M`9#WXCY61YoV`;bO]O,A/rpm[:/\d^#caC$&?j+cY"5cifd@ofB@YJ%b#pS6OY-Njs)SG`]I8bO=f)ta,:<=\
%/i]U<MM]e(M-QU9D)>*7g77e0.alTuc'/sCXPS9".pDk8\>*L2EOD:d5"d2*Z%/9m<n.6'1%d01lIhbmnjX-rNs%P';.r*mcKe#)
%iL8<';L'6>(P>3A]TO@Ef(FU4*`(S!/<a?sJk/067G5CV"OWOTOd(bi6i`M_R.^`P]DZu1#*DBJ2%ge6I62!KK.^>I&7DH3!#r27
%W$ON)iHe](E!#9U@5qmkLUC;?k.8#PNaUFAnVXEnEeNb5Mn;Rt55Jul>YeXJ9\=nrY#:tP<c)0MBjqW8:fWTOa5.d=D5=q`eW3O7
%YEVXDnlPY*iND/9`ess=f-Cus?1-hp>LS>S*r:e8e_k2<7iL4I*AY1HEfB32?`@!L;"i?Df*ZBP`[K4W2-Z?_Lm@q>Q>.hsT"f*B
%/JQ5B8j.T]Ta%)[:k<="P+ghEUksCP<NVV/GT/0/LqjAJ$L*TuiZ"ZD!EIlD)Cb8E8/q8a)6a9'H?b#ZDI:-(%NQ[4(oHn(>EEMc
%X765/G/YWb.]=Spgt3[_O.o=N<N%bNXN6uQqqSZ3>r>::39rjAPk2:@W9.InC5l3Q,#8tNT<m<Qlhp%RLUtJ8r-_Oo`6T]4_%WT#
%J-Ts7")T;jF#B'kA#0L`-2H7G2*9MSA_7)d#B`VP_d\O=WhE?CeD'=QL_@u_buCr17V[!7V[+0!X&P/@",9+MTjV-el^&'dU8"O'
%E&\uX:\48!-u=)SMJgI:Hejt!k:j&^e<Z!n@+S'V_Zs8;7(.F>:@$_ZcTou<>,R@"Fc,9arN+`ClHI*2;3$="#22M*e7f6W_ItR&
%"Qt'KgW&b-)7PkcQ,rfV:)p#@0m+MLSKFh?CSG2]STP##4[QD[*u69lQa*r=TcFcSL\,fIfAE7om:ZM,-,reHUN?M4/!i`Q-.SsF
%$IpjbOsm>9<9o$pl_lNFRp;`@MW=<h)lKOp<IWH9;-,4V_ULR%mW'adn6oDsJXk-<IB*t@WW`mJ%X-RT@EU:4h2]GB-'7\nShIrq
%9&qKk[0+b`D+)?tX`i[gVsDcg2_Y#2FcRh7JnklDc!lWTm7i=354.JOc*Rh-m,Z$f7A^cR/CI&ASK6&%"U480j(U9:ghQY?cS?li
%G7Pda\U+QWrQXa-;Z/oDk\P0WfA,.W-L5TWjKeINjl;>Qa%a=U^%_&8n).L;@XIpmDXHo-s%XnB^Z:R"41?#had$KHe?*BPDB8Z2
%q+&=JNQ:].4$*=[X,`7]C%p)%RJp<76,+2J-^i#k':I8="Y//c?[qp\8q5X1boaF/'R$),j!K9"R,6sMHp!M5a6sBTpfQI8C%$aY
%UH_cpd/!XIGPLiir`X`#O2j*$PM<)/?2ALF[2*(4=h<BIl*%_rBYK``23..a,>Zk8V-^;`k`9kWT5J:oqDWeLKobP(?QOZ#_&mt!
%jkC[5ij?uQ"WF#qk1Eb+$JX7?:CmGJhE/-'Xj^cs@JbMVPtmaZO7&C'Hg?IOj)9pRmB+SQK@YD2e(3ccN=WS+gJ=/VcWfOE?8Z%b
%PIbB8XJH_s(Ii;_gbWu[5&=n>?L'9Erd22!X8^akSs@Tlj7RWbNNM8fk2+)-_mL%'e/WCcBV=kFR6ol'bP+mOH$ZMdX0]<d[9brR
%68YV2B*@MekF\aOZ4p>GfDpd=:?]gFbKbcH-CW/:UIUpOEBg9aah3!#1B"NRBK<DADpdP^Xea7WI9t)[]R6rk>^^t^8`lf>-$-Uo
%]_hKY]2BtB;4VS85]>jHZ38/.bAZXGl?R1Brq=Wgj#f!-cB]M6h,rFcgXRBqHW4t9[W].S*V3=4nFti7/tY:&Y!$UP?+!:iB,g*1
%]8nJqdWlEp.bq(c%o^$3n]9O4J$tnn]WqM0o%ruE29W]0TYKc[cedeZj6=D2WHPb9If=6TN:?Xc/[Ol[plO5ZmbF]-1?HPf1K1`K
%:0mU#j313K$Tn4=V>gj\ZLHikNP/Oj+177JCRHd7lq(BaYHL+7hEFY\l`#Tng%n2pQeC,?fS`jcdD)*:s%Y2LlKcP\o!sql`M[(,
%akRhnLprsM-6GBd@\sM?@B4T9/L4ElhgS5Tg$nGaYmY`SMW3KX:\_<,]i+O1^R[=LjgE-geT27^ej8B=jlF;LViBcsh;!JMQEbV%
%>]P[ZQQI4"i.B]&g6:U?U[j3$lIJfiH0>!8._57^+d9S9qXa%6qT#_AajfSOC@^5,ks84Z3dd(>)fC`o(RqmsB'Y_G[$U5G90.85
%5:9b8Un73"n!QasgNo=DGa82sgaqrOW8rTm2fA3F_e04r8$=#)-QcF^[:En0:+ht5Y]u>d>-?aTDBF=SS:%nIqj?/!W%B?gYIDs%
%h>G\mErXP@C@Z>sfh&n;9p_#54*t$!Q1joOnoa9a6Lo!dmT/oWab's0oC;2u2u38<q.'!=Z$eQVqYK;NZM:kO.sY0C\=:.0k*sK9
%AaO4&C?+-ZAG%)<,l+S3k$,-:f6Flggr[#@(2K>OL#pP<o"rPggK+bufgjc5H=Q3_K!q$'>VPia.iN$9rjqW9_:u`<ZEUl:q7,q`
%G5hKXj8-B+$e^H)7gn(DT3D[bT6A?b]-!Xd/0#AuXG*#&(R9\Uc.BuDmkj=nA%K=WE,q1*=ZF*hU!GW@N.o\1lJQE^p1^4Dkj;cF
%k3Z6qikeRkf&F".k[JP>FS]ThrQ'8qW137g7=3]m>P,)hNQ(d%2U<-\^\mqW0t72L@.EKD[_93Jk46@JiPubcipkV*l\k3I=)Ta@
%nnSVkq87T.0fVD/>5W+ts%:0[<aKAk()tH]o32S-O3VY!^7.:#[J'F<`@Yruq:Ahoo$u8Bs5V51>7[@XP.._WrV!@kApXF,hV&qG
%f#t[b#IiQc2P/_#Gjk=aXo-2uLKeD<cS'0AIVH0,eXB939?GH0!ubccq<e1LdTYu1a!H-u?WhE<l*[Abqo]M:1>:F/dZ]S*(JB,$
%+07(8\Z*VBmhV@1QTg`h^F^28QCOeT-XR@MC1i7$j^^)a/`48n^0",^?e(GoG@>Q<j&#c[r4%ttTja7Z33Sr-n%HE9/0?P&IB`YK
%`KSd4]N2>(cNF'^E[CH,[G4qmI<0bGnRhanH>r??D<pkmeEtKsRicQ]Sl`&K3sS9pgP6jm5.^]iZr4O7\TP0$qoj>pG5H#ukN$gX
%o'mqq_qP\D,ZdlVrnA1.G;`JCI.`pY>MGWc=8#0SXrLN'Q<-8!bSO<;cYC'Bjc&?'1c*Go<c;W&_Wni$g>T'D]DHR?dH<u6ouX[J
%A+_Nu=^6CP/Gj&P9/ZNm[Iir*_lS;;HhO#,gpa[QWT=YKGFVI>Dg*6c[4^o12/`YB?7]1LGMZ>PcZ`.-q2]_P9:nE'Bi\"nXKAXs
%Ip+Y@lH.cBdtQ8Yg_]?oD?"LV]_5t+D1+"NcraKK]'#p@RL:cS)WpJ1a^XD8Z+[Jnp\oL3_qhH7G3SE\Ts8k:h5<X3DW-MaFnb1n
%o$."tjnNkEIHf_E]">5=?;L$>HaE^aHraO&D1=Co^O1F8[sj`kH*Q3eJ$5^"1*?3fcLP[0p%Y89@8bEYYImH?hS"ChQ%/euBr_*4
%;SKX0be/FDrT25OHX:^>^6`\"rI"'AUM8S3s6A;#HUNnf]l/[u:UQIQoR4u3[<SZ6ZLci)Zf^5@pA-oG7QZ$,g0017esCP\G%he!
%hd='p5<)i[d!,'7T)PbT)Z$G)Xm21LLTc]6Dl'gL4Li(:4KNFcNT]!@mu4`";GW6\E9%qpFr,(dX1>!_kuaunbcLd)Q$MS*Ssc5K
%>E@%4]B>cnnE*!2@B=h#m$dV*^:S2EHagFk]tJKfBa*sC26;OXX'r2;hJ(^C)gB,IP0GW4YO3F4g4f3@c2Mn\NpGK2PBl56qNn,*
%G37YDF8YUm`&TEQPaual]4L`^8'>oNe`&JDglp(1hn$!5)OG?H?G5AWMGQ3X#B.9P:S64NkLkgU]mmQ&n!0J/rou-X4>qR3G^ejh
%Q=&8A(L%^Mr@bu=idC4oh2OLmG:tj4[MP)P^)fGjGSaW72G2"#E\u#&Xlng2VNlS8]p[("DJUBW54*5'h`SNag!"5MmV=>2pAN%b
%YGM,O(PSFWH10eYrGQ?;^H>VJoIg%!iLSunKDk^:iPEY%>L+D@T%W8D]2,$M+$Rc:IX8O(r6EU*PP9DHJVUX2D>DTUHM6pW_u9G0
%7gHHX_ajOi]=CH)>2FaVn)2=$a(a/<rV1&;.J^JuF]h?b5C^7<S,!SkoN(M<H2>e]S$Vb=g\HcOmJE5W1]E<`<T\R$X(OV/Sh+Jg
%othUVP>1H%0sbS(pL3cofmK)K4+6Z\GO'+HQu`f3)nBSdWDr<7Ru;Bkp1<]+le_3MdT4B"Zb#hp@kt_t\o[O^qt?M_NU=u;(]O,W
%E;=8GoUsl^P2'/fnAJZ-5!R_'h8_3F4tRNCSpXaHXZtA6kLlcD_trKD[hi6ZT3g>&TC:PuIf=:6]t4&_kLG>SG3>q+V#G2<AaDX.
%(bDgQ4$(+No^(R[nF67r_2$&%#OamlISLr@:VsHfgg0I8mrfeC(c\/!HZV>tBD:EYLTc'*HLgac_bqhnGPnIOm![,p-MQ-Io8ERS
%Zh7c,NP2j:Is(d$mNApH]m5_:X;M6b(0Ynm^27044u=n_MhaBT5.1qsR\-'&P+U$'0>-];_M\MGAVl.eEOP#2^0J3mW4dRhIW]#3
%p?k(iH+!\;g!RK@q:3lVHS80U4s-lWNfshmf8dQ)8,&&T2c^EKc^SRFYO3*20>>SVGeW_5rR'XAYNj/tQ`of&&+nJ#(D$7HT.Ou0
%IC#A&Z=oUal1;5_Dr,h6$ZG<C&%CCV:Hs8UHa'raq=a`,YOHGsb:WHomaJ5cGFq&9hYUitFS:1D@e\:Ij1?8\pK(S"]-$[O`gmXd
%c1B7'MP!ZdIU%:t8:Jc8Q/7#gGZoIh.JYF#9Z)83gtt*io]jECm\f>ig&5aKS]/n[anKG?9CA?P-`L1N[SD!HFSDU#p1!F4WjU=P
%P-*r7?TrsQ(@nqX:-[k_4b!>Vs8MQI;80GZpu6Dejl,1_lf.6Je,#WaQN_<Bq3m$e*&[@!L$J9#I*oKOrjDNqT[es%Y<T)mehbP\
%%Ni@0"Qf"4b;8bS\&-h7S%#N+bHo7O\S7Emk6FN#-g0QX-SN[[Q-G6)HWRC(b*VdIaniNY=aKUQj$TfO^C.sOX)hCqq0M[QmHSKS
%I-8>B^K`Bt^<WS2bJr.;^3kFrKi``TdY"TS[oX*D*oB2n])$5Z5HERGnS_L;DX/ApKmVO+l<Q@!X?LuG^8YG/5.k5Y["H?OiR,c6
%>'2FmN/%/jI<fLUHaAoCW$fhh:k,#3oX]Kla*lB<>rqTWmpRRD?pq;&A.pGTj+L]XHZcBQ'K2n-,crbhQsl'"NG59moVTJG<V!hC
%A)tAr39[btAPaH%;>tpHf.&^P[;qAsa\_c#9TN*5ZJ9,j$Ir1Rfb60pWE^ch<-r#5"+YW;6&Te`a@EZe`_Bn'_bRbti])+hT(n`@
%l9Si$9_U6MI1iE;7`I^m.!;')f-H9]'T<MgL0a1H/(ML*]m:FSWde(1#[Mp>B5e([3flI#A@#:)MN.\U@C9?Ta"7Pa%:(4CDq%tK
%#0tNDT9h%&GHAhY42uf`'qF[XoVdGcE.cRU!c+]NB=9lmK1MV8gTg*rZ,3`Mg_7@q\0?\&ZWb++DXRm6YqR/cFC^s%&6cYAYFamG
%]D3O7Hi%>1Uto_K"#LL.ZIMR02cP!YKV[%!Bk0h7fN+[N@;Z)!7>KK!hFoaU4(PBHIO=^[`np+L-!:>&r_`$B=QdL^#"-Hd0&I0S
%*94$@&?92ggSklXI.cK48Ajs(dGonu:mQ7,_<g2*N1#oX4`Ycbfr,jLdVcc<'q"G9j#ACdY*%QQ:8jA&/ig2sV(C(d/ng>1j(ZFT
%O$VhH_:>d'n?D"o]l^ZKY@###Al0H>=N\GRg-pst;.;N.qhM#N,9ETkGpk+[R+:`"K2FAaArKS$G)ddPPt&7BEF(L(T&+HDCLd"d
%,5Bq8Sb4f,R)CDKo^I-j!of-'h@uBOUE-a;_5>aTo-FBp[1;K5UE>Ue(enWCWJA\e8ihKcD[+5uXfKoC^/Q/Am1?]5&&cC'5gJJU
%.[P-gR'b79-R3't'Y793W1HA2*OTbA`Mo9.]T8bN9oMoL"`[52ON^6^LViTVJco>1\1#b;#SJV@1-m/ebIiu4o-1+Y)YripNI3#Q
%j*d3IKl-th@/1!JaouK9:Aarl.R@<pNp1aTg3%Q9UY8>iaCn>1g^_7?i+Y`[kP8"%;6!1!7)X#RS"P>e*E3:LM.RJC'nSi1cR.]d
%jh.ttJ^\PE4sZ.W5;[=N)bkRTP2d88:1l>f)NR_OU01RD3YNu#'!9;&/lG=Of,p^E.+CntnQ(Lc[FN!9$k7:-bZB\_<Q6B2h9e5P
%D37F?oM'<$\eP&[UGg5H*]b>uM_7q97)uuRXiT7n@aW$F[_k,Th;,,`:/=Dl?1a]Hl)iG@c9\.Poe(k=7rf.s^sSo6EE9g1mFLrP
%R&fEMloO#Z1)uB.Q]D1J'"N%^h\D2WGLpo^g(J:<6P/7<aDGk^j2g>-]"2Yf^Kj't)d^CcD>IY8FSGEgs/g6WHjf(SKu3sK[m>4K
%]\:IR2A/pbKPF0D5s(e*YM+g<R-4iofAgZGhYr@'UherNJLSjNI*52s.G]+UbEn^k;SM7.#/,A\DiigDJZcVF\m@)a?%MC$2#,4M
%.io6$>Ue<b'_&#DrU*Hijg1Y=0t*bL8rn@6@tP=bb^*S*2E'D[1)<%/f8!>K"u)Y*Km$V>H0_I(1huN^lr:]_V%LE+X/GeeS?&:f
%YfJ^\b[*?tSHQ(tqm4f99=3ud=07\7I[MS,]$]bbr+r1"bXMQ2<n^?W19LeAnWU"8DNm!7H4kOMWpE\W8@Bjh&#Zjb(<u@cWOn^M
%X_#p)6qn)_q]dQemBufi3T;_SRKKs@9AbAsM`dRNOr1rK+4olEU8R<JUSjo*b<^QklX#=K3o+h\`M0Rpkh]9Edo3\Jil6.?[]arf
%=H9$E:##-$R4^LJ3\$OH+%"CJ)2:csA)20'*nf>&5Q5;l1rj`=OeJ6NWp2Qu'KD-;:a6U!VA.Z.JlO>M[\_3T9Tpsj^8">P@2U[4
%R'r]C10g7_>3RKfn1[-jeb"O\d1F#WiVA4lcunWpiY%]?jqqd/'4@-g;.$c&dTHfh/qL%Ue@V8l4PrpOVO"N1LIt5nV0SqtL'EXt
%Hdp0KiMSf]0GB1.0USG#,s%%L>?p1?L*7jtAo^6gF?Pu6>l)7DHrhd00JimPV1l6<eWD/[glu]'1^AX9\D`i\9/g[N95&<V38_bC
%;2M84:,nd,3h@$p_PC^VeM&,^AND4oES%;S0S#0tauhNl$Y%1,K-%6t2X[9X>.IhHU^g*'Mer52@m\dp9Z%HG0cX*Y)V+SA#Y"EK
%=I-AK.j7DfX6V$3<YKE/-phJ[D*#8-5t.97DU>aZ76?g7S%'*_JS)@F8fO"2&5EZWc3'cn(+>Tn/AnA7Hh>[+Z"u7&gZ&@YU6^O,
%=Hc4?/rN$FY%aOg#KYJ5BOP'[hm,qL36-%PAL_b"QKJTVfK/t^8tJK([V>D_h+A5UdGgNu@$lTuoWG**]kC\'=uh@'Uu$5q#$RoW
%M$e+lXqN9:d&MeRoaSc/9%+gGbjo<0;ui(J7qg+[,g,^m!^nXtSq4WQQDH^\VH?tKS&iSV7>+G`P:hs%pTiLq,Y3cXO][9jjV-E[
%gSAY[3Sb5[0]hQ-j2&[>%Jn6a8OW%ZEX?4$V^W9I=&MR[-c5L5J4.n_HR*t=,YBo!hGE5,A6#@t7X+o='%j'Mj/op?Z*>h&C]Z7,
%JV8WX&[ok\k^"'H6G^'#0N*bi@0Ap*:0^O?]#Xq*EA\nf@*%i5RK[DW+Z+gbh%\8tfYlBQ-"@sm'In3I0F;W>#%<+qF:s,&@kp)Z
%DN7<.+`j!:nneF?:mf`Q&(.j],;H3LC.RF`&qm,=ZMt2X&g7ae'k>T6iWN$@JRdql?+'-8(:,WuCZH#g;FhBRS4d6f$g(>:,8ghB
%>qD53+T"63R8T])1a!,FZHK5#GR=K]jK90XHSDO<O#h6%VKWZ$,l$'H-4rm,.SCrL+R7>G0m+*3/:\b5`Lq/%,RK9R>`=@tKOe@J
%MKmj01pa+c9<kO9d_^XaM;r_a@qhU"Z)q6%'Tu4t'<jZ*b6hC>H:Aq(L=RIg"u5]T,X!:9*@'Zk[d\,%,)sFC@G)o^IM'cs(^NOI
%.EB6P3L8n!.hq7oK:jm76JEcT_"+:i@2aU3-IGGM!6EBK!=jbEp.0,UVP>t*0s0Q!1tPj4OfF"hYTPi0XHH.I=VF56OkS5@(E/Cf
%e9&bc0MGYV?r2Wu+^Ks<a0R<Gd2\I/.(!CqT[7j><K/:1Q&q;2?*P<@&q`.rD!5XG+XkiJ^_e=`4_P@j=IRDZUkkgfdg\gc$:'/=
%U#gMU,)ck`RN@UQ66Ho#R$`I3BS;n\'#%*k[r,?!N!?*.EZNaEQ"uI>^nSu%6nXL<Zbj"2_M3n^Yh[<-83"u`N_l;W9?A?:i.HF/
%8[smT@WTA*@,et,TL)OAe;d-0?3jM_KLCZ2EZGdg[cW8Q`K6f\ST#n*/2itg;Rt9ZG=BM1QOpgXOLWB^R<*1B!e`Aa-agtXBi@nO
%_8WYqrioiTm7oG=rrNmiaW+kEAr25L%5L+5S!jeOmXjh>M4%NfBHOD;#ml\Ynm1GeT9dH*\S\k[]8m+=!""^XfFUHAQG\OL6"2G^
%98&,e&C7#7"7qGi8k@Fh)(!Nu/\0Y"QAssr@)*q^JaTLA%jj61dkdB\>`]D)`GnlaN2h$[@%qqd'7_9p#rX)N72*es[mK++$&e-U
%?2O@J$(E9A]0I=<(2t6d6l'dU%QsQ+2/%DS$bQ^LU;Sj(/oe*5O+sOjZ3mhXGU!4j$]52o5/f,]@J=6=M+Cb^dULj^(*Z,.Gd^8/
%75`LB3jU?%\5_J(40YO!&o5JKjb=6(^qAh2aQ.;*EU+,1"g/bojG3m_SdR+_O^o?X4C$8TE*H.m</eq?E&I0P8G!IQ_A@9%FG`ZE
%^ImPUWKD_?IZYdnIJ_k%.2iTt/\.`7<lsAGJP(F0/g-EQOq&h-`QFC?W+jpi6H\+o/'<VAKd;7[,Y"@5"-IlM+kt1,5S/lc_f73-
%6;TgU.QNFo1aS^sVn%nc-BI*#HUSra+^\b#E9)o@i'Cs_"N$L;)^[AR7:M]U0K_=q"rFilR=u--H#huaf_8+`8>(u[JoSof-c'33
%&4H8a:mVLWFa)1fNA2JfM+CVE6`bHb=)GI1^o_D*aHJu]e[H.Z,[8dlR>#L@`P=YL0["&ICi"tR5jHR9?lYXg9F0njr2Z#BAm*nA
%"\4Y35e`R(.>9'7'i@@kcQOkU/[AO8=Mbg?;Gt"?q0.ZdGGLV&]?[op;5%cc@Hm3qR?*6`Xq1\ukN88Ka>PENaQh$CQ1RI(Z@g<9
%D9k"30U,5]"sWN7AWVedMOPN0[B9OfL6a!p)CsYnomNjBo7BI>@8`9l2!Cq6b8qNM)H!(,1Y7CA$VOmj\qnlZ;@jV0-.:a=JT][u
%Pe6h]Pc/;8Ur2Dena8Y%r`KAp">Gt>+"Mr'=;&`]GZ"*AeUC($?2HcNo_iP'.UW0V@d)D].L^4\,kkPnkkYf"Uo.!Kq5-+%3]<-r
%WeERNM$^(e(Q=uGViqa&re_@b^CEH)/#p>#fI)CMn!gbICZLed78F,=-gl5W</6+jMf01Ve]GTla!MZ4N\*[*H_H8&TZ.#SFqI4n
%W@c0:gSHJ!&Scu,mkiXt^-OeKiG8iFRsSb]3tS!5.'^nWp9^M=g+BRd6lg1S3R:.fD\Uk/8C*ibm,'4s>tl.eQH3Zc3-13Ff$l$r
%c=/$PYruW\LlJOiA7`Zu(2!j14P-iCOk_#"2p:CZ$sBS!2QidNjI*Wk/V:T5BVmWM:t$Xj_*JC>1h:El/iFgaQjub3@r5u%EPJ^h
%]s0rggQAqsJF2d>;kg-d&D>hpj5#9*r'Q=#NDkM+@V)MMKd)gBQe6A94eiYEcjaEfp_#Y055s"DgFt`X41(5`44nciM=!>B2OY1G
%;`b%5"LdZE@FrNG2<7M?pX,9YJTd`)P3Jta&ngZtOr<R18<-subJAoJ6'9T$P,Xc8VG'bo@o\1a];CdHm]$Plm@,Q^m]$Z:gG;Br
%.%F!t7!/1AG6^G*cbq_"5qTCLiu-QIL%a^mXL[!_X^^&&G/dd's$!]I>m>^*5P0g"f_G6FMX>)k[`1lt,c6"9js[ZJ)K8[.l4/ej
%>E%sP?!ZfXg#N;+-4G`@Qa[U+csVda,5]t>q\S#P]R.T=<JG,W`gUCG0@)OT0$JXu0ecS6_Y-p>NN<@DjZB%Z%ro3'W"g(O]UPQP
%.XEHtEa.[-mgT-dqUtY"h-ghNMk2S+WCBM3Y_Pf-`h?P`3[!5c5pQt<IKK=,5k_F%C@]BDB%nYN:0K\+DQ6.EE`pIeK@:GK@_"JW
%%_3.@7NhS=rKEY<25G@[^56d+>i`%m78"*764Set41rKrY0Wrc%'Y%MgHCc+p,a;\iOM??fZM]l`!80Fo]q_CEZM-]JC-6='kJMo
%c<&NC/oC>Z*n]qr\/qMW9+9FW24q@\a\bJj#4H?^l>2<r)kL<o+n@&R6-Q)KPo&,+3`6Dd^4NOsf31*EB<ZKD2EHkQkSB!shfkI2
%Lo5V*_MjFAd"<C%?+TKf=JDt7B/X[b3K_aq,Vg2X#C;M8LLb\+0k_UeG@7WfAU^!,#1)C6,)*j%L)88X1rqKo]@d0"iuhFV0bI7U
%*Kk\)9cJpY-HDLkTt*Z(.61X*9PteKOUu.K*?=_lN@5#X]'HBQ/D&k!8/p,7T996>S!HQ=8J\j#P%&MgZ[L*g\;6I#P]4$I9(Ir.
%+h\:U'M(ARG4bh<r:h'6Vu9t"ODBs*&)&/RAhpb2T'*H/K%Q.%Cdd'S@8B-!3D@g3Xef[!S4;qD1tN=**@W:;b`^]M;l%6WUkn%Z
%2l*a;IJC%&'UL)1\U)Cd%a-n2-$9Z#dNuI[3";I:HmDkc2m%%B"H#m<2$rnop&aDV3Z*Lr`1,t];'E8&Sf7@'n4L3q>q+iN-^7`5
%Ssof)J0Hu=@NA%68@HU6Tg^g&HE%O%5$VW&;IZ#Z.a^8[*]^S;BbJtG2F0=T45e=t'H*E;LJ1AXXFqeBOBT_I<%.r6;PH"N#`t1p
%#-mRM;IVuiUWBZ!<?HCV.k+rGW@8=P@2Hc_G&<aMd?+WNBSaN6*\:;g5`/V6e`%58A\K)+"'Q=u<m.muOe'3?KBGc+7&:mN5cJHj
%WJ:$k&eurR7Ge+>1lZ]'?TmJ6&:7h4(3!'UFF;W)#YS9e8B5e=8B?^s@/`Wo8OJddX^\ZYVqDo=Z;.A/7H$g=;P[8>l!em2Z47j^
%?;_.[2(14R=&>bSP*Lhi'#Bl#,`*J)&CMOI+Uqtg..V4BOTh?`-n%PNC&s[Tcr<m!6)$<!g;d`Xh^p5T8_Ga0/K,mhBaaCp7%od(
%K0K(?Mh+PdAC&q"i6k%.fLV%/D4LNCrCBj^VunId[UOY(ggqER:"j%md839-`uTj^=Qs6L*iI-OjrKV#,=Q-6q'L7^:+DDPdtIlD
%P>goY80p^+[UY/#6RhJR11=t^&K-h%U"G%n&H/kIA7!bOo*0u`ah0oSR4:'F&m`QpZ@k&74Ue&06^NcqqFgRUl?'6b1DI5>=[Y^:
%%UW`OjIdhBit-`7LXnosMeShb6ci*/PcVe',lMo7r"YViP=&T:8="tCFsR;sbORV9bi.#K@!NQVf)r7ASTQL^f<#EYS<c4ELD+h>
%(:g*LAkG]o)#=6/Pat[JoP8,tSHhr\#Ft"gP!ZJ:m7nfsLqF]V+[=,6,%NTigYke_ZNI*;\ZdJ=EMC6<NhF;HK^$9GZaiV>.h7?I
%aAEKTlX5L4r>9))qRk0#7egX/:6PFUWCmiY*\K3V*Wj)7M0mM,TKJk;'"pQ,L<]](8i7AE1dR1N+ODl=*-Kj?pB+5a/>RUA%$1l%
%@7SFiDs^29Nb)@%-!M^KoPr4M-1aTsHK/Sp<-8oOa?<%U"nS'HOWh6U;FNW,l`r9OV2hW"H[8XXMm's7FeD%:=)r?,n\_4f+0`WI
%LT#;X:Z9PD4&Cf^2tS506P"/c<]/nW?)*4?]r;8>$1:JP=@P_0mA?\DX_n2l8)@G_V7b],+;N>J[7i<.2:E6H7j2c8k`hg_nI9'l
%CH/N?7?6bj7>CA<WDqKdME'mWUHb3bi_"i^?q]=.o$kWC+<;\5%XIg0g)*_&K7.p>e515)))WtGCU8\U,)a)D0%)j:S6VRg&irI\
%iMmrU7m3h"#F@0P$Q;NZN_Ib(!`_nB'n64]ZXN^gC^!L3M=]YA3T1gQ2,uo_F)9f8&,qil!b=KTEM5r!+;Tu[g0CAt>>Z!;Qle5o
%4C=FQ$]uVS6^OI0L$4-+7CmN1/9,CR&M#UR$l,+MOVmKf1EI@c.3#0ITG/rt=5^YZ\F^h95$LW26d?T(k/7Crjus:3!5CFaa5V6]
%T`iqs@UK6VTh-[&:J6t)G2UGUDMWFjFWcQ\Ed1kfPKbutq7^V/>IG*4kF*R!Kd>>G]"a(jE:=>a2\4u\VB".&OZc-&WY@l;L[<\/
%[Q.r<+rO6PgXbG=)+m8r_3$Q*/%Xd$P^L[q0gl^9Y,Ad+pN/T0`b/r&S(C'5lq.srG8s%Xj>/f).B.Pb8j+(U_*tN$3QH]j0Z#&R
%.'e[jA;4F5%-,'\;%AiV\nYtg0GLp/3]o6[1I8CPMEYhrOPNp5XSE_)#!sD2A1/V]ngOu"P(SB\%$n2T:hn]Z8.A[%S9;9IO;`4J
%c4p)ODMR:<-:q7sc4kF'QIMlXPk'r`.>@#H,!B2t2EH3SrgO0%U'?CkEFMO!<9P>R%RUPV)@dg@<@g>]le"24j0@(qPD9GEE3df3
%R2al]7C(u;GUNiBiln"1)6hTj#=WJ7#>;>'m<\,5\oM#o3mMm60G*2uR#"r1TG`EB3)BuDKAD<p+^>LRnhFg1%s;Rlq1"aPXi]Q2
%Ro,WT-i/D-M(n'VfGGb$#r8d9$3)MU_u^jC+V&L3p`IKb=NH%Z@mfc'\-!m*EE'm1`rT^<'sctGZ*JE&RYXPPeO7j"j7:$5'5'#B
%rA49:q[!3UbgRA#L:75"g`]BAq[G.iL<E/G3l2Tr199hCf9!%]V&#G^:\[$r0/,?h-X)A6D!Vt:!5@T1EZ@sJTLsG`IC[;sY02n*
%rhjTbrrG:C3Ym?$%tK?&7(IjcF[L$Q+h_;=<I2<KC;Zqp7AV3/AFSls[\c?6!g#a#!%?35l[Y?A_XH->6(\=c2B56CaJ+eX@)lI6
%6`;84C`)*GM?aXL4"4P=qI2;OECH=_j7sn)4GY;N4a^H?7$5Mc>res!_!P]#`_b8,3-#ZA`oIeUI*OHgmnL@l#AL->lkNBka.AX:
%4.NV2M5/V(3aM14C7G3Vr''7:UIY$P2'YLW1<>5"^^G$>Tq?.0".W9u+OO#[R@]oZAbY`,pg>ug!c4u#Cs(eRSRH_\_"WgBL.)Q=
%%0,P0kV%g.?Ur7!\8VFF,9'8/<=pe;^;@O]$;ogP77`4eg8<%>_KJmfd3iq@9m%Tn:>OAHEO8G#/'eIuF]5qRnUY];LC*ci5sF"-
%@+]3-#rcJcrX]g-n*4mMMaL(7Aq5Z9`0P0>4h8T^/+SCa/=i\.`$>O(($`4W1pL]3-(6-Q>Mrf&jKj-R0iY]aM@4R@p5:/s;U+6D
%o'#XdY@8KXm<[KB05+3A&"(KF^]onL.74,=B<Jh;!"f[)87i?LhsriqaRH!rbD$m,/-V.Fro8b"2dp]JqBIN-O\L,jP3Idj9kE[I
%=buXbL@t>g[4N];Q_nrud)leVRlP7M.bQeJ`$KfU$k@<)/9n-7Dp(uaDdd9im_6Q4kP0'F!2Lo2EWEOcam;%+**JZ3ebeIl_9279
%8/ti4k-V:mWj%RX1qmYF_"i#'90A5RU-oZM&l-2dE1gP``pQGBDUC_;`g8HR5[`#ZbE%mT%PoO8^aeo-c8_\TSH>"WFnc/gaV&t'
%KUY(Lq"h!6bY!S*EL*iYVHgFFaQ<:mGTe*D[O>u5VsCl.T?+h(?FJ_1[\7K26VSEU.&$KdFDZ>)n<]mUc3MDJ!@1NhW%c:CdQ<.T
%@(Er"Wf3]h[TZc<kq$*dQDN$fU4ieh4H&p/gUa28[)_3iCsU>8E*!Auhha81,olC`42"-V3g5@6Wk!;!;W.2M`35M.QAS.7Hsq[A
%>0eMseQceb@_*GSA#R#n9NAs'?R7h?da$ihN:7aq>uetF#^hICdKqV)X6_DGHhSq.eKlu:Tq]V-k-L;G1(3*A*Nhb"\7q$t3&8W"
%<?n"9fcEcX+_7D2i#)SAnV"pbnk#Q6f_l3JlcIk5WY1T_4,t1r6(+5]J3qEo&&b\X;4V7iWY0j&]%Zd%-ANP!/7%]&ck&=r<J<>%
%$JC1c?SSL_WV^pfktGu*ZCFZ\c1/YT,TU.!,?mH;GSum0m^^9ceWih*mtA%:G_^mJk%\pF*uFJh#U$A%p5j&t'/B^(IkcC8AKulD
%G+u.F5$arpYkF27:B'1.g88,9a!Jm9nP,j4ETG"1(%8H.f%&SXaL-.J=%YGt#K@4iSna$W<41gZ8-UB_jO+X1`+R]Pj>JkNT\@Y<
%h,A`9b^<CL.K!Dk#a.6/V^TDsmn!;&V\P\CL@TU1V(KcuOGR/PP3/@4no<ISp+7hJ*l;F>P0p9sFn'5;ND6\d'XlIZ4eYQhdnROq
%/R73d*;g;,1-B^2Wc"c;GDB8Om1bGEYGu;opb^jUjK#J+[G?K1Tjamh]p)aeqoVD@KoE`kdgBE>A$gN:06kEP9XqRPjqFeqSJ;d+
%k2D>"Msp7Z6c(T0\Mh`R=:13k@!\so:QosVY=`'GD\FD<84R8&*p)fu="o.?4&`WiQ^oRqWj/XE-WeSjEhTM15mD<.Y1eiBFB9`D
%(>6`nln#\":ptB>lt1@!]2A+aq:SgE0RRH80<kd4'ZHcg:r#X[Ef2Sl%icd!DMAT\1Ya.jA[.%VZ8U1]*PFe^\AqZ0_\+b)8[;cV
%6KSq@9Qis0baG@!6%Bq,bS@o_O!>K_9j^kmAf3oHNlD`fL=Ltt*((V$-tIC[$[p^MZ=H@JIb<k,*APV0ej`(ONabZi)5j>7>'+Eo
%\]Yi+IVu#JG(Eo+0Ksj8U'GKUcgqkp[9'jW&$[hUBGLieEIj\&(FOK_U[`UfU-P8*\fAWL1Wd/gcLcI,gKe&4V%,KCI\m\TCnIqt
%Z=NFM&T>WTJs6BM0Om;=L9uGmT<qY3q-ig<^31=spK_"'H+^Zqq5GOTM5pB]o]j'0#tJmG6_%I]5,AJZCuS>\`3iF^"I=#9P&!$c
%G+[g;"bR:_2V89ii>:F@8-GpG!@:qWEJHEG=pA>:@H+Rh;^0+#hlH!^4@pMsZH>=)BjqH/+T;qmL@::-Qg5Oj;XZB$$q.5XaIT7/
%j4gtj;L^dfoRkT0\?:ho'MbQf<K'<RDumBtin$+kM1bDj[]jlpG)%3NRDUniK4a_pZBVj)]lQThEn\smFk&<*^5EBtRqtQUKo/ug
%`0OEd)AnMSnc_h'oP\b->iZ4@ieBCQNG)_G1V9gO7A4M\E`]GV@l'=&MYaC[7kA(*F$_t-;S!1t\6NTXl^$hl_A1n^d'Qal[3M/'
%;^sdS;n\lf8YU"UNJ`4@ji']rj<es/4'Y@!a>@%VnXZ(c(t,[WDf%8#KhHCrWmY]mdr_UPrJDPPJ#M4KB+K]b3h50=.Z;S]%plQY
%fPeQu2Y?`fAN''j.l!p)XFos:rYrINrueoUGtmQV7N\l</2+<Iq0GkjA$MkGq])<GbmMP:d96G[)MoZR"!41qV!^gPJ2f-peCh`?
%+3Pbmk96?,3UbH^m_=(hjk@mgF"F]]r0WE/(:c0FJhJtY`##S88%at7[9QH2f9r%H=0A[6q&EY2l#E*p[F$qq^IUoq+<_6[cZ%tI
%=5?lg7=>CLq)B5K%B9bD?D(,MB?F,l(DDr>?+JP#h'Y/5E9da9pr^NY*]3Z,H'F6fe6'T`*\Wq"=`CfpahfVA-TjDcG>@ArK?)*O
%S?a["8")Iga1(<&EZqV\1j$DGRf_S(&2\osCdJYdVd+XUD>TG-l@gp=&sr3/NOIXFZN39[cDqRZnLZE(@+CNQQKST!%A1aF(0m.4
%F_ARa<B15m8mLf$`fY,`Gqi9I08rOk*=SU=T"<<Q_`(fXO=NUC[1!V,3p\AplCt><r#<n$]*nMu1**8M43)CSoWsPH"L'0q61>H0
%3X\e*]BqV9lTf<0cM4bk*=P-KBR7fon9J4W\$0mr55'.?gBnHpgZ%-oN;`q_']6X:cFK^)fH62_CrdL(hq2?O\al:"[T*:0:rHif
%S\p0Og'?*AWZcg,'b4+Pq8-;G=,kD:emp,E*j?oFaFh*_"F5$O3DBf]mlQ]7iLs=%Kei>>!V_t+&`H1(oFD]"5XGH%(>Fph,@NYT
%7]e2')fa81\O+Ft25Q-i6bsLA#GE5ANB3sQEc/O.L&9+IY)$^8$+XDSfi,,:g"[?:BWE;8_d=/*5)"kF86;s2QIB8u@e5kuf^+>!
%og>g+7l-CBLLI31<gTokZHR^$5nP[1$mFCkbcWP3%>##t8('ZMRh,J5hme4CU;e+X*uX+kg!OZ]\H,K&n7aXY4@AMhEJ2N?3e]!P
%3!7doX2KE8YuQYH]4qks<EXf2&?*_,o5*u=QlI8P8-*]3^m_F/p-?+tj=)&IlEh&BLm'?gcu=6Q*8-1YGoiP+hp&rV6sWl:4=:QW
%8OsC;,/I#Cc8hsQ`+k$<#.EAcBR;4t:?]!oKIdTJNoMMs8i5!+UNQ]$S9Tn,_]+o"s#'=J4C!!FXU+4]:ntk`-i@%MSH`cJ+iABe
%;Sl?ieCN^\BCAQ</4l#$]iW>K"o?)Q2I#@Z+V7iZlm7eL&?+ZqJ9lS=-_fbD:IK;*%T1c)5rO$$-0`J*>]!Bf5nrB&;ug@)aEALm
%=J>enr%+d>XZV[!oC.4Al#9bdDN70\)Wi<UM)GVp<+lX"3!,3jfE>A;>BT[P3-sXm]_E+&'slYgZ\g:1A>^3j]c=#_BP63*`Y!4;
%[&-tk<19rp1ASn!kCU-`X<%tLVSM-rac>(#)uq]nfF;jYB\*h%$6h3/;ce6&V\S*R[c`/r)JiB')C/q]/)f80q!fTI4R):tWO6%2
%RUaY5!,YkO-%Y8&AFcsu$)(BoGbmGE>Dfu0S@a2Z9QF-S6,+%1U=-hS_^VF,F&G5_ES:(J7,3=1O\.UqL4_2+PKQ0qElN7liq+`a
%=N_*0o%EG;8QAcq8.hiOl__f)dq)gn*NH4-dL:t9?*TPbd7iLd_`(E$/@KYlL%sWEKFZJldHTYHZo1NSa*:tlkF&[YZ0GiV.KH'E
%033L3E^(;0#sSKk:Pt7*@kmKS<#n5D'?P7p`!e#[\5LI;h/Yp="LV](g<g":S,0#$:(9a3\9'<V.FZ!>^*("4d>&a(O4J]t8`]+!
%MCO!:Z-5`MOu&W>>VhOnW*++.YqGqR5SS</7>:pC"[ju2'59V8A4ZDln26K<P\TLeV"-(skE5P2Z2TH(aNg\+>H;fEN)ZGu=0tgj
%.R5/U/E_Zpo=uXk=sG&!<TQE,dY\:bYq8lBa=$*u&X8Q]78bm$M@h8cSVWTQ5HF=IM<PWRk1-.\p?)`sm?%StMmuT#eMBX=%Zm\?
%!gR7_H0jIV'FQsY)50,-Wa`dYB?-f]K[Ne^Zg>4#mkCab3gE6[,Oa%e0.TG5/j8CDG_.oo0)W&KM?8tE;mr'kMAeWLrcs12CI\6/
%jl3ZWk3Kc;lWgng.Ta!*3@Clf(p?UmDp:=me"%iZ\4=rNK!!jK'*LYcc<*[L-_[5#+[64N%/UFT5mZ*$0ONAPqa17u)(C/+2X+#J
%&:%hVR/`KI5n4db8bU,K_s[q`F%(10m&-HYaQlXT3._?gXCWY94!"Bg@d;CIL-kL2=245An\T=VksUXur@[+JaT<3%T]-RY:`0l4
%gO*D,,`@N"]VZ#>k^)rGX(8_]1.A?P.kZc^3<Nia,Hm:4;.$7'Kp!]fN,&*.m2GgBO.D%:Le\+O5D^c;n#H>2.]%<k^;iT?4Z_11
%/[)>TTr='mcZ$n3k/sX#RaaQ%>r]`aId0`u5u!-p.e3l%GP(kM_(4]FoDH8(g\52%]Ug[(9e&u:gN.TcV<)em^d9*V.]bp@G2?+m
%NNa?^pXjPUi3auILSgN8+tUS-LHX"Z>"?_5IH>i%44fEtJ4mUGC2dU9!9k0YQMH<IPGN5!EH;a"3qb)0i\#8l];:TPH8g_F^!9R%
%7C`*uR1]K=iFTQuIZOr`-3AmS9X?%8.Vr'C`7)"kq[;S%*IbtC3IPrnq1glCF)LsT`=QeH]%28NeE$[^<ol\Mhn[NA"_IQb<iL7Q
%-4qp>kmH:c+kgF/A@1s\ILh=L^&V&tbuKPECWCJC2DY5qN/V4c:;fpj7_c<%/U.^Sp/>!%cfDSb<),up8;ju,FSdMFe;A,GfYR+N
%RmE7T<q;iTH<n\ZYUuuOWq/o%&^6?2+E'u!"(`.8b4C"+:JTde;,\meO"'_o6N^MTk^eKRIccGa!1Z(N#=UGpIk@2Yo#qTH+Qnn;
%.\=ki(m/^QcGS&/-q19ReT^P86Y/`kAD))W$LJ6lkVT64MAB$A*&W=r351^Da!h;97Y3t8BifCMrU42G"@Y)k`GB_>S<#(fK_8Rn
%jd`uO_[\:3LKY[r8,uYtO=L'U:9lKO!d4KH;Q6jdpS@Fo$hThNggE@P`7N>Ah4<^Uf.78,.gO[:G8(l9GE?Ce\?Cr4=F*)q+m<Bf
%Ij!eu"gun`,dICs];qoi&V.p)2dXRl>Mh(&jh2/=I)l'T'7A9lr&G9-Q))*ML9fQ.(U(Ge0^OhRm_+4^7/B-b=d2$u+B*teq8=5<
%Ya!Me"&lG$8p9[c01e;&nKbB?cPO`?cU>s^5VJA@..2qApolj"';U`5]k@LQB-W2t=?]P\W(+YKiuO3FnQ(0II]YF-^5;\>H$Z)C
%Y"-.q"$*N6Pe)+'rhf-0\]-d=rah-TOQlU3Ie7DDf-CQKk9p3`dIk7`M#M[[lQ>N909]XV#(0doQ](,)]S-udrG=Ies5PI2jJSlu
%^Ph=P0<5b-gAm]LKldZlqFDDK`^Vrl+AS/nq*K'&2T8F'r)+eFhk:GlVUXE@Wc\+/^qMZRC=[He^:e_Xc^XPr?f(2GpRII4Y=^'(
%B0;F^7:1^)ZXF]^(CI"]6</^3Kq^&0\TiuO7sBJ4Iab5S>0i+rlSI<mas&Wf[o_pbTXVWt'bA"S]hntIAQFq&(RdbUckVL+8V_@:
%h4P+WSI>AP:or<k&I3NEi*;$3nWGJYGGP$.SXQCp/,o]Hc0m4nnc,5M^N=55o(]DKSH!:nkP**b;2l#8!_2MU:EQ,L*)Mh;/mo0P
%69]tHfU5d,A\RUMl'XtnUk@^40lh`f0JlUY=OA6-.SEHh']B6sXLLo[#EJ?qG6k)^PpA=L*[h6?.@\S"mG,A_f?2iP2tXbVDtN/I
%I_Ye47fLHQs/i9XV`siA]]F/sA$`Y62R"!-8KgKQA_C/Z6O*eYn'JUA_Z#&*7&t9FC:L7`qZM:qmam7Y'I*S.GWZ4-YD:X&1ZUaT
%Z0:Jd.=KJ\3IHSsqcgpjR%"pE`2QQM&XRALJW`Qd`3cpLTH4W8gCq$3B;kFO(]X2[<YDP&c1ToJj1PIV$[/;kU>>$-CAT='d-f.7
%Wc$^`MiW3T2W#5=PJ-6@f:mlb7SdR-6"-@O*;AV\FHrM+A5UiHaPCnS,a?[8!EP/:ZRP*/?fH%].->d@Z:eHp)o]6%&&PK%*Vfoi
%jJT`E:)IYFWqcL6CG$]XnFk]JICXQAK5q_+pTbbt#iBbtJXie,("0ZDX?Ss:ms>O_j:*)$"i&dKhtgAOhbkgdg(B1JS-mdOoF43V
%4@`ChhgG>F0>b9BjU6;O=XpLInNG`!(/L$;WAg7h7e21YA8fh3A8gZhZB+.NOaXn:2R8ArhF=qO2.k^C7FcDn]/8<Dm1'\+dd5#d
%5\3t*(U/7:$a4aRoOr]'l<?RQXTMeu,f,]9IN0nI\Ih<iIucfNU5t?a^7E9"-?FcV<3EPCI'FL1T[bKTB#XRe*jU"RnBFuYHD(Ip
%+7d$Lc/B6qYD9U=#4aSRJ\A_Jl+cCpfCmip"LJ`WVp"iNZ3GVcH#FV-RlIDZH1S=.j?qEUZ%Wna/4>Mnf>`H&,'!iQp,e-`3Zb(p
%+QUENL_:DJ$B[R"8I38mJD8=g[rlcDHS=U+Xc"!?G"-cQY'q%WPJM8!_\GS%`<S_sN'2G&#3ki,fp/R^".-o3Y3)o`I4M82D\;r"
%WMQ6a8#l12pa4B_VcVoJ$h7;B<9qF4?K6Au:ZM=;YOT;pH]7FdhY[(S?+c6%fY^/1\NqFQAbJacee)qE6ZD$FSDsZ"pJOOTq!AA5
%DY`'KYP,/<I4M;3EI`Q:.WkP5f`q2\0%\AS:rB;h[e0V\<-!'AN:)em#=M.]D(`JrM)n>.`dY=]VJLtJe)RPHF<?8GI!MX=s7TYn
%,%9>sOV1Y6MNFKLD%DSBSf")IH]A3iHDoc,ImT=CEAste^%^)SF$l"t)>O-bXgYhA.-KXp-F/$&a41#-\pElTWjDH>H8P>!'L-XP
%8uOGe7kSFh)BhsJG@."3\lQF-=c\C5"Na'o4X%DB>GrJd5c[KK];Z]C4l.$skNC.@Wui&@c1[oM'W>=Kl4nO,d?S?D?+r8LG&qST
%npRc@5J-;9ip!`VlE(=rKmhGSj#0G92S"RFq%d?O]3RNWMFq[>&;=58d17=,U;l/oWT'dmD[b^u]kc`p`S.[N(RP[^*9CDr:WVtC
%'<'45RYhW%,E'<;oI2Xql8SZ)0n0sfE>>2WH94fUBu'mf,a%Q9\eo&I8;RVh-h(rGI_%D%h:1hOJUDq7>e^%8>,Eb9!sRuA=6LCF
%d-f%4W\31u/!&h!$0;D.!+Wk0:9aRDAr1jT`:GF`]8Ag]p@Ec+]A#N\pd8\*h<^\$nI]KghaC`C%`K!:fao?jA)'pd1ObDkNC*$1
%)`4mn_?fWr`=Z*pE&X\a\!jqcHU2$,ID!qaN%3l\!^U)QJ:r4M")eIuH`?Gq";Va6b]UC<JT\Brl"^7pfQUm!9g.\^1;o^_qll;n
%poDA;_QJ6a5#GKA#Abp+H\S+%/S@)`o,q*O7!!:mK3ZN:'j9XP;J+_q`ZWShF;s9[\d/&YgbhcdpHB,Ymc2b=;bj3fVbndbic%;L
%I$a((,+d)%JN%[J^2pm%%2*e>f'K"Mn$nAL)hIsI,Q0uaJbrM,G?SK\#Xg=)<+AR19l;ns_Gm701cYq_"[!@IN9pZW&.V/8h/7(<
%\&[9KHg-9VLLHr2mrnSt$Lc$=V4UG.3M/>CR/(]Cqg+q=TXo#S>T9/SRg\?C'b=2s%@Q(G<;dLIN!FZ>o8Z&(bH"$Pf6]17bIrrQ
%b32dg6+*aH'Zg)f5_Ze=cVWLLqa([Yrc">(p)9JIRQXttII]H4qg0..%n'bX\Cb`I$4JM;+)EB%OU^LM,f8Z'Z8CRWCM4g:I:s_d
%27-G+0fJ35YP2AMQU_Q>N+"]T[mTBc(L#5ZQHC-uOhp]<Lo#!l_?X7DYpI7d+"2siOD?sbEddErC&P0OqW`*Ds,_^*5M>iCF/NkS
%K;ZENr[\/u4`?UFF^@FQ:b%e6oS-fu^]AasmPsRc]Y/MVcbeQ&bI]q;41E(60VDt\jbE;QQq!hdeb-PL9W/rO`WN?@hA[!bAJjM8
%d`p\.ZSrRO!t!Yik&;$5\]9%Uo]=rK%AEr4].$7\U$),EQFsk+BJ/IcFbd7_'@l#pEm959mC+I-Z6A98hHmM&poV4.:A+-)U:8HY
%)*;DY28YQYh"#31LC-r8a&a-\jZ^<nEZa*F]E\+Fl5JFCNVB,pFRD?$Kg`."mUJo\XD\+W?f*kjmgpq(k.84!,UVN]q!Ar)j99tC
%^#L$b\!$TW`qDb4(i\q*=gj,??3d)H1X'GI@"`;8jb>'*/[)'?>l"l&W%.Z(%\@mWror"b&T'\fB]Sc+hi?NPI,5m)[VelmjQdK/
%r\G8eGQu^UHXeKCHS(:#\<?l:I-c9=ETqS27%KS2)`LUZ%&uYI/iHm]f@$f^Q!f#1DCb+*Q=?`D>AHjG`?T]BFX,3_A"t^GG5H2=
%\8L=*WGQK?8HW+:+iG#>iRhk#)gsGE?+"RF5l#_&V;Io=1aBp8L/Ne[Z?Wk@g7u2u4XK=`F!'/e)pgWGT5p\lj*FNT\O2G74JV38
%]t+,UmZhV&a!USFUMu$;;hj0h>Z>TM3P.5s(Scc/*H%+kqf+c$a:NfTp9_T0PoKc$FDn>MjrWt#kjrj;ldZrr85(rY$Il3`oo_Dd
%DPu&+<O_GA[7>;AAFnDVAolW^.YX\2C\p>,*YNR3rl=\rp@R[5I#dSMFRAr+?l^_DhfglsIp_a'D?'@nkPcHM3D^=.MBVu2?&trC
%3u#E\)rM4_Rn;#OrQDrGc9L`[XL`HJ2SZ3F,I^%Z1p&7<(Wq.khL]p#(8tRN<g_+&TmTs*]q_f\p%dk/gl1B5mg\LPF!'S?2r%0.
%X^co?Go$++HH@1Ro]@$6[r9OYO*`CH^Le&@Nm62*G%\dB[8!`YV=m5_N#mV=L't+`78`*]6N*WkkZB/e\YI&b"7FEnh;%&(!I]F^
%ij_#O=B&tt6@mj>cD:ggaJ17]TXoMhCHgHu(<cH.s5tj2W#s_c(O8TMCpP[Ye.4^OV;P&[?$W0kX"sZQ+u9*.k9"AT._2,.ZH%q.
%YFQ[%r#=l]fG%=]`[O3N_,q9CES<\o3/LGN/pqUJi%42YMZ!XljY0i@MOtY(daV)XOpEo6cC8MYE/Fil/2:sWU8YjSRWSF2id6.;
%H[kp9Xu_i5e+ifSohIN=HXmD\:03`M*(q&pdUar:+iqRCb<!R+aKR_LW,RX#Z1Is)WHbsiKQ#WC:]5OJ!`c\"A9TLDI!&2)h)ms?
%Bi</S<JID43@Dpec9,;T!9(-!i?`DHr#7m!(Y35ajdU]4Z&FYa8J'+t7Z]M_M/U_2=)AZjs4tFR2\M6(nbqXt-d"*GUU`qbJ6)(J
%klNIPoo=nRK&72qkkQIG$Sg-XU>aUgUti.pKlVF=/iBi7ll'sM7QsgiVMd%8o8_L'qLObY;&&Y`GJEs_^P&j<_#gRXCl,sfiV8&T
%QODXL,>ecGNDi0nmR*$t+]d';.e5lZq5?gcEBW6,`bl1#UOG;.9oNSllcUGA0pef8X@8q:3*r54RY.n_Z'FH(H7cC\RV)3q/+pLR
%O^N^8^cNM&0t!pA?mj8Y6q<+e+NFJ:!kH*dBoCC(]M^]fH6dk<S\5]KkrWq]M[&+pcMF5?]*\3Y-Z0?0EmS/mLEeV"=uE2nB8;?.
%'6Qbn_B=E)B6Zdke*csX5UD?s0>oE!>E06H._:l]Odg1m'X(ka9PYA:#BqOt?Ok&MNQ:2)hb!JG'_r%I$NYffT`jUNKk[r8pt_/!
%0qL1`@(5,D[Jf#D9E[YWjhZRta[qmMdOpt!T%*oB/OJO:l^<&b%C,:`_/Z-c>%pFdAAGaO-qC;t<E%i)V(&8TKk%rZXI1;U7e'U1
%SpEmD?bV<Sn3!0Jnm,`@?&J3C9,H6%.98r3S/^M9jarK:19O4S'grR\Cnjt=]gTmf5e9dbk1]%K,b!n\IYN/hXG9ZU,`/89LuRMR
%3X?hU99rU!jT*:\9^^0<+_hR\O&k)s3G#GeVq19t?5pXB-W@a%n`;VHhni$,HM,7\7.X,Qo"RA#7$?bMZX+%8F3e/)6lp#-DD[2$
%<8j3D<8f?jW+J[FOS!tkG'o<]1Fc2*TNF.lV,R"bn]h6-.lQh-GjgF^b#@lo3D%CtKDjT2$.kpJclj;dODZ\VF/L5Z\ccbpB]".D
%N+4,&-WM38:CLq(<9_4R-ZHWuVkC#Q:Y_bH$TcT?^'a#f1!>#_8Vb6+*hbSQM93+Q((0A$?R>Y_W.9$IhjS0g3DJd$$5,;[PLNqK
%O(UoXoY53@Qru01I*`k<SY<K9p\s*X5b,BA*`=k_$FU0/-76o^il!.'MdeP8e96JMUao#M#NWAoTJ)RO%`kLAP%^3Zg;7Ml]n[Pp
%m7i\06\-0"`=c>(2!Uf=S,9[/pDCVmXT@,OXtP.b@kET<qVT&mAc8eC;!J<6=E-O_">QP:H2-+5GP6dpG8$aXEA)=8BdOUL*f-mQ
%NgGDPoQM?Uh+(;)gk_ZG#qBFsdm?Ke[RPdp0"Q:%h#Vn:]^=*j*11[B^5k5[VShKCs7H\0+Bs#$$tP<Pf*Usuk9Ub>X<W#l(Zk+7
%Y*^5l6)AZtL<1nK6Eq_afUI*bbU933/dp4`7,DEQdpkMe6(FB:b0[Q:(>G"uH(ipI9BVue(R69bgp6,-3WIsMl1aYWlW:@.'3nXT
%<WLQ.l"+KfNalb7^+p.5=jZWD?`]\_kp"/ZQ?DNd=/2dbXBn7dIK*pEX.9;\'q!LU)mQ;aD1d'9<BBM2*q-c(S)\Mes4?^5B7GYl
%,Z@^FY3lg"h(>VX\.0`aI>V6,k:VIUg#s5D8MYanKX-Lu.)$M[7-hbo,n^>cVJ&$L/7.L;qBleo_R+_kW.%AM!cjO%E`f;cVk;jg
%fpo857!\aRSb-!fG6[;%mdq./g`#35+apkNWn+NK84mV&lIr_Ohfia&,X@&sA%ep$Bp-@IFq8Ipq#<ncae>!=R(P4KT05m(=&6-k
%fM5f1mGn5R+o-h7Zd)ceX`5;Pkl+r&SIH;D82(3DAEDTrBW:d(3hYX7h)ek*FR_%RGh-OR&OWkd%Z9,?a]Y3&m\ROo*ceG_g&k<#
%h4)Q4%]-iuZH[Sl0i`d"G\Eb:3JUu-)E,<<bK!9gd[4EM,rpbdf+:/gl-olN\prsbG=!"lZs/@3*)iI7iHS7=W-g2i&dK!`>Q9N4
%U:S4>$I9mW.k.rPeI1F6g()BM2j4,OH)(CiC%X7ig`Kib3:3qR_mDBVWVM8U3i%F,P@mKSj9;YN?r$a]T8pfn2G-.)6o$+4r)'6_
%Z(A8?)1p?/5Q0?^'r#qVW*HP&B1"NJW&-'HfAZjiF(h/<8TU,jSr=sl'!j>iVCH^lOd%1@/I+=h<jR@0_H%1hDIP,F>68M%H@jQ\
%^[+]u;^kT+p>V7@iZeXRTCl7RB#pd;K3W*HB]Z+k*p:2-jSibA^;mkTA".l#2Lq6$ORoMM)e:n+jmA!DTH#K=#r#?[)05b^6<!0S
%n5Q.C`G"&+$e>e?J34Z8L-BM/\rrP#$WLes3j526l%#)'=)Y6=3^sVmI0.ngNo)b31-U'$B@WcQNu^;Q*#a+EAqK,b8L;78O9/U1
%G."AaYMb&,>2<CWO`mqQMqN[b7I9msXB.ae/&n]iO:maQFV83><:E@"*4]n$B.L5p3bEtnH<Y:-Kp!>`jLcP9XE7R<<+(SrrV<?[
%E2"*K$\ku\bq7bP$]NoZd-)oZb]/)na$UTSUOsjS,X@cf.SM%nKhtRA/3^8"iM5WqO*GRbY!"AdB!$ZW+R?Qbg?)$`mg/7>a5bEq
%U[c,jlPE?qbaDLhQg4*K[?2;J/amJGrNte)(=GEkc?%S$#[:uU_^AR*R##3.PCHab9/ZJ&IZAUGY6SWVfUQu&B.,=X],M_@N&VJ$
%XK2.>.<k0GFOtEJ5#k85-oQ49/q!uHEmiS[R5D0&l&MFn(X9W/BBEs6C`ts+\0\mrNrp:qC\nf%(/3<Ud]OJ-jb/E^G71jiecQ,Q
%=KYdpG1cFK-,)_GkfG7.%AA:4meK.f9oB5/_gL$sLk4fI=l!Z@Kg<.<K;^f%_9Kf$mgT/e-k!AQS&5JBGlQEIcOmgV?^a8/%'&#/
%(FlAJI41[[;b1X>&tG(W"M5VLnpsK\78B-m_XV08lcK2^I<Il9>-*0l0X,"s&pis*#J&WY!TaSME$_IplsDc=M`/."ECI+&'spco
%--!$+;C#436*6,pT$4Ke'9u)OG,3Un'p"T&0r`Tc.N*/XodnW(hd+gcEit2`14;#@nqodbVeQC2-X#'"k=fGN6$r'i*)rR/;q5;M
%Wne5\V^PR$Rh]/9<bZ5Te=FRG\Y94mO?#[b_SD@&H3^_N5VE$=P_LgUEjh7[nS=/Ch;"m^U>f+3Q3+b6mG)^Zo4,mYZ%_\->WuKd
%'W%faWK*p$$#72U$Ph0;C_m<oP_,(-E2g-a0:LTq9\sh(oV*e`.g4+4HI7D*<L&m4H7ZQN2Z$*L`(4*=L/d4FW9"_?\k4H#YskIl
%$RJ4Oa<g/&#"=]>n@\I?YZgAi[q"LOp(E3fC+c@Ho/S,&]2Gb(;`eFUT@Te*k7kh2($u*Xi:Q)/9]R.E(=cO\kDjrmUir:%OuCH5
%_7pn^O.QP!6/&qKW\FgQ[.(!t$8gb&JRp$Pg(*ZK!=_fh=>Au]3PM9?l'8ZsL[U=(7!c04":AX!Td$9#Br)ea6=XM3i&p9NTFsR4
%&Z0Jg`"8pITpf1;Am-e(d-*t^<L[\a,_\)7p0G^0\gWmdrQ@RkoneVj]DH`o>*jDhZ"OP/R,cprks6Vk(Q>KJ9;)0iU\#og"/YW.
%H6/fAT*5D5>SoWD$79BWY@6H`TRqQ>C3rqqGWn(9[m3`r*+:-4V0^<u8risE7&4RH+#Rrdk]F'b7ZL.<k^#[pg1sq/cT13Q8VKeG
%[;il;V]*&?53fd6aBDhU;37>L]Tp&WqmU`[aOF;)k`9'0qsuPU24VPt?^nN7O;\RR5IZNBgNVZ^<H8g"F1i#UjfsRh,<>s]2i)Yl
%c'>on?]ED+"loPt3pYT06`n.L\PJ*rN#4Jun3Lq(.i<);;[s+5bZs45'+mumLHWuoj](<s^$DP?V[MC@PPQEiS*-T,T.PB/-QPq8
%9#sEobJ\C%+5k<U3$P`mjluO.UQ5V.J\Lu.1Rn)^OB:IXb$=MOLV0(]Ehj4n%tjQTpAb'iJ,].ks'L6jJb?dX>OX;UX8fOcmugcP
%d'&J%qUM4g@JCYWeNYJ<^R2M,#CH(@P'Wb.qYOgrW:`t%V)#fDYkn7Nrj`p;5G,"Q[Y+R@(.,RL+se08QCo!<K_%_jWaBof;%+M$
%\EeC28fmMkT\,)>MWS)+9RhDug$]6`qlu`6griT\1)\qi7h;Jb'NqE&&,-[BGj5kb?-"`4b29dk'<GLbIe[clhsC1aEp@Ku6"YF9
%lY-p!2-WVE,abk@D\U:G?\64X7_LeOTdK;N=E>X&3U:_6YS1NfUcP:A"r5).d!>sDBbAp_Mb-28lX<l(.!/7]-PIbC&+g38[M*\L
%G+eG5Bi>;g0'UE,=Pdop9(CAfUHsu/<Ig)I>\;dW*>4:YNj2=kr:\d9h<XrN<0e6J?/-=).R=5;[FoOdSl,mFD/uUi;GVKRD@Od8
%]?HY8.//Tp/2\JbH2+l3GD3M4Kt@"s2>?Emb6;=O<h]!u;bRh&oc1*9*^W'&\%4^*KJ0#iMe[QfKHb=+?,mA!0%S]gIr/57%lmIa
%aP<^$-pn8MHUq%?iHR(/<ntSl_m/Ze<XCK*Rp&DY:UBE<FM(+n@:ELPEB"q*qUI0Aa0Q@$Tu[cHE3kM*Ph)YgTI/uDgaHa-,L8?Y
%W+1.*"g>,lGr!`mEgO?frpkb!Xs7(HH1<".$m71A$o3Y<dg%?W:Cq%q+c5emM4^AC@ZqN#bg3eib,9Htokt3:6Ln.,;72n%iOf+M
%>>j2fgY!7!,/T3iRZ5bU%QZ!4nCZHnDea3uridrGfDct^h/U7.4AU`n-T3.*)rC;QHT(1sM1@\S]2[R2%o2IZWgG-7=RaZ$63LLb
%-Ij-F49>+,-]361&>7sf'3g8F`(H0@,SjGm'F(Up'==n[EO/0E.01KA_mY&h$_c:.?M@9&Q9%p%@LjTV(p<=S^:J:V"DZDJ:Wn=]
%^\^=Yf87ijT*c$fW@QaL2.C\eQmp$<56Y&gpe;E)?Qb'leF*%S0'8!E<$40ZSoh1YQIe5fD^qUg+fU6)a=u'MK^ZA6Vi&Yq?Re5H
%IiN`2WaI5fW$7BH#hP1#-pscWB;M]X?uaC!0k>5q7=un'<o^>Da);1\Rsp?XAZktD`<&nkmDm-+W:E=jS/d8&Pq8K*680]?M2Jj6
%>8Z&P_u`kqTM$R3ppms`am<n^<NSu@O1IZn'3Um[W5p:K-D]#tQ*#sU1!eN'8n_E9H&a$L.](*fTtN,Y--T":\"Ol9F$5nMF,L?o
%ll:`238;T:>`s`?'K_b`qf8EJ1EO$cr0<q>`fm@XaRl7pBtRn7oAQ4WWbWVc_qbn-)q@ik]*F/YB:p0dV`N&uMgnrChQ&t*(4&eL
%"Dl@O&bumiBn6a5N"KKBNY\ljn.3LRc*Z)Mg9NX$WZRbfWO+m8(/<P.5u6;n`8AXQoRf.F*5"\aH%;/r?e-:08L0ikR;U'lc*T*[
%-%Ffk@cgs$YN5Nr-`*tU/&RFs!AO>fhPUH.m87r8SIRnF^HNb#;K[6;4s(>rbY+#gJQ5e*9[Dl(D]9/rg#n!r^8%dmo78,/WK-Ij
%4oj[s?0uf!kjRI2p\CK\J(.Q_K3"aIm!V(-6!7T6#6`<42:ClB81KcXDW_*Smc(20gAuk)RtLG.!PsD(jAuRS"BO@hLg-h>m=;^A
%EBl3)eIKjY!?kaF*qocrmC7Z;JG<MIVB62l:p'QdHpS+@pB*b'OY5j2JtBEtc]2&m@rKNDDI8?o'6E"'Ac8RpI9F1kT$$;CQP\jF
%aaG(@2]++V&t!CH"s!1S8'>OpKII9%.J2VEP&T4EdgCm5qKAb3WFJ%4IR7mDfS?9ZEU?U68Nf`=j'uh[SiPNrq#K]TFFupH$J;s7
%Mo/kS]mG3g(_8!Um@EsikkTG5D97D#2%/'HrKMmFDEBuED#9=D;4samoDQJO+3qm\-VKD&Y3gB<]bmh@)Rn0fcm\:)VYR4FT+=/'
%(p.Vr'STESN[)4MegmHn`J9(uiUju>*aXmOM=IIhf(>C!?&O1+VV90m.tFZ1S*Ej_]sS]N5,Z]72a#NtIXChVhdtC8Q&Ib=I!Y[C
%]FEl]3"Ei#^JUY/2"Q5?j)l>D>^ZG$_:IDTO8*Eh(^`QR%RVF:3u(+oke*k*8rXjnQbsV"nJK8u%\g,I2EB9dNY[3A[>)SZi2Ku@
%6&5&pA!.NVc%ALhs6\`PEkM8AgQcj@q)2KM)N&"Y#j8IE*3PgK`iUk0AiL[?r6-O7c<koC]?b4)K_89F8@Cm)-q?TFkcB?\UH)fH
%8ru41p@)1]G\339E%qhO'?sKLiLVS$X\p/[&K,nPR9s$;6nZ&'1^^l`:sb`7^DcNAoAVi4hA[,>F_"b<@?koc'GJY!,m_E\H^0Bp
%7r<C#83R%_?STXWX%nV/r\;Tr82V<mZ$0OFa'ZDNnA6E\C]n"BNb8MYQXVj/e4N7*=.p.aIuP'U&c#)g[/8HY9'SFmcOGXR."iQR
%?m/-V;C?8,bajN@]A1^b.E.,Sl$9&J`:iIXhDY8Yk';8_jd^SE*.4#=Vk*_m(dlUU&+A>bhA'b@h.e?#ZqdpMed`S69N"_hqUin3
%<(d!3pm$&8&6gWca$i9lU;/ZO%%oK$IQ4e8]FXA!$uB6(nBkG.eklAi%u>WOQ'D)B_W6"ad.NTqjs73lM,lp26AM_\NOo6J^Je#T
%8!rh_2Y>%:ZM?:7P!rZ@O!:"j;4[t-ZrettFQEAsC3KG6U^]TVJ`[?2r*7sg)n'u%,pKQB^1H2>(u=1b^/N74+q.$(4I]uHpr$L&
%bc(I5jkhjoqft0c>[=Cm=[M)(aGPXgXt)Xj.ZPfP3j8\aL_h,hUM2mMS0G3iegnkNSML;(p7qb+H;MOXSdALa\dM)//na?+A&^<m
%2u+KWWn029r6!5BoXFR$r]Qn/l6<\15SG@&qf#;D(>E3NI._d6E](n3QkHN<6cV7<H40sa9fH*`-W(VaF20t>h82*0Y?KH@$@g#Z
%87EY%S4CqpNMIRE'/_WE[3WAbj:$%!;.^@YR]*X!JM1e<'a'e\Hl^Io_Y)\)QF$BI>Iu-9.iE$LMDT<DPS(i4T]:KNb9-2%iHJ.N
%S/9i%j>hE]Jml;mY#9CD]uP1!_B@d3#JH;Dc-q]DcAb7$%=BK0"B<N8GBE*Mee2V.6N-EdKpQUfeU7tn9(Wq@#g*d@5VS8AB`<]X
%+e;:sdJOJ%a8fcf>bPcI3>4[/ECAd)e/T'#'XUpD<Up<)#0sj"rP:^'HpDBfBE,4"Q(X@jo?Dao@naknVFWl#0uDT[]Q$ks3Q2H^
%0h_h=W3%HSQ!s!sWJ^\!275N;;1=*(F&WlHTNhr*]+sV+l8#/'SiM&&i\Hs*][@(DWHNW-_9_)>f#Tqq2\6:T8p4`hIo^@NeVRS)
%gRE1B^\PsC8S(+N'^tbLHB#J1.VTDnoa&jf\maf2oO_&>:#,`0Paj$K-=+[+>7X^S"@7H!'lsrD,cEmf\5jb$(q,lFQnAO)V_Zkj
%[g`URfGEE/h3U>d"4)tn_odDAQ;s3f1&Kud&S8RpLNiif0'@*?lo$WA;@E"gP+;9YbI8J-6k6&R.sDQ)pCD"/kGA-8PuD14Fu,?g
%/>hf7Uit52Xj`@K1I&S%\N^[+4kj?0(Ie":RDlQmo=='OPLm0"Id1+M./(678i1(Bk1OWQUP;&LM0.mXY2YOSQJ='5<*7u/`'=O+
%q:X';\eOmH62N#?@bkehT'Ct/JVUGKi_*U,\[[UXju(5WH?m!sholEdh/rK>q>VBIodth/T0%?.IT3Bk3MI0f4,Q#Y>EouEWYcX(
%-?%bL"]NNG=["%ri+O#XFq2R)%.$haK==67%^_B,qe;S#0)gh]"BP\TVi1T(7cY@dP65,8^TjN_6j9R@ni!<Ub#/t^d_d'1b-5VQ
%i)!T#kJHJ9Z?DTQY,OVFe@h\nA((5;^$c"'EhK$V+)obTC"/LbjToFu.gmb!1EHHk1r!47"SeYNdhU$DgR\E,?0Qejftgo:m%@7-
%>b!l^]r(!bs)/QC&TjUBdaT3l#Kat2\E/e(:(B;IL`@n<?8e@Y5r#mF?G;]i2n]b%!E88rei&/!Sh)(H<ig.-h9dShXbsDE+qAF[
%dP58G1XT[VC$TFoZdb@dkC$q;_;\G^;l/Z]=)0B!jf<ief9R,U>`2]1ol'[mC0H1Y9r'$&LZ7**icL14r,Y@LH8%!4:%d'^)01+3
%-091(IX;3GKaReLg3RT,@Npn*mi=K-Xln`hHZ;4b^XiV6'$D1dd*Yo[b&`KuRb^$8<dXN&Xs:Umr2UG+BL`>D@[9$_&N=HsZBUn5
%Zr'+1E;Wfof))`:(?]"^9)XTRG1$Tuebt@t8$io"]SuY&6%%OTO;nQVFiAnnpbO6d+j`Zi5cZUK8o<E%`i,"#;Xp!"nSdT2>TO?K
%\AI^"a%c\M9MqBrql,.ts4Nma@B),38-t7Y97Mq>kp*oRjZHkklBP11IbacG(>VFU<hi92Nb4s<*8;'QV9K`_HFS`PfpqH`6t8,F
%m]'Hk1EK6h=JE_,;[J;1p)\]iK(joImWaSZ5F29k]oo"GJ0eYP1MhhuSA@j;VO_&uUX+(^7La7])-enej<^I`k!hhs_fgKG^Eep7
%Y_?k>UP>qDDc+32kr4Cb^OC@`jhdV,IP8b/=/1Nec:0g^_@si78P$.[S0A$@k?)g]YjF6TOio,n.K0n0&f`ID)4<aP#AM[Kp3CDN
%GcnM8a)_Q8XG5kk_spipol3]\Fi=?3[daV7DW\@qfD\pTa&@")KpPATqChj8/4W)12dFLW7L_mk>Cq1Y)fPEjaCpHjG*"#GQT0E"
%7I`'rc.FG?e^)Lc?i(Fe?5D,GPUV[PGVa6HLfo_p\cdJhCK,)Q0j^skf*jXep@IpU,E__=\tiW/[^M+]P29i<#I$pegL.Ku[s.'6
%lPNZdht6!k#NAnDhM4\e>rCj2<1.B'I'&:2D"+6/J"-.!Z;&1^+WWAVXXJ'KNf`[=ni10nh[f\uB;3e)'s4u(k1d@p\9F[(+iA'R
%3ZNk>ndJP_"4_p$X/O^SIncj!HQdk'\>h^Q:m`AN`lcQVJ&Y:Gp(pWeXmK#=f[Fl>W;T\/I2DJ8d"<0LHmpfpIn2-O87+iuKmLbb
%p#mEAR@5)&"`g\$YI>Rb^IOXE66q$kSfY$U;4XHKf<3^!ZAV7rH@5Lum)\`i=E;X7eFmP"QJ;CQ3a20#Oq&&4O7>j-c_L*jB.5hP
%2D[TD2-\f>T2O.JTs=^DNSo^0;H*@a;WO'o-AQA(6\XE$d':"^8Ac0aa`EETp2;mn&2'"2qQ7XYbmY-J.[kNB7PFqHXj!C%[l81i
%R>Zm:?Sc!JD:Q>&4^_h^K-.J&,6TZj[r(+F`g(K70?`e:1%l.$W\J^p8l[=hUui'U97uo4#5rF]GaX@Q;d1`#-)#_\@oPgtQFXUc
%k5OaF;kT6MlIKS14&RHp#H.g06b1i[L"<NL;*&)08g1ZFKDfOcI/LpH5<Z/9IE]47'=>+2%0]@al6DS4#CO3_8NOnn[8tZ0ilWg0
%Kbo5XNVmWJ?<q4^.C^*c5&;MnEVUiACO)5s](s&N(@`06=grJbDdd'.e%]qFZgZ<5YkUd"ah*J5b]mtX@Dr6V0#5%o73'qV>B$DW
%R=S$o4OIOI7e0:tN3jNln0'P+RP&J2$!-'r_aRdrXRi#f[?V]pOkT96`oP\.IJj#QPRt"&gD,LK1G4Q98i8@#T^L=c#EB\_\.iEo
%$.WG@^%oUWc(EM*o>&V>0/Rbudf?1>[Zg-DIlR%QbWY*2m4I::&i%A,3X*2!81fQo\VU:6M@SX-MuKPiSm@h7#nT:YqZ0@PJ'%fZ
%:FjI_G'dfm#RQm:(ds9nDHkQj(Q<jX[[dIe^\Zs*+@.OHZ[M:QI4p^oEif.g]G\8@^B"P:<\0!UG3Q#CMI\!m1Q!Tq'PBi\:$?e:
%>IKudWN&Y?b/O]>N0;LUn]+s*\ks6JmWbp?%c<$IBUNqq7E0,Iq"<M(aI@N,-QMUdX+TRR%8NJtWGkjK$,8c`CG_BZIh5l60aH]^
%Ys#$2.f=ID?DLt_8Lt4L,h+&XKBK,h<DO2k8=WrGo"QE^5P$j_@+<0+'4MnBnGQ+-j<8ji>sA+L<KH][2^l:)Ac-P%1cZQ2$?Y#G
%9b']<<'XN?:nWl\IH:X]mVb:tLD,l;B^QjI5tm3S[CC.]La)+.#:mN?Kn"HY#N#qoq8]1NOn,Q5W"8A^WMi6222o,5%9G8q^!5oY
%XIVC+)*d"U\#64["A/No*[G7@pM(@SpK+gA!ZOu^I^<V"Un'7bAjSVmeS//,2moQu[aPg;>b)7<eIh(g,2K<5S>;]k*#:JJ$CKdg
%aUp3^8NDS2M^k9cph9KBk;$1p$?;AH0N3ThdBa!.cP>$:;nWKQah@(TMrYn3=9C0-eYL>NTPg3D"<"TE9DiEklZP;h*O8a?p:lB^
%cbt7k^e.q2Y=@i=5Ka.rV^D@\a9.Ng/3&Vb9J#L,2m?JFMK)%&o>n*0V$nt`r6)t^.\c&SfHeO!3DoCp?$gCX&;Y;7)Q73>m-.HZ
%1qa`Kffr:B4]!!<H#W!2aucl#WHX<JR<+V3;fYEGG(8\h'+.OCI"b'Q`u>dc/t`(g53XAGW3-Vtgu'qFPeKQif:R`h8uNh\Nll)k
%p8l1.o[Tn@^KtT=?cqFkg!RlmXr4;0eh@#>Rn#$2$rO,Jm'7t>Cc4Yof?3V]*'s8=-((eYGWiI=WN"UV<-?Pm*+$+cNbd'ZA4d#/
%&^IOYcS'Vpm*PJ\"K!1k]eCYqmZb.#",JYlci0$f4U`KQ0YE(S>RaBjZlGrG;")hY-._NW"unQT(oQuP=)$AgaQP!NY7sFqbpr]n
%Kg.]uZ/ZL]q<eO5+i!iRdDHW=l$D<0:#Y3U@*K;Baa&/3Elg+hAD]<BB4OQp]Vg0S`p->&8"D_Xc"6(+7*N!E;U5M%i`oN;W7f+/
%U<pWk!j'>)8VId=&l[`DT3EKD`Q?=,W#Q;O*=g=?0FVFp<N42!!)KhE_5)SR*+9Y9!tZdGn-*AQ^"91.Rr3_gYtqnKOiq_oqWm]u
%g<.'*Bh3Y"`uK6TYV@-T8Ie(u$m;<7T!k^[eW065W4,sIQeCCJ#&[eg;Q_/Fl0'ciF)USid;Aq!RtAU!>F2$@,Q2PBZ4iP:\oj#O
%#/>3F``A/D=>D0.d$Sf`YX3N=B0o=?g#u9d\QIZJd[!O^lA\KPgMuclfe=">3ZM3NZ[(>V`#X;X66%/:`V4,"U_u5s*Vm"NgKmK9
%r^sUbf^5JFl!A4OaeW'T\YQSbgRF&7<Cj55@5Ca4C*N/QKf)U/S8og4CKk/6BF=Z!;&-?$TEQ@\:elbrF9!rS(oBN`RC8-#M4Ju`
%d!0/83-<,5*CntY2+C\T;n/J8Q+Oo<Z<VT9(ULiuX.mjFd-M9MM]A6"?]OkA=nkSVYK#bI@=k[fO_h#OBc%6*M0'O`q5ES3+PU4q
%NZ8(j#NKC54N<\sl8Hd1.RF3g[i6ij4C\40QH1Mq.7s4g8nf/8)^2jS[:Xnd<]Dgc/??6s@kd4%.G/.]**;Q7rE:d-h6-)CMB"QM
%d)HOFhc<g<YoiR/!cLL"q3O3).\3j<es9T?<G3Wl#:erk'FoLdK^5hL&b9)4^Jb>RV_GF>b*gt)gn(hD`J84EW#_5^3Ln;[a0^?m
%E0>0R7YW+LEadj]T8$?F=kH6SXRdb]ke6W#b8Mdr.RBCaR\2N"q8>],FH'c3:DGnGqf?o:)ecdL3?!_t<Q+P^,1!lQ5*[qUiiI[&
%FT9ki9t"A^6HmX0s!7:#iVCddo^,0[<P9IiV)#6h)XX<m)[b(g[7NOdq8._mn)mF_66C>Sb#N;49Fj:Rp?9kE]qOfJAhaIC@4#Fl
%38L8U<U,QdjWShsedQ?7&Z%0W@JIMln#SH-CsX^:%9"%XbBO/#V[\LP7i3LcdCoZnf]#n/\[3=uG<S.=kD3H-<1F[V1p04!PuIp`
%/XT1YYN1)glH%4UCY.Mje6JcQ/io%Yl.&="/lmuU]t.[6Ao]6]BE,DHgad(f,q<j%0JYeeS`NM.3#l]+g![rY^Z7erW$>8Og-"KZ
%bZR4r[kq^N,gd;O`U9bfe*?l^hL=mrD-'i#Mj'&YA6PK;(T7$tAU*q4$Ru1fm'34r[Y;;^VZ`5l0VIR0@FTuD0bhku>!tFDEVWb4
%#Tkt8l;6MYU6i#,`UR,CZ3Zm2hOq+(P]%rWDsThJQ^[Z[H5mM-H^&XV3Qd)V^tD/RY-utCJe_%>cp0m>-@OjXeN*8c'SGX5EHr-0
%D@P4#IVB7Ypl@D+0U%M2+57LH_]?UY&.c%\)5"Z%n!is-CdZ4XC/H!e6$YlqSVQc>cB$*RXTkKJH/C[g22_c[(co6bTU!a_qCl+.
%bT'5W7r;g;?Du9p>0oeh&qjVT\mtb!AnSe$iTjk@MTK/o%mS^@(b^V-cI/Ki=$\I(U0[u$Z\;ENQarN=F!n=W.sd'k`1?R'TgZAg
%_7DRKF>#M-/L0^`rN6:19[ZbiI1BAh&WBuF1.7_6B%r_+H2:-!K`kup1i74p'j1/-H'oM$'GM\LK=jQk[/YS<(n8t7k\$9g$T,]3
%&i:gq=NoVd#R40Kh[KGWe4KS3q]TN=6;)lQfNU44F[;7":e7"db;/,[R>i8$f_1ReYe*/5EiD@O__m+hGfAPl-r)p;0:,-k21od9
%H/i8+7?\QcL/q/[l+/Ud91)Q!TQ&*?WA*NiFKXT<PeiCY@WXSc5ndsWQ&IT[*;-S<ViE`DEfHQ=-Gp6k<@nA7XQ(Y/B:44Y&MLJ*
%[naAl\CG4l*k6bf*"=?tHo9mbk9(uPQ&(C+Sc1=nr/8sNR:`p3:0l"b'DPN1+7#o3^U?X_72hND8C/--"O$WSbIOTG5uEM9:O1=F
%q:pD$WUr>e&Ldh9QR?0%[Rm-iOF2"]@O6h$+i&3d:TiCdl])[jMs?Qus4Ubl@7>oLkoYVPi9XpKNP^!23J=Fho$@,#A5WAnk\f@g
%GME(3oCNug3nYGZKkR7LFX)Z?pPZoN3u$N%3[BsR$)QSE0T0ffC9R.U('-3D][Q5>\_L!tq_+3E]O_cj_2/n=b_(6W#+FD5qKhT"
%;ub?"?Y+,tZYl*qdUU2K.3l"^?]DM:0mfTZ"e2ll9Q12tm:8KKTjRRD,tZJ#$`2/m=p:q+ljRuT-O6qD<)gH_@0)q_j2-@GP3Q&P
%U&^Zt[KEDeS5[+1"(3'!#ptaTl2XQ70R9ZDDos)t>".AL5pf?.9^L8]`*&Y3%*5Me5`;nC1ImKHLgJEg897V+>Q)ZS\pud2i(6tQ
%K_diIoN-g2]Eg6c4:NS>\PO[/\qb'"+Yrm"XS7mj_B/BTLI6<4664'P;UVkP,_?b3V?2AtM\*sQ<1q1;S_pk$)4[2Z#SPpa;?T%4
%WWjT-m5.';rjY^<5"D`EbLMed`RRd`VIiU674G.%=p4kOb]A`ti/4_[U#6-)YXs"'R6!'ra4,02nSb^Z,LjJ<-kWPdV2G\i%IL^!
%=]Y;*mDr>Iidp`55`WH+75"t`O78q]$FcR0:mVMG!\&e<kd;:f6]a=83\D2%d?GX-bnm,bfY5^-ENRplj0S41`O:L_E]BZld*_93
%K1'XHo"CT4aP=B!:2qQf@^GkM;AlsIIgJeo$9+Ad<n>mLZTPuqebKA!GaI$H,G*]g%KdtDLkf8kSheXXVlm)"/B'*a>87=k\Mu([
%JHaCTmrlk%/g!7_k?LA*PHLqB-(frb=RMX#80(lYc-.KYhL&"j9D-Hge9RsIJ*&ii8@I.A#a"K`3fg"=+u>i1-NZCu$_VHMEgq#4
%MS%iH'MEAE++/P"0cf9NeY()=?7=1ZZg='!IY^ingXX+\fpN2?^1s!EaGhH52JJ8(EEK?bBFiUV,87[O/Om"_ZKH2SQO>EEU^#SS
%+N8\><H.ST$0?ucijTi="!cG1:a:pl\#m:MWj/%Vs3^]L'XDU!<B([LQpZIilDE0&4kb?f;)2BW/ZF(k%"dZ3Cfp&L<(J12<ec*m
%_DZ4eG!DA7QKTXhkOJA>-26FPeY]pQ8+@afWp=W\:bk/+'DfsDf+L$r':N;;e.HuI:1Ltt@Iphh0-`<k[r;.ZBJ`nVI:J"0K'($b
%_1ZQtOZE=?B]=mobIZV-h<#Zh0FDd@>gbob\KFudBi(9ag$$!g,d:M\mJ_(5Ums&W5l]`hHkMe!i??d)9bdi:)l&gl)g?*ieQq67
%%N&pT%OIL4)fiYRo?K:E;n*pU;`F8;H764LpK(jITDFfUmA:HI&j"jbJcX$jL7p#DIk,7)U;\Q"X)f4o\E/s4=Hj>A?3Qg#9@sSD
%a#qoN>8$X/(o*T_EhP<Uj8E7Jja;!&Naf\-1L#1+emu[aY0s/#h#f$/K7-OXUP1*>Ch;D4#'oAZ,lbmTDi"q]*JCD-GZ7.+-OYt"
%Ec/`gj]cft$V%+hm@WFg`r3:n^Y*6O:.$RNW5q]!f]t!b<p;C"p6'ld]bt!e.T3+@/)c6JAudFHD$k>8QuC.,*DitIpCf/t/:r#(
%@Ysrt=rQs_J?%ldZaON4aI2_?kB:J0nh?prj0oG_>9n4gPb5AjnP.Eome:0ke%-B2AbrlkP8Dd49[F-Q?oFulHj7aWS&tHMpt$&8
%fDTJ$(PWdNqmp*l_1:X$qmG\b#A$+C8qJ=pXJ=jHXKpeuZ=^95-Al[h7%uMJ"0Mbk2(n<&%jn;ZS;0kWkT%B(ZkgD%(0SIC>gs#(
%Of"<4,P8(S<Mib"9OElWb=:.6g`WJ!p8S2/_?l(7l22tj)+TOQbR,uK7_D%\QFKW-#ddPr&48dYre<?OD&ZXR[f0Ca&1ZUs:>L_8
%C%@bE*/Zig&YLF64g\FUDWnS)$`&t#@O]U+--]i_nleIBI*R*OY@uI*Vk1ND=Jhp1<[Ch=cR"0Wkm3E8nAdDN,:*L-Pm`Nl2pmsL
%UUp.VCKp'0"g3,&WLtHK"Y.uu"&(F,=mLjqMVhHS8?bE[h3K(D#Y!.Gn^OWjIS1Ep*&$Q<@\&thbY?8Y/nA>%1E6@1I6jg[5Fb("
%6gRr+%$mV<Rb9O06G'4fW0,KFfLGRQ2NaD4;R0p]r,V"h6_&,Y'Y`'9P_;BIqsRR>>\bHX)/>A\rfIm+_JMD870(*OV8)Om;/(qO
%BV';6*;<:8Fr<X7'$3H<f,]HS/K4\C@HTbr2OW&K&W,;$4*=uWj_RPsd;lKa"Dt&]af%W:SI*>:<`O?mRL\c=#Me(Uj3_.3;s/rd
%G@^(YR7$"okl1)IC:]$KH^!LcZ(@Kn8-iQ:^X"=u%#9,c\8WP$Ktg*h0'h:[CP3\A,EBNKpmt)NU=uQA,Z.3+e;m=4FBD9N0`j:S
%^Tn^jRhpsJ`AftKcOV@VU/[1&)QM?K5_$-9BW0e3L&)SK#:j!$H@fNDF6(4Zj^8t7/ahbo#qr_/mIphWjggG'b3I3%-B>`u2DI#_
%_0F'BHM$?[7^qj2`Q,Y:Rr@_EImrJ2TAT-?QZFWqNKfd7%@f$6>;Ml-,o\KtWk*OEn6TCQTi:+0[q-E(E=$egfB=!H$7>d]X63A%
%pX>SKlJasgb+m_!JL=YOB'q/Fm)@MSm8aW:loOTWrGSd=o*Zal.uUShJp7$`5fGg7Sf(ckFQ(.j@McLkLuR[F<)%n#%p_75`R26S
%`fPJG*BKaG9R#>;'t-2qIS/=5D>n6O[VF/uZ"+KP??+k=Ecj/:$#4;Kq/b#@Kd;i&5N6-E2ZJ("4^8hTcA2Ka.rf4?!SD8f3)Kmp
%9\kI<!NOg0Jh%UYNhJD,fUR75pPl&#(nccC0?GX8^)CibJg)bNFUC`?>50=1.-Dr@)OT(d"VJ8&=HhP`VBRUE-$=T`\fV4$Np8iV
%9[#NW>81PcQ0l3aL);7Yj`cck]HVmQ>$sMX\NP(\78adcBZo?`T[#g=8C8TneI=3ZB>bl(.h1*%="G^j<`.Y71N^_m9r"_Pd,bb+
%n_ceus4qjf4SEYnA:oW+FWKRhR,;8us+tm#@TEr]=OFljNOo&:K`^A%2h_2688#Bl[cUm(`.cNPdAb84&,$\B=7<`=_M@3-P.fFR
%@PTIo4f_]+n4sd2$Bg/[jbe_"4k+f6QY`SuW^4&nh7Iapal3KP6ZqkG;'B4Q4p"`c*M;8[B77W/hqCMF^pf3I.QVC3!j,&$.7%N]
%TqqHc(P@n7Ek-XGC(W24%hbm"(iuNT@Xg7!+!!-LgHaHhL$b;p(X&Mq)[2*9n>XT@0iV';2.`/3%?]q!me,5%Su]DUC63F\#u]aq
%d'9$6]i\9Dh*MHGr=8^kZGW"+gDQIu5nPVr/&p*WkgE+e/%P/0`4])?9[?0<ApaGt7:urq[b`^!fKgEI83@X'r=$^)+@99YpD.S3
%(m'>u,o/8mp"MP$XrN`]l0<&&_2A%)'O/m0pbsGinWTUM4dZbWietp83bmnG"m#_,D?;dcV(1]5nVJL.4:Wopa\i<]e#*9`AD-3t
%7/4qlbPAI6:&>uD,gFO!V_i@cUSoC`8,rh$*-2*UJji+1T107kNtNC0[d$[KL15ofqhJbL*PX-C#;KAYIFrX-Q-Em4U>%8?&2[[&
%I-a`3RX;%G]<%VcEFUWA&B%@[p-DKJP%G":-XGP^rb?Ph@fj:LTP^](Uh*K/V3i\N"luno/m!tt2fI_'.kVNuXD-SW?T%=#k?=;L
%"1?:C7+QjJOKWJbbrb*XZq<.++52+]^OC7[q'Zg'HCd`iq<D[[`6"95**:ng\#cS9,c]r]rq2&]D>%n5`m4ll&[ti:@*'goRfTWk
%7L3o$'C1oubdFA_db2Bd`hA)gjLqnf9Y+;gmTe\>00CZC__Q?%?:3(=j</A3WEa'#_rTk@IAtBKVCGQ6mSILCo7GqFathOXrFi-5
%Jn3HUjM,?6fn-)3EsemBk?kSu&#nqM5=GKqdh\Y?E'LER(WMt'T&?]YmL8B$g)*s2'Y$Cu3MJo-Bs$e-LQ<nnT%2,l;h@;_4q<e3
%\j:&=fP&?^ADWjnO6UuqO0$=h%FZVeX>`u;D-@A/8=aB>*h!uMr.f>JhAP?l?G*TW/9:\bn[2:F?GrUA[AKM.McFSlCg=t@9t]&&
%.M@633L-,eot,^FCjmXf=3&;UMlokqTM@4%'_Od>=,L-QE^QbWH-S,bjf4[/XmKu:W*&>aQCOFUl+0qO_;W'&_^;sl!3iOkl8<JH
%CY(noo[fr%htb>XgHVXW0`PWBglY36Xc)1=Fe4+9KmU/-(@(FJ"X>KP9j=TZG^-PJL17Jm^8NCNioMJ.YQ>+WC0?=p=g':hmR"m'
%_.sD'\X*R`;?:>\Kb5_fdjg'caK&F%^?PWh0npd[0`QbB_gb4rHRjcQ)spLP78X);PRe;CecBgdjoe<g$Q.]R/CNfh/=CRR.n2hV
%,du2cGgF;"q8\6SJ(0#HMWIJ>91k]h)nUkQAc,ESgK'aMRNkR<jaCP!YYC4CXpjE\?)<Y!0Sb<V7rh?=<3\p6?0QcE/9c@o[C]uo
%D7hdh[5OmV3UCH<\hR?tX^nec]s^0C^@u!A<-OHAOWG%5MA@-gr)%4Qja\IY2[umjT&MBH$77m]d]Q]#h)U:fUGhWa?G'Pu1n4`+
%X+hg6Llg!],ME^P_)l]91D9G3pS@YR`LSo(1ZP_5i[.AZbDro++OeVN^l!^YgQ!8KG$g9FaV0XZB?j='p$!bd68LN`5\,l:`!mc:
%^_4t-\g9L@QR>OKM%61bpMUR??fSV8,6W..DVp_,GV.TrHE,<dm<+gtlMHMFX7rA)gppTP,jFobZRtrUME1(]2Vko=:g&97PT:o5
%*MWut8%##;*abC(noGO1QfjK;M>c!"I/"GJm$b!`Anb"FNmlXcn/!Q&<2&GZI\9SE&[5R&A@)ZAhC5BoBRh(rNBe:pWh*)t9-?i(
%IJ-F@B-+<CacYB>D:rOFHr5-9L6uZA)+:\Sqn`NuI6XXZP5SQ@Lo2a6o?R5f3rM]a*!,`pnsAueLl+T-0dFg_oS@(?Ytf%(8N"2E
%e16Z1r2<n.JSQB`$8qP&]hrX*.gJJDpHQ>q*k%@@9HM<d>Z+<C6To&IfKVOYc=U$:.Ju+Rq&P7V0:gJ*F5YZQFG"%hc:<51ORM[i
%6*0=XP(klsp]mKqMYPsX'YLo#$EW@@@U.WBdYKU-U)L"[`U*D'.^,]Cc11U$VKU"-f<k4620X/Tj4#^r[AGQ`HI5kmEe.]unW+hY
%ZG<=iY+Uj_$S!["_Q?h"CJ>DpSpS5$)e*3;`B0;MY,cmerb5$^]a=EjkA$oHQ^-l'I>4!!'_#b%=<QVH!8=KURH"WfoXu?h'(a)W
%S\FQC%c*d3'A$>i_qPQ*Sp_(tWdOiT7qZZ'eSFo7Lu<ju4ig"#aL2X%,[_p9[jkQrbu:knO3r2.CnDfkpe#Gnm94c<@I`FPZ"0eF
%?q@c#m%@Gi1o@c(Q((\3RG=<=XcE7DU-ZS!Pu_F#1C319Z6To]N%<6YcCJV;W[g<NeGb)AH#8='&RVgaXQWAurWOd&.bRE5m[W;P
%Pd;&"n#2*aqf;@_[NXi.j!BJ]^>F8N:l$l9b3ok$2#F?9*g#4t^"I)kn`;WSIE[/^m?:o!k/4ZTiWDjGA$D]B>4nM9CbQAMXWh4N
%:StKU+Rd8%k4?o=CG9H68i/hZ07aV*>EOcGGH;i^-PfU.M;@d-g%odRIAL0Z9)'tfi2Sf>BL+(r]:+RnKpKAh)V@]U)f/P#>;3Kj
%@X'DjO$@?>TX'pW#i#;ZUXA1_!kG,?+T6MQdTT0ug.LeeasORSFmV,N8RARTm0'=,9r6oa*7/TP&SUo[Ap)Hr\U]5ZB9)[eZ*U_d
%SQi]GDoFr=#KMSq0b'O*)lW-T$>&qt#JJBg6.t5<WB=DO^rP4N3RZc`c%-'K67>,DS-1>2%I+p92$A:IFeEp2,L&?`br_`n8`m2\
%kMqmM7*,<F`g$2NMlF56m^1^3ELGYKnSn:u-*$XJE8W76JVqWB:hao$-)FF&XX+0]77e\sIE(d%V1YY:MbojHT"`0Yjg59BbJ'AR
%OZ$ICDKS8)`=0k.$!I/=rH;Cb<@baA8OMaO3H\WZZ3sSd6,VHZgS@P4RKY"?N[daJ#_H_q\ZE/O#3A@AO0jV&rLBkIeJ#poBN)H&
%#8CCt>5d\G/@ZocP)-FL$J.9?PZ$76Y2tH_(XjgpF,?L.qpiX[Y.=;M7dda?NN]djc"9*__1TkCL3q;(O@kH#Z4&%SlRo7-OWSE5
%*M^)FQU@+R16-U`XCeM<=+PK84Kem5gQ8<'buM*\b'JZ_e8#*!g>O:ujI5dh<&O,'08F99G_UF8qrB`L,80k=^`aRA4B.])L,Z`>
%aFO]=)@6h%=OA-A8<6e0QIR?_)%`%[`cbUg?1l.PkA<#\)?.GLe$f'e$o;-t`TLpP!>)U''ITK(n/pl"U+[\RrZ,5A+7G6JhdOA$
%R5c;#e79UGYk89o?]DGi$^IVGFB42Z:Ds/\cG;7,Kf4:FHLj")_7DN,C@P7NchiWMgO86eY2l;-ee(`PVr;$s+^_\0FZ_liGLR&'
%SJ1Iarf#eI*^Be*JRTE>#GB%3B@o2j"s`8$BSkWl8U:K`g$es&arBl!mmZiBWuWVoDll@Z>_g!Bc"4MglOFfYraSIS(GT"QhQFp.
%7;p?L[Qu':\*+m$l%5)2<e?@;Z`cjS5HStL(7!:i.cj6+F-eHY\ic%;PYAW?Ha`L=[]InEPGeI0U)SL#'Z]MT1Y$hQT`%]?jKSeH
%`4<:uN_(l_-p5Ff$7^i'n:M<8Uul8('_XTE$fP[pFsQ<.U/O2i2WZG*$\2\?M^YV?,h.4F<)ifsq&BT-P,$T#bHJk`C3XW_9RW!U
%L#g+(^+\C=PWB!$QefE?E7X5P;R@?<ff.UMB"O/?]>oGSCtPlX_GD/PDCO:f0&Eba[No$+n]SL71$!C4!'O575g4W]Ut#/N6ouA^
%*!Dl0WG+Ob]M^ilYJ0]$TA<uVld\`'<u9&$d.G+spbg9+<^AYol^(KpJ\!K1ZCIcdD;0V8TNsl&"Eb_6IOitKKWOlYQ!9+&VT?\R
%YdQoJL8*qDcPt>_p>tRE]qhcN%k\ci[ibo9:KGjM9H6<t?3o$e&`U:Cb5XH(O@Gq(!9Ut#S-R1&`;6ng@k"/#WnKemrYJ(P4[dip
%p#d3='(aqb;N@m4%F)H1CNN2@)_.JABJS(a^-br9R\Ejj7f)K/L;"fs<XUYu!`e5&"mr%%R!m/uQ$>Q"GZF3D?1?UYQ!I[@gZLel
%]MB48k@9]t#)d(;LK>csAi%J6W+/r"Z'Pd0/V7fI(DKqL:j[);X)n'P/4.H&74e>#1C'mW,'1JY_dUuKA7(7(gU1s]@BH!]K[cLD
%Rag]K$)t^/d8#8HnuS>1#V#u)HqSZb_%BTh"??J5$,sO`[GeIs$*j'sM.Mf-.;gu8Ef@a$(5I`RPSJY+0Qsh]!]V8-2k[.!JF^@U
%@4h^0eFYdN/Dbcobh4EJCT'6aAg6LN_3bfKXrlb<c`lG#m\r:2C$9<*!A^"5^gfc1TGBYOj3=3Nqpi@SDO'5u!p)t8:@Y%&A]-I]
%B!^/=OR6b6\:l?/\`_&PY:5(8L?!37ARbg\-@aAZ17Aa]/GtQ(lS%`QXrU"R$pc7el=2>b.a339b^HTI7;4p]D1qNG1IR-N7KEpR
%$<B+'$aWdbd"JcaelUW-_.4omg)juG&\r79J3IiGA$+#jPMrG*[>K>)4;mZs4^Q>"=iO5E6OshU4Vsme=//1fN%\.,9,k_l+c/dm
%(,W0&EX,PG:4H#_=Ygm`dZha*_?5=-dU==@cqVM731A[tUM.ppeZ6cJl[<u168:3@[?ph4g.-HcPWsT6X,m4k2VkW)74P$pN(oWi
%TAc=05_30.<=ltbJuUb)C*.)VWlU\g@ir=6G_TO`g4:Y90^&q:To-b8^R`1ZQ75N#`P6P\!V)7#W:FDS23b_0*CM(8hqH2GLqrHI
%lV99`0l$-0%*@h7b1mR'-ddr-7U^dP"DNJ1D"JtWV-uL.lBP2\a,]`^UF::#0.#0AmLdd8K(AJ!?];S5qh7YW=)fOZd`"RnLD2tY
%0*2ri+ROMsec,LDHgBeQ^\9HZRD_ZLBQk.=:[OGE--ss+bqlA;hj]ObHUg!O1Dmls%1DJp9[PpN*1(Un@1T*=Z:sBZi.N=^;X3hD
%'/"l@5<4EB]_>U/@[e^pUQZe%fsdKE`%$Tm)L<H(24H=N7!%acb%G;?=/9]j:g(bgc?8;.MoC7`XG7+9T./`BB#flD/k$r>)^X8l
%L]'mQG=5`R)^cU\TBVW>?HMj:(7%S@@MW]G6eE:+jFno>T0n=O1TR]Y3.Wo@$FBAAVK5h1ap91D3Jjn2f7+8:Ac1kCdnp^Cm#oNd
%\#k$gCdmq/_:0&"#l-\hllY]1k*spXY'd/4n3K1&^Hs]=9rK\u;*s>dHB:=fReC,(gBG#0(Y=:"VncR],EoZ[crI3Na@%=HB[?lD
%M60f&ib1^iSQh_8RWQoVNbap*+XR2O9G[khT0H<Z@]_2pC_Y!@W.l/]U)Jm7$n+"=m2GQmT@2XQT;rG)!r6Pj&aa&l(Z,J)0g#_q
%^[b-Fm=59!T88$a/ZAu7le/g6&=%(AFBZdj^KZ.[jQS>u%8=Q@Ma[u*$L+)WN7MIC"F>.5W>;e=>q'S^b;?*/=`M6KB3kE,G'q"A
%r!l*ZH.W$Q<h%jTlP'.LnWd%"l$4\=\Ys)K,<miI#Q_A?a>[s?K*.i2YOI+h&LK%DrVb!AXLiidX@JDGo1f\N_%u_k;<U5UIXh'A
%5>?`rrt1IQX[k/sW90/dEdUnp"-mH?kkXZUE`^ZXU7-O6->j:+)+m3*%HXY]P:1IsD-0@'0-thi>Y3DBU@7nM+f_+W[[cX7R<sp&
%^/;Sr[`(t-,B)(id;pK:jip&t5eWZ`'(\jW1jm.2Z/r-eJ>6;LM@E=,E2o]b&>$1@Xt<"pqXE4:n-J4PN,b5e>b[.9O'K<*_',t+
%J_7MD*\tn_]3me"O<>3u8c(9NQr%kuU4C)HU?68Mfn9"D3.B1Vgs^r%?7[&+b7R;9'Ka.IV9DH7eZ-9CjEf,AF#[ND%?#gaE?[?.
%hD'Kb+qcnre(:Gu_Nb]:j5Md<<PP::@'"7[N=j:G>X_Uh=2*B&ghX&)/!l=FZ:i2+?+$Zm"!)4s`(:&#7$mRCj^I<JC/^#(s2d!F
%Nc8n9.B,jAGtqUI,*C"`4j.H?)_/q^$Ock2WRuHPep'eQ2mFoTlbSV8Lu&`.>5VF>a851s$sKR2Ve\jsaTWr;P9\g>^J3p\]s>dh
%W_EgrRX*aZIYG4-BTi!uXgaNRKI'762m)lBcB#DH8Cgge:ZB2>k/FFmO0KSH(5T9T^K>b07D9L1&`e6/&WVG&qoOU0Eldi'Ok<JW
%5D!sR-,/$kc=:7pP5D9\qOSGtis_=_2TUc*(`9OEbTSpkLQNE>Em/fC74J"11M=E(rabkdA\cI4eaE0Q`Io=eRUY*(?B]CCBA`]5
%pZ:;Q?N7?U!'Ib$Jf-%hg8p4*nE3?I:IN98D4rQ&MCQ.d^\b;jVJPdmb[b2beSKgPnRsat3H*dG-bI:,6'[Mb*I`AKW#G4ql;u8+
%,8V0>P-8b"\akt3"]Uia-WC_b.JSHTRW[uhicUbQLk6qkf-fs4:5_OFHfb\2LdS/\n%AP$SHH/@C`\N>5p(/u=<9P"#]2aQK>KDS
%I/tUVfdSg^l$Z%[8SWY</oIE"-CQ2E_SK57cGAC-jbFi(Bm;<tDQ`^H%+(3)"o")r1g:\A3M9h'k)HuAW+-;aB&@[IbR1E@VG!5?
%I[d8I[PtV3TtNM<<*l08I#pE^!(h2_8U3Y#(FbUPB9*92e;QE<i:Rd%Ed#An`^\V*bY1"uc3bO&rJ3hP](XB1,Of?Hj4oOWq"k.e
%mK14ADSn=f,M`8;"e&1P"!Rb>cmJ`p%c%3X\DiZ`cKM7PJ^Bf5pSP0t\>TM)eX\,i.>pom)T!_T=un#ZM";!>84Z\GObjYA_`2Y(
%`^*TlHmb6i6#6(BOM(#=[\.M0XpBkXQ3ik5&h)>*1M#'_OoPb#AHQd>^QUi0+NZ?3l`fJDO@//EYaUGN.jJm@#nc[m_./[LFR%*N
%S``X.-0IjA0f?"daWVi]J]9H9d2U&G]>\P2h[K<Na)!NJLZ?'=BHJ[H+R5kiHp`J)(dWM8i#!*V9)Nk]mKds"!nKYH07Y81JN@q/
%J%F3[80kd=6dF!Q`s"_1D2atuec8LZ<VqYh:5CfeQ3@^<"u9+<IT39/TWIRQ7^h%9`@6(*RX+;7'ONgFR+6f80;F$0"KG'a7T\%W
%3D?^QOOY;DI`Jt3^!XR%5^`7M4e/a6*O,!j!G&gr]N'=T8H7Cun]`T\3FUY>-p,[L4!'X*Y<BQ2#j#fiMDWNecQM/OL*A#aULckB
%OjNs.XZ(0erEI512M_++o`^Va8lfhUF+$^.dWA-YmU:/d?l#B86970A"g!pn`/7H4;1r+dP'A6(.[PBh!](`)'-kKl4<OUf#DXON
%<?5Ln/&U--:sP@A]`7Q*(A@<:pV3,F:79o/3rbh:If;]]lTleX[ZHdp<qk.C)"`L0R#hU0,BoLAlsNW;=X"&u4#8XNJ0nW>e0!bq
%4qp"34=5c16,Vb_i!.a1o\M&)^D/=Qr&?@uG4C(9M#@0[_Pam6Q,-P8aX@a0ZbLUM;H%2_Vl+AnpTUc.b%8Ln<6?cQ6QG<A0[WTq
%*#C=504LJ*/]JCa5quK#"gL9q_`As13'3p_VkndbfWPq34_aTV,H;RjZS"BIek<%qeCJ(mVF@[&G?krLi8:\)+cr'NRlch,,0VAg
%-k=V$1IlV0fV@/>Dr>>r##MX+'j7N/PUMZROO:;h&aZ,dU]0!qePE=8'l"'Jk4n7XJDhOT<04u4$rnOLrr@n?92O77'q2O;A&J%G
%A0rQhTm&hR7.A86:ZZ)S"/J!dMVCn%UHu(IYmLNV)Vdu^cZlWQjC>DMQ>JdP;p:f-C/^PEmJ87kBB$T0#q.-f.A?(4cZnUX,4?kZ
%]SOiBR`eHL!NiBj#+>g"jti`RHf]dof9VGqJnqQfUWS7UZGh3!eP@[5oigi\"8(!`F2DVACV8XH8'QU\Z7D5gTRr1Ar>e;e!7eZT
%_nA.H0.EDA#^\tDoE*YiHqRp7P;;3+.iX;p%B7tg%P;7-IW:!#epJ._.nEgcC([b;TGF_J]$Pm!B?[oa1)n/i_4YD;`$8#j6$'u"
%[&/gp7G`$TY0ltig/HZcbFn[A@;`'VUgAoMj%!r/g2!^q(c<MAl4$/$1HoV_h/7s@Sl0^-nV9E&E<I#+5BV#Xc[JPjl?[.o!UXP4
%[a\`kA'4JpROmOA4rqs]!ppTCd;p`7KiB?aF,\qL,KW68%F0'me`$gpZnDhi&p_B:._NLU8:0nV@)O7F!QX+Rk%",u&hEO9e/O6n
%pc\<;OVF8Qb58EgKu4ggB$Ao>o!*>m]F>3-n&\2a\&6F_"GCkE?D1h.T3_$$l=bp@,Im=,0EiM1rQHPnS(?*?%$+2F@o'@sIs?=2
%f"3X'%]^8fl@a3Dc](`c"OWSeo%'`:NtbEIXIGkhj0tob=.ZYVD6s\[I0>VF65;482?cJsAc%6E?&ou\Bl[9!XkFsN[R5H=HOP4\
%+.&/'h\<D6Q:IcgRnMM]aA:ND$DFhh"!l3b)AH[ZZg*'r;gQYb[sBg#5K:>unif08Q/S9bs&5N^Z`!g5"5T[18F],+r6L-8)VPW(
%Ek3%SdP?5(lXe%&/WM=-RQ'2iQsa5%4[u)C(/SbXAhWXi-^\(:O\7uO:R(IPY[n6-XA`I4pV="tQm>2e!R817qTq0(&RD3Rdn??V
%#282,<q4\AA16,&mr/bjA.V5<j2u0QgAN1ql8!Dsf!A1;h?%kR4.TI&-l3*AO)[[@l:bEW_Ug7#qM'[7p"@+)-L7I^%41.DY3SQM
%glk%H;.DR"8YH>g]3%mhQlJ0I<,bYo-'O;Id@-H8JV)F=(G'>9q5VbU2/Co8RZt,jP*W/)T<G]D;TVOWa`;="q5C&I5r1'6=u;8V
%J!/A5Z$uV=:nr[UoP7W%?]C@Z0hm"CiQSQIR.`)G/nR@QO6/3-lLRWR.PcO&H$IRZPJR(;j22!LJ$[.FWdLfq6;,p.a=.@)f-?B\
%lTd%&!n[&[B2403*luk<.c.Jq?ac^t@l%"=o[D.h,7t51GZ,L?k+ANZ^M4S*'Pc[6d)3K8dJ#TDS1M8>C8Oh_i@Bn+mH,HU:<Z(u
%Agc>=m'"Flj/2nB:<7/1D%GYhZrRp?TOVW)NalF0NZbt$,HlM5EYW@gi#_-Hmmj[bMU=(>8TS\o+\,G_UG"\(i\"2'jP4p%#@IF1
%ABejs@n!f1ds@;1^]Mc#HVmc+'NA>4K=;nKDnt\#""d?N$[PJom1q,X5ObdhV>\RWg,DpU=jJ+k0*-`[5heW^:\EGr[0JZQ&NSOb
%7&'FITP8/'EJ<%ngI,P__M3f"oQ5\e9c9jRh6l7jQig4ul1f+@%,1>L+,fJ(m,pt1c"Zol"sr)K9#Thk[$^tu0`6l#AunCabGJ@;
%STQCOI=(V(5M<[?EO<KV&c'C?&L@]RPmo026i?9\!":(^l&fMF][N?7^1lrR&pQ&)?]+j]O0S(LjP(`f+g/bjLE\X)U;k<E_q`fX
%j@3B?$*I&m@[gD,7$Rs0#\A(#Z"t5q;nCI"'(.cG<?X'8cDdZtX`lhts.tjNA9AFWh4/IU;[(P?96eMrJZVolCZ.c6Cp3:qr[8mn
%p6G#QA?R-F,t\o/:M)(qIW[*TK=q#9d&Jeu8;eLa(a&R;cV9r=<-KXk=BfkA&dcC4==M6I3>36NM5'SjRZOs"P0/1@I."Ir@L5s]
%^DLk[D_QW@;Z+u"eE2Qa,sOuuRSXJVMJr2&ODJ!CP2Irn^5l+dFHP\;fuAoqX#]`L,>-HI*U(**L^DPYQ+kdnYS+i).c_gXX#9P?
%b2H2A.p4-C01M_t2J\k`<M!VLG#O/<!0,'3cRH4)5Zd(jFWH+7=t@l,&&Gn'Wt/9a0ZKq0++tCFEHA#b;)`0Fk&nW7+8Gm8Bo*$5
%'.>T95_jrbJOCh.aO`be[31VGRTJjSR6nu0DXKBZr&.hXb&.]pS'TJpQUb#Ch<pqGE\(6B4f(C.*(r(o4EOT&WXom3/Mrr!gqf">
%4_JFUe69'O+d][$qQ@)j,q7e\T":+*fpS;b"L=mlV4'B.8HM"rR@66B0@C!):M*n.HEF2VI5T`9d],55<0%pD!OFjaE@Gu"[8R4q
%;u```eEB<:Zgd)l\JE;7>u`K[ZE.Z6a,6fj2BVJ[#qE)u/U+Hm*2b$5CC^ad[`Glt<,E2BqhEtSG&MDcMGkO%Z4:2W8in4-P8Zd!
%9][CNd.cLP"<)<L8ICSZ.o\5hQ;+c'U.XoL>-Gm@G75h:HeL-oYO3h1?]F4@KP&h,k_@%!@joArjY.!mLmY7.mS^rY9"-GmFWPb4
%haj!GapH,VM8;`Fh^tr>7Ec?#JGhfW*J^h"nSi6F7rqt#'ma_>=Kg?Xk7PCn-h:iD/O$!ePc?0N14m2.+IUVp,5;f11<I=+0'Ac_
%]n)cNpNMSW(%EdUK\Ucr9k7!&BHB)[`T%3]<&7J_c/`taTaE2$.c"/N*,UG>&%(8pd5u*'I!dIPi\'T^!^=5?kPePT*`@Foc*0\V
%38/gg,]eJs+^TRQo7*Fb7js7Pj%q8kqU2e#n,rLaSs3PFr";diqt@5FM"Whs4A]sp%>c="hkPtoZVOf`Q4rDt[^a#HbIOgb\u'FZ
%/S^!\2J^I?WXF6dm#p,23+0C_V'M=FDbN/m+`6(rX#8%2N7gs\AO!*ZnFMGqR&g]]$4=6VI8`IC(`o](LKf9(\`PSRFBR8J'Z''p
%k^jEt%(*E-1SdbAD:^57R.+\MD`o'O`?Ii_s#-ts^MQlei!29FqFm4PRfWAgjnT8jTN"r&OpJ@oMk+t>C-Qi.V&BpN_&uK-Z*I'7
%_G#a5)Op)-5]oNhd7!.3"Tp0b0a2f%)S:+>obeb?.s3Koic#5fDhp1s3VQ8@/Z$P0<F#m#l)=SK[nHJ_4L2)1;XI5DN[4OEmR[bS
%DE4@ZD+eGVi_NQT>#CF!or/q#k$JkMQRU%qINXp!M+-TKS>A#3Q1a`^<sg?Eljqp&PU<h6AH?H__L-rnO1P&JeO^'LWrK#3JXfec
%8lm>P[!cCKW[VWf\AN=dc5;!$Y!`#mo90"fjo>;Bba?_hp5N0]rb%,=-"T5PLrll'KdIHk"KE#E1&0/`Kcr_/k)/^E<(ss$Gk4J,
%<(.HbB]=:[;9S45We1L$rIX.<3'pj14s!hL?B!H7,-,U$1B;0r`ZgoI0S+rb7"D-pk`dp.,#*!t7XlV_cWErjXTdtW&#:fNZ\:*-
%LDjJ2)stSfF,O6A%2pY+I"""F9/To56kpn)SD.sC:I(K=<E'X4q5<D(B'lEYQ@Gt6>._^,D)H_l$;-ED3=B/PSm+^@?3PESaU7r&
%P-9W<Ha`fYB!uqKo1)!O\gsFS3'+;((";9,0#ChX6pESB4\SF&+m>Q+9>c;+6&-C!_h#q19VAltL:m\"G^jNr:`b6,?J+4d%n!C?
%/gsh(\YSPeliC.dJJl`O9mg]L&_n&)3)_h2V'Lgc^%9A'1_"n1lK5cR__7p+g05Di1e3T8!X5.fIR=;7Xs,J<,1;"[m3jBk?,^[E
%mKZ8p=Lg&Bfl=S;84,-KC3Ul5No)0`!X<L/[LCPaWIHA00T,3rDJheqMA/a#P)">8(h@qdABtZPI,g*a1%C&44%A)(#<@+;G8&gZ
%jft8hMED!*7Oa`02Vkmf8j2Cr#%:Z?+P%5K-JOfUl_O`fcl2ejeKu`%8cCf+_PC=YTt_M:cOVc^9mXd'd4)VV_DjW4mYVqeWbo[e
%0,_0EKH(c[gpc:&QeiN'-$g;eSO4!Zgl184B^*)Qi^fPkHEaLB=AiU_$9G=,\MR4qo8OCNoAOFB?acf36sjD8c(J4h2^ij(=KGQX
%ri@g4&NeMqYU1<`bPp)fr&8Zmr$+=-5Ec7BI$%oqVaXCCR]&kpA3h:0]H*MW3AX"T^SEh*q3$oHeCS<JKCJ1(-gi6g!Q`ga)=dJJ
%8)-cQ4X`B&17?R1#3FKUn+Q!Y\1c.&i*=LOTdd^pI5Mq2M]5A=b"fT5+j:$TlMbLU85c.)g;7Dep]Srao#&u==j=Q<F>44mCrj5[
%2.BsVE''!#j=0j>TL,_sf.Z<m+#g+[#V48,j*Kjd<9]7i?KQ-s?]n?4_nNB98.Q&eje(*P#+j(BVUq885R]:XI%^pPO.V^Q!I6uF
%9'oaYSJ#pAoHoSJ4r;_/=,E:m<1rqA(@M[X2c'JRqSl'a@5,_LACR]a%T\XB1E0%LfkW^;8=`CPjVK,ulkE1g-X8[%d^r`7K44IR
%@TlKX<o&4m*jf7d,_mT[b=<V"De&j2>=JYY6n7,8OqE7n/&GukY*qPOVkVi;jO?8f*auFH93"6De0.Y10``Un.=,kg)$MimR`")R
%3arsVJhhcn\bMn&3T@GVY.O2[9)5p7o0$saO@>(tHI-E=`(#=%PU4DE_V3ZfiC^"^aDnAnV5l7>N[^Puq%A[#nq92CakfCHp7N0&
%9Ea$1UADq]$S'1df&Nl\V%B)9QPbqmd+&]O'j2&qO34h$Ql-^CL)DTbIN(29])Z//l:3c.[l5Zo*F86-]IL;DYkl\Rjpb<oPjM:a
%7X3Oi3QeW5I<rj#ERtTtB;Lau8XoC"cKr'lE9EnM[X%i$lqcX4-6Nl`s6]70H7_.?lhiA#s5CU!+:LM/jZR\_,dh2sJ;,Y:"k\2X
%)U681iGMQOE%(@nGC=6qm^(5nI634Klkcrh\uKpR?6^[qXC^!K-Bbp,K!&Doh`E`=`*#]53a-2=[oH5/>GoZ_Bd*$Y5S5*jY_l(L
%BU@eqh?lXcVS95Hg\?N:))L*7QN1<)=jn-mP^^I!"dm;YB:(#=ct@,!;dc["EMqn?FO;J+F<4TJg4^>b3\L0PehkgbZ=5lK$JO;,
%A<Lb$&P6:P[)dc?[09SC!U71YK.BoG)#_77$]M'pS/SH7S64lLkVKi'n/t</J]-a7#5Li*4eR3qY#\c7*o](';lOi3b;9KHBfq22
%AHS(;ehD\aAZ.lh1i7gZXXJYP%!iX#NkG'Z3=i=HJa?#$Q*4l#7ml6*lFYUW:90srJ#sq#C1OGMc+eS&g$eU[QZTR1Y15M&j1:;L
%aR2b]A6:/2f6f]7T:DQ(VR#22I"^+c25a`nNo+`BW#@LL*PN;Wd`(;sQ5G]QQ]ZU(4G8*)CC:XX11MlO#EI-:gKJ>inI$h,#NU<E
%JD3#O\eU7u)?)u0NsGCIA%u83PZ91P+K>\W_/aW1>trSX1nlB<X*lCb7!&hKE4AZ5L*Ln;qf]M[C<B'N@VrR`%-(<t./r#1q>J$Q
%mMn<Dqds]/%#02pS;VM8ITSHkE,Z@F;6]aEQ.iID&WW\s;hB[k[ZIm/I7T[E-EI;ai:P)*@WoD:a:[cWR&3#/n=JQWH",A3Md_nW
%.%L``;5Na4Q^O_\GiZh.L",1_KNb5=6T4C2ZWdea(+mAP2R("4dP_:q9DioYIp3(d9W(74!rT>hnkulPqg!RX%t:4RF:\M$qoCF?
%b3(rKH:>oaj:Z#^*M-HK)!)k^!%_]&p*Q6c=_A<J&ghFj)%N^C8K]a/Sa&Ha&];o`rm>*KFhWmYnmUdVX3hH4,%Q'H=>4Y#@Pm3c
%TmQi,GWp$q>nUB@4@bNgWmUIWm1<`Rs6.dVnFNd`C1!tKXt5*O@EhI^!+=>pV`hAVj%2UR.YSgXkRIIZ*NN68X:b3J@t4JV55KP#
%b,'6knT*2G,VE_!`nL7=$?tsLqOGStnki83Vguh@G;UhP.Y!G^^q#>hWL/Qd\:@Fljl/ZX\F6l+*Jt6U^2gkK\TP\CR%>\cGYK.)
%-;WTrVP'r8jRo.lOA?]@A.>W\1dd],SX6!:Og0h0GG``pVgrM]Id!o+O;sn)B>+&pJ$4EdPGP745UOcm>#NIp#>cp$7YqV-TM)(4
%[@IQem*+%,8<spQ$X-`L%PhHP-,J`rY_-In^ITDVL1e0G82`is-s%4"akp,o*jqHcplRLb65r+:[06)0<:NsUnr:2HfF&JXeXtM&
%+GoG.bEe5$A83+pb%./#BCE)o>.?8D;ea4RK:Jt1$B/Edk)n>l<[@"-=6V^1kGpf;c9H_C'0ZO/J+7nJ=.<f%4d6?aC(t`+[br/K
%qC+BrJKDYhYu7T3n4^_VAJ'!R=r*3o>[fZM.?5"pCU4BLL$OsC>B+AK*[o*k^koYY5n/([>,;*8#eaaF.^d;Ih1,;4&o0a(FZT7m
%'!D*X@GkMV1I#]EG@@U7,+rhqOTnam0"!PjDqq1T*:+HrA:T:sZ&4mtT\56<2mp3-Wq;cNqX2>cp"fWYh=QAGa55?]*'ct$Iu&7!
%gUP<@=FmFLau37`(i,.CCUpF&)D"3+BNYU%&^$5?a57n1hGKHZQe]:5C<:ecm%\j%i#)&6KrY6RPLWqV*Tu7'Nb0g(AJ1)+S[sKN
%-pAkM&j<(Fp?Pd0-K<qkp%@rq;!_a;COX-Rd#,@IjtsueN\=:ME=.C-;qGrXVmFZPqpl8U<:'b'S;_F`,7XOd;We"hKC)<t!p),D
%D^Q*iEI`!_E=/b-c_;rC(OD`G8LmKr#`o[:X*GM;$8S"@\=TJA3iE>_Y-HtsCm&i?ZHdl,U%SuF1ncHI68#"3529T+)>5DX"RV'S
%/%ISj/ikQIG:Dq-<G(?(9W^'&pL_euWmWTsj79H>U[rJS'idGfhg9I?ciammaZEO_C0_\"(TQf=T/#o579c=Ln!/!PX=tjAjAKK1
%8Fu<,l_>7<+i?FSB0:O3dM)<n@S/[%PO1JFO7sTmfCg^FVSe[,R.);2En;]H>%>H!r62Hh6Be9H@.h%6,H@bjSb[il@@3T``;>io
%Q@-o6/I)mm05(SO7oS_LS+>u$Tf7sF*$[q,YjJWBYCM'O[VT+g@:2fL>m6@h>?rWAYkmk4T[^&K;&g3$i5]$`V.lqF6b'6]J?E)A
%?F0WYFR>JXZniodXXg"64'UGh@p:t)_UP/d,+tG![6Mr/MqD.*-&,:Ylm8Vq2OjQq4%,)$!NV]O1t!ATDOE>MB\Q@e2`NA*e-WNP
%YP7;\-/Wq$ldI"MXBdn'+g=*W@@<J$AP9]+E)9llA&aH[)8$el4SPdRZTQZ6?d_HZrR05E:rYB*9-<(I[(91\hWC)'ON+.g:m.iI
%(XJO^\.O"sN)J(sE<p%GBkM+\bH\r`"7(m#%a<eC:c=)72-^qKP=AI(4"-C>`h],]:!(Hnc4/7]G$*X0?[6@d?uqe,d,?rj(Tfhc
%]O6l'XA)N4^U>)C9Z*]c9-'%;k.U8eTqa5AC&_Rm"dhm4bN)@n%#DG..PP,/agW08XN(Vd.FriD5:N%(Ck$KBbQ;b<)%V&\.W\;P
%AWmeThJ6Bmo^j3BcRP`Wr0S?df$Ki3n+R^5=),kSXWgi`'8sNt8O6JNeQCO]-NLgSm(1DJprM4&r*X^A6gN*Krk^rb2trp=erC"9
%M1KY"hI&_DSOP%n0+BA*5@%jT7jpF=BKKjMp^Lr*^f\?mjDZ-"U4GK?$^QQ?RW/%T>@%#a.>mGr2Ws5,P#fEKkLtqIl"-:<4blFp
%dsdd$VcoU5q=6GoZIaI4/":k+jQX9"*bh*NCQ#t;oF=F8JgPkXCWXH8*!%%pPT>F3DLf*j9Fe*C$A68oZ/?f8\)C!mA&.@Y"jrNT
%(I1Ag'1i6@KX_(6?5PBhm;;tShU`'k?Y^4dOl0f"piN0F2a)AlbI^Fqk9,ro&g73HNc4>FcrQL\EjhIrOd>gnq?/#(r@Q(4aaJaX
%75%_C9Ju!He,reSVD=/k:7Z70f23K?N7Y]s=H%p#;I<*bF-'hi=LqS(0Hg_=hn)j.7$H')DsV)W;cSm:bd"TRikhH)T40,6ns+Ha
%E:WXG!AdHPP])o!V'H7GjK%rN.4hUrr&[u<O6Sl6<da5&MI4S+Png+5Kko7!43'Ge8A!$YGN9TNa%X4MRj7..^$g*fY;RXSp`.\S
%M*cuA@6Mc@<QCW*MK)gK`j'Eih97D!j)re,QD'C5HX*u:lW:4sMrRfOEog7$2K%]Q(MIQEFW;T5)A]1,=@)e4NKu113L@oj1p+Z,
%F/E?Fg64=h"OW4l8ff!@5&>]OB*qd@*2tT1g_,.Wg0\fXZ#<p&>VU[I;^j85]!+LuiT",o7m-2VHOA]Rp:0j=F6rb!BQ[R[G3qij
%Z[E?p]V^,5=<fp\,=M<al%<mIg=B]<n,(B]9l&2diB["0B#hUPl3ChY$)@%^6+-p#@T,bm]8np(K%\pMMT5B(7Zu>l08tJb6L2l"
%#HI@3#m>k0%6hmu!;)g!4/_<sOBI,imd8-cFi9Vng>T%\=GO-/P8R$'C'g/s)dfr2i%P3r/ZFAY=4LIUEIZ8llIaeO_>tR8#hsXY
%*I_71qhU@9pVlT538YEaXTi-2Vp=XDS6*ac=VL60O(/JN9*mu9RHgL1]j&+6)>2"?D>!:kIIJrlNcRi4knf=>I)/YE_VcecHnNMG
%<AH!Ql]DuYQZRe$<C!b`j1N<EFnpDDCIsZ6`"@h*GqQG$.?XB4E.@:fi[PRABi-F4k2CS/2%;H;(?)9,@gS?Heaq(D_KQZb.P'%T
%D_P>a3pVT[746@uAIQPY+:h.7g!)p]brJ'Th%Y>f,t#f7IKI[F"m1>ehYLGT;kYF-:f,SY+)ScR;=bmmqOX=M2#>>ST^5M:@aYbt
%K*"'KX\B!I\n+IAjK\.]p0Ogj+RKf:V(34h$ijYVp^g_B*KGiJM0YYs3p+/L"$>s2]db.K9&rkj7O]6H="06+U"!P\&ZjT18H]F-
%/t5ps+j4o^J8TIC+5d[C]<#;*!guMkcqY-K^/s0Q5:1h:&Yo`%Pgbn'qCqe,Hl"8gZIi;aa\-2mC?t!09Q$$YOPa'%hsHe<GH5_H
%5PBtn'_8l?k':g/agGuQ+CrDI6<a[nGc9+*#Hk_-ka#peS]@*aq41/5g]>IH7@DC;;638j!Hjue=bI2X/Vo;h4ROt-c]2G>&+PE3
%LBBSDa?8d.Z\PK:ZDm\+BB:i7eV\Jq@#MB9B4X9P`u]o2'bd5Q1Y6Jac%M!&F6jQ-iH_FN6^inZ#>o\=`J#i#A`HTl!kE'&CKa9D
%i@Mm;QG;0CT05T6/:7Lg+>aRZ&LNi<#W]+_iYbcjWK/_jW(LX,OuF->J5XnZS/*prC,,;bi1"2Q:`u^$gL;r<5fkX*;7kp4&iA9s
%mke0J#ng`!_gLp?638.m.V_WE5hQ/(hiUG,`'C"d=3Ve`9e%f31I!W&)_4uMK'l*5:P[e[#$aH>TBA`a7P`[E:p5s-'EM^g4r^Fu
%2=fB/eWYpdAF4![`B&EcD/J*EpNmqQ6)<c$R-GJ=*,,LZkM`@mWnPWsI$k'+G9LglGl_&SS%ps'QqD=j*BhBsLW\;W>/PeT&M'h,
%QA4)FMGC!<O@KVH)Y]8WK4:gW5kl>>Kk6/+.&bHCRrp0LVP6>l=[l4V/LX6e$s/i+70]uhb.$Wa<nVQteHn5PPFr^B;nGlDZ+sj0
%es9q-7H2niF:qX&^/uR-]j(,;)de@d(#%',L8<\3<dS6?kEXS"-Xi)@L\JGl.Pln\Ar>4lc"!P-<gj.i=s_nQC$J&Pi,S4cFgqB3
%H?<-FT4KeFrrDsQh'4/`7>$qc?gYj-;:h&s-RbM/B!:luPI?AP@h[Mb0_e%1*HL!dIL-Qg,E70@oC'*9LWa<o?;gCJEPTrI+DQ4Z
%c3d'KY,j\KgKQY]F"^2#==AN@iBqgFUE7=8L6o=MWN]BMW%t>/"&l$Yf2o)a8qg#[N:1)Zl.p=c!UKeg3cr<+50pqk#USCrmuC9T
%9=dS4E1*(^J]7Dq2+n)*"pb?=e`&sI%]B]WOQ)aNEsO$,cg/$Nf;R#UX*;'<IR<-]!NRb(?J&<!^h73<-'9_,&`6F6&Kt*B`+oTU
%qsLqub:*b_ilrqtdOu3g24_mG3X$G/NIK!HjP?;[Eh#'*j?ikZC/H1pK\'HCe7a`[?fJm06sdg]UWu5C9Z7VCW,EnQhjkZGIGKl[
%fR'nl2E"7&$K=R/^6O%>Fg"NSUu6s25^3d'HQ?GgDN1Sf#1sgU"4rZmi1CE9]=`3eiq+&ljFG^gfH[!nTdo(c*A/k>$mN5siPBG^
%8ZhM?>b9Zj!2*V#Dt2P8gosA@Dis^%C1o&PoEtifO$*$sJWa(uiOKPXRVZ$D4%-AE)G=0aC.j]Ogi+gcb4=pAr%7laRp=VMg]!KY
%on:d>@X@En+!-Z67mp>_r_-g1]&q2GB>qD"&XRdqI;^3ULC\Q$](u5Q]kr<X>-%bf@&=*&+,n0m4hVOqPNTK(2AM_:qh(I"K#]aP
%^?V9$BG_DmXY9-F8bBH!i449Qj4:7Yr+tl]G98[B,WJ<Bn,E+Ee_?S.HhHdpJ,dPJYCCrmh4NQ<q>Kd^kI9@Hpu_oX9T_XQ."2$I
%(N7%bn]_SOa44Qu+b"q=g4+G?m@XCU@pJkSJ,&H0=)YkPjsiK6n+&\ls4?_R3WJ&FhZ)p;[hAG3S)=1^pYS4+,&b5GrI=h6gV:CX
%l].TaiU;9km`c8lI.banJ,RRX;a:7>^<c82^?D`[Mse`[of`*Y>PDXBo(W&8Xsl<EqnmVB5.KYahgPC^\$+ZfpV4H=k(d$qI;(Wi
%H6_7Z07?kWm9c8qBOC_K&aRjC^HUu:?T'n;5l=EllK,K>^%ib"I`9)"o;`s>^&-!%kab6!Hh>i_s7GTgDr/5(iP3*QpZ?*0r/$YB
%f;mpFJFYB9*hgB;G8:;$f+J_c*itjsFe7M]Fg1t/>K_J71RT4Vh<ltH3p,36:*2;<+K:m3oVGQ9::VOQ]dgQ)<I-OOBYASNrtmf\
%;qU+M<8PH\-4e8L*Cq_!DPqf(Th>lg4&H01TQKbRSL8UF,@!HpOpB:Nqgm:nqS^_Kr%J/n,='H1:h?CA+;n"a/ATWO5c`[8\&V2(
%aTs^O78I4'@2!.i]Qr-On"8?IIL&?%r;+Pl@*GJ5*&>@\?ZMsCqeI@^Eji1<`:sLBK.b^\BJTt18//pX(ALeJrl&4Q*$df,@]e,n
%QVSX/mY[W#@*OTT:aM8Ufsi2lHZNblrcE=1N&KHUS?/O9Jl5YZ&qK+G4DKaI=<o:05PJ"kb(L3HW2Y`J!H.oU<KdmgOc[abX<le_
%a5Q"sE2.S5Tl_^RK$WsF%crSpnZ0K$T\lMU+N>JF2n*6']Q=!:&eHds8m0>a-_F9u6J-A)(-^Z/=8J-_dO2+k&6l\)&hGW))t.UF
%U9tc))rs_\%``Hi@#-RKg:,,Ve5I&A;+!%M@S,dZ3KR2u=6b(d-^'V$DNC/Z%gPor`;4S7e1N%`gfmtnM:P!UjLm4R9K9d\S/Q)U
%G=I4/.g=%,12"#%Fq^$%r:&t6G+1O]*V$e[`S+%d5W,-XCc\Dt]FkMYg4LJX5l[Z+S+Fke@PasE(Cen,Bq'*1Lkh9S'*d,+^nA&B
%85,/6VY$=D+etO9[D>BO-GN2&eq(Fg%OL[jS8653i'OL]:E-EkeFk.EnOT:%aq<n0_?QJ<>O3ZlEDbr`?)/*&esg4s%gk^.ZRJ_,
%Vl:^VSWU@f@iHc&d(Q-)%9TJgY*46Pa##\FMgT^T@;L$N?@"I=I3mjfKk#ZdUY8V1A]J8F)d9UcoVOTfP-"iW3^(`qK-6!SB!)qE
%UXgI5Lo=<KGn[m`[Y%WV[TR&Q1a__?;"r`9QO*47a4IqiMVVk6]A"5W*(1"c)F/l+h^(a:f9Gk]/j4Kb3e),G3)'Lkb\k0S9J>hH
%j0nBY/8<nMSW;GX(dE%X\p^&`CV9B&EOR%aTP^:6q'!u*Hh(oWH=uPP,+i_;abk)*(`S3V`8]=Jq,<N2.#NZ8CJpSkdT2Qe@Vn^r
%@7kO1.f"HhMi7/O/1(NPi^1sM(2$!m1$.X2FW8pK^$oZfqpP=0j\Dl6ngK:k2a4D<MdAGq1g`-#WYVP4/3WEgd`U_J2i`!`WU@1Y
%ZZd>k_<]`(G`&.)`(AQM=n^_`D&U2<_m38^fj),%@6CG+Tb<VsmH%peiN!lK*6k:82O6AP?E#+e8\'bAGq*UohKXg$?"dYHEW^_3
%F7-)Dn]O2jj99RTooJVF4F5>s.VL=XSN1:h6WdG,3H>K`e5#UE:&De!D6SN-e5]QZFf.AeV8o0_%&HGlFrM$KV#%]?U6=(2'MWr0
%6&f%DgrC)o]:qDUmDuEA^55YBqcKN`N,B[m]<l624IFMOE`Mj$SsX;:Q#jtmQQDu_e*!G..'B%Hjd,H;E_2X!hF;P'=P+ndV7%fn
%![g<kIT#>%6!J_7r:J0Rl>8=2P>JDP+N0c5N38+A@P',tO,'^W^H5/(c.MJ<@n=tG>pQ_a&g&g.>$M`hm#R[60rB0^DY5JQTtV^1
%E0YVRN(ZDXd!"!Yj$F38VQD3;HWRY;NfH_'P@#b^b>-.De9WinW^)#C?`3^SWMZr8GS`?f?7n`He)3r115be:[I1HfVp(qaF<fne
%cB):T,?>2,?f"K1SYL+%/N0GipP8IN4U!3.MR;8MqXnrE[V8Z'qJP/!?@V/*9(^D<gkXW>h/_fL8?*]Uf;N>)-jPsr!d.W=!]q^@
%n^t;T!]ebAoc$%f`]Q'GfCiC27I"?HVFWI^_HHd-Ecs7_SC7AU]%a7"E&YA$41$g)+DbA>^/`/>2W-/hEDK._N\_mYmW!Kb\F0,'
%--(^s+NSYep,Ku4`@mJS\F][^^3=J*F;9?59kOGArPU$2G\4^U7*]]C:;qdLWO)E]iVY]&ZU6UGaen<=;7R6-bIUl-Eg.ZsisajI
%r<_tE5.4WCV@b,R!;en<<<e'@fr1I1d<ZPJ?D\t<CmuA?6,=Vr-H^5K,3>4Sm=)6k4uaa8q`LVTp,$t]1IV(F=GpN4XI*apqnf(Z
%=)j3h;Fb!<YC1=7I'H!BXMA)UjFi7'GR?5H'Q)-[`kBXIR]`ll+/.m_6Jb`=]6(tp)?ANfmNF;Cl^\F"Qd!X,1JGg?aL!So7WPuZ
%k=N7(K_BJ+>K[^;9t7"8S^?,g%+QOKmMD1lZ'CbX>_g'._Q>;VfUk7rcLo#OVH@Inm&K%5p!>Qgk-ckAR,d"PMF4IgA`]JG9AZ$n
%r^8/_H3e;eIcJD]G70t"2k1C3NjbTVgqo:#T1kb7g!@X+[Oe_cR%hr(YC`ZugF`<iG5mulqY$J\ea9P7&&.eUBUAV;QD`(d6,8s_
%0IRAS$a_d!l^?=hPtbX!Ii7k#MCGpF5Tp\A]scF)b/QN_!a""0B-eh_mf'.Y0CHTJX=nFuT&]5*O=fY]T=?X]?KB6EYC$5@pne9j
%njs(kVt@hU_+q&k%E4b#Kbc2Z`VS"`OY#<l0kC^uWIjo:TiG#VhmF5jc0d\f`UA#"'[)F3mt^G0NLp-9HR3NLrV.n\jXmWO]]u&c
%pi@Lb`\60Lolf\EWgN'`'KMW&D-1@!(J>5bQ=P<MIKci&!._,Pfp04>b-e1..14&6;I`W+<VMUUiIfCX09s\H@;W.5P*_gK3Khkq
%,Qj7*1<MY4Qs.4#KfH_SFVpB,;NI)p?qh=<.`]^%1mQ>)bER6a&`q$5P[aJo5aaKs7t=@kCT>!`qTF(m2m7s9-E0Om1@lqbr*kqj
%XNQ=:<3+LE+mIXB%cUjGhBcZhlcu'-g!j2J_Q-hp#m0AAg;]/Tm]HOL)WV?0K=A%Q5M1,Efp5"`HV%/[D6!JE#jn,5Y(e1$'('q2
%R##:P<Z%nbooF;'rb/WEfDR<nE+\?Vp1!*N4c[-kFgk44V&rp.5ggeZaJ-s@h-NN-a@YTfg'*oZb)5S<<M"^^C!cre5ugEA8Y7lq
%[rEnEY00B-$k*?X(!1.8=MFKWe1NO^[>lH[[qn`g,cM,ARjVABhWQ/K9tFUM:rdYB>HUiDn1$0B]P4jq9n`^q`ni%fg[c_is&12M
%W*mUW:3JqnojF:Lb#VGs0-Z_m"1'l$pr(OmR]<o#DM\ID3;=-J\)+R<r>,;GHEA6KiS<ZU,ie`@rG"d<-Z-VI;;8Q072rtH7O]K$
%10:gdfFN+nQ5&%gK"$K!9Dch%Y#@;E'<$-p;)>./HRY_4**#O#YRoTrf3'9/c^l1-F6g8Ng!LsDVl`+/Fr\Tb&>Q);F^dna%t\NM
%Oe&Lo?AbFI@DGMnd#)^=?8=6]R\e;QlTB"%?_QZZ,"91M_,gq&]p#^Y8q#G:dPFNY+Toa?f73ZV`.H4:Se]K82i;^ZOCDs$P[ir^
%!)(\hf=LJh;4!YA-1Re-FsOjoNY]uoP4D^3gKsY\Q2'O^e;T##Jo66FPGC8g;7!-'L.:>G"^$)2ZH%s#`Yc[o_aBJTQ0Y;lfJpY<
%:<$_d2(r653gMK8).?'hpP!oNcEG*W'VZadY#K2$mP$a<KqY#<MR]'F_V&tjr?WHa+)c?8kFu!?KadU*$uP);rdfr/i\p6IHa?Mi
%q1!s1&]1t+/2BXm#eo4O'eLc'TEM8:CnF9^:Q2&0S";$'(3;ME_]f2?Bo&%TN!c,(Q76#hGB@gf^#mnp+gOGlJ@XWDD\@9rn!%(d
%KEk+[YVciGkth\PB[3WWcm::j0&&dZLak'_:,j"%"hR[m)bP8:EKnR9DZjPnaRId3XD"Sb3i'6J\1D[A7!=U\r/-n1UcXuL-D*]V
%+kGDF-PjJjK80>4Gq>ea8#oFcP(!o17q)WMEcrR6A'-PL:cM`alatRc2bD6>o%L(.?VXNFZkZQ;LioGZ9`Oc3^Q@0sNog_LVPQd-
%[dJPlM<.FfP;QR>BiQrW,:;]'BNk2^%k[5Z1&EFsoHQ$gOTn<<[loSKnQ?e.iA]3C,5tH?JN%Ifq&;?QCMB%VSsP.!hT;Po!$Rfq
%[NBe_8':I$-[Vusq"ZEPl;8aD[qe\_TYBV>ps'(dDHVn"dXt<QX-f+69GHueXaEIT7m[+-$OQK0CBeoBMbW`]LutL=Pl\_b\PTMb
%.;Bit>U_OFhj/FqO>//n%Ip8AO2&Mj5A@a:e=*[$B[jn^D]X^(rDqD*'e`#/UD3BbZWF)Rp-Q_iLt"(C1*;!fj?'`e;(f)]6uCuM
%#;r/Y=h)n/miT"!#J2#N2kTO1^\9RP'Lc.&P]OA^_5^B+-)t&e'JuJ[ZlI2B;mCR*MlH*5N>3V)6+)iDV+*^o5k`YorDk9]HkN+h
%eEk0-Gs#JU)Na/o@=#*Z;,Rg+;Qin)^4#'j5LR\iT'j^!<C!23aq)8UChC+i\V%uBKQ819]4UkDE+;TW-5/+X/^W#%!.B1jfHWUM
%"*"hD3m7+O`T[VHr&W,;?Wm;:SN/'p:`?:*$FXrD[m9a47mQ4lj0d6U(g@]P."FXqn=:2<D>2Z9"/\=(pr$AXQU4S&cZMJEm3=jf
%.3@:-Inp_o6)F;uAu]eW@NEr)$`Y@F7EVI'3'NruP>DTQYf[cF%s+?+Tl#koL9O!l'DfsPU8;<Lm,>l(CS/P``J_4TRW^%RJ+g8W
%KjY6h$0Z3%8ebT*U<+lZZ#)7=Ziha)kt8o)*K/_*@S<6FBpNc;WUCr+r\#]^>M[qSqqG(TZMjjtctf=4`c7'AAqUd8MM9'Eb>gAK
%"CJ>k>gL=7EW_`0$$EDQE)0[9k2C6.b"-f`%.Lf9XZAeY73)3K"GOLc+X*EJAeW4:Y?I6O+9Qo:ONAIY@G^FASmZP?J$2/:IF,Ns
%o2'g56]=dNgG,cdF"YPWQ./MUYAj[BGGTW9SEJ?dm12R<:_R[%3/OCZ-^UO'F43;MYRe2*1H$Z_,GT,#P,DT%.ea`^im&N0#LjS2
%1/T#bc=W.JUV<os&U2MmNfSqu&^V7RIhY6c1eMdl99Cu\bA.)Y)@OtQ2DPl'''&PrcJQMjAPEH?&PLWep\fokI%6dUcbBI4c]ci*
%!t8.e`9E'aN(.W+P+ADm\RA2e]C1WGC@/#MLg-+M2D.?&XmaCHp=]]5j+o_LM@'2Wgm]Y5J`%5R=+r>6!$LQeI_?A9WTdLc(UUbF
%JN=3)R1#40Q+dh.0:A-SQlNE[N.V`XXt>*H!OL_R)dLbmi,C^.2%]I[SU7q8EuEbj[C$ct/dI:.Ch^jZRgG;'3NS>@$-B^^e6`:e
%&^OmoL;\*kM;q0X5sHi@gAAoOiZk&B3<2i.q7/V_0-*9)HJOR"*^f<2%%VMUpS!W.VSi*RSiJK5LGi"e2NH/W4"WU4D#r%t=s'@+
%&Z&cB"d%aIFdJ"LfN=%O"DC$JcJfX$=X)02pPjM2,Bd+iHN_UgL556t6!='IR*'o,:(<+f_QsJ;ER$Cp*FOC))OPSU;-&WXbXMmb
%d]=I@M\NC`X[Y6g*Qm)<Rd-)7T"tf@TL&M0QZ^2BP1ARj$__/t!$+8DQ]Ji:L['kKZ'FnO\?EW6qX\,/fJNqJ9$uo"D#2W?/W4!t
%A&$I^!Q6B_8&"]p#UUh<A#]UKmT)kf(0u!g()?*LSs't_dl%/$otloQDR#_L.L@-Q4(VW2eZphcbpfP6R=S'PA?Or9/7R:DnYXO-
%=F6YZ$$RFh=P9Rb'L7K"L!ng.#=(ie;W`Nh!R673f1bj\0b+Q2#eX@Xh%[YHSs15S"4>e`ZCNqSU7-W94h$[qTtjaV9D)_"]FG?q
%"f[co%#?LHnje(+732r4`+JN"@><FD)LU#`B*`RLVu<*?mJ&t=QiDSGkin]=KB@NYQE#+?OGH'o'#r"$+qt=)/7H].FBoO<esm&7
%KjmLU+(tH"E=nV`'<mg4ha@<;_m^BuFG?1NA:_nTd2Z0hqeTCLJs5;*RMdgND_4]de&&HhCpe4j5;mGK.)3&X^k7^H=FB*Fk;7I-
%]$eoKL-K=iApZUuFehjY/=&[$-gSp2`S<nfS/WoCUkUFXPR<h')O&LR(saKpCUAr5M#0PAaYbMrO<fm*CNIGiUdCPmNfGS%3-!Fo
%)lt4i>KQLI5u'GL\?*U(U+C?rf".mBDZ[`3D7R;lg/>&,PMZ,a,cm':YCP"GUhe;7-WMrW@WVc:%!_Rf4Uf<pa&bV_[8(rQMb57E
%@?<"e0Kb\?c=>XHj*P)%g_E<BPaXD?8EW-&=?Uq<[S;3JMrh/d%?72u24#)$=&Y2HF"%hn#\Np&`F+f<4-lRT(AJ67U%k]!V1t(M
%6!``FVqJe"jol9d7'eYAZ5Bo*TYL*_'Ljj\Bs-_dc>Y0b>STqBfb&Npm]o3HQX>;VRnb(ZPLkpneqhPn.%M0cmk>9PN6X0pL%Ft^
%*/dQDkl0FQ7TE?B;,BPFJ#X*8M-Y$=phh`IG;g%d;D)>?e>tDFH!M:jCgF,4e)5ZaKE^-CBYkPdV1sR4YpQYLH5`sQ?'3Xi^^'O`
%K(\8OOn/bu;(kDG.`m/[DJ9*BkHl,Fr*6Qb"`oUP_!l,#(=]L!`pW[p%CB0.[@br%X%udeffrRr(UKAE2:d.b2,p(dk44.f^i8fI
%?4+$mTOKH[mJ,hPmlNKn][kAMN'0ijm#_C?f,i(uJorWH7Op$c1jn>/1b6u#Zoi>Y[_%LH,+e1rPN@tepq;nF`idosZ&@K4lFkJm
%p/NBuB51I?aMB7\]]0:P.(5(Ea/'7bX>WMD(oP^sg3O9f?P2lmGBc5k]K&WPYocf-,g2&c+qoZ2?/(<RdUD*\o"V$iE$B!3!9\W/
%6Cj;u@B!:'il:$d7;D-?XeW6l()f`3kSBYZ[MN*?'!7kLN?Q23/D$uVi7WJ5/HhtO^PqEXk.0*$ce_GWEFj(.bAg]8+g#FeNG[^T
%Z"/#Y/10Ff#:l\'<&K69"gU.d_l%6J2g06LP@(D446hSM":8"pqk,cIPJ39$=Cqja25D6lMt^Gsn'=jk`T81f=rlSN>EaTH5U3,'
%J3W=1fme6i<'Cm[cTT:9MlF(m\c<IL/pgMtp/K)[En*2])tB8sR:7I"[H8+fmF^A+4&JsOS-/%G!KLHnOrO`CmIcE_Yn/Z$/`]&E
%"M^F#pDboP%u*,)A[576$0&N3`b@DFkPEZMjr0eDNm=J\7't9AM]LSN<g(PR/kkhi,K.JqqDBHj^J&$R;Dt]B1FA&4"\<F75a$^9
%cArQA2t:c!?-Hf`MY@J3oqm'Bg9D0Eb^4.1A&ssc1>$b21(#)hgerDBmp[8Cci;e!:dVed&@8)h`0Ek!gaMYQ5cH@b:PY<]L.CC>
%Y"C=\!s$,Kp[8b/r9Z;3<+-DS_3B1j1eLh&=9-Ra'?8#f+Klam"hLAn]K+oH;=j(SV03E\ZaqKqCqYTF2jS:>#OtBOSa-^LHgs`D
%YU!4>>@RLCOBX[N>(P<rQ@gQC"N/lN0*'8<(Q9Ka*u(Y+I+^$=Qk<JTF(to%rr`@L>4tC:g%'@!C!mSISkca8Oa1W98VMH;f$oK&
%pIk.c,FTo]\*n.HAUg3#6\0#=2RVt\nD/Q'.O86*YgXB+[V$-7cFN?g:T);=\H#!7]m"<%$hUD65Dc&bBPl^tr5rY>@[M$,&q9%B
%4>B%Z=Om^\$A<O@`T4:3_H=XER;k!IBC1-)kQ3q%7RoRI>j*G]]b0pLL&-QHpj%R':Cc!<7qauO^"gDNJd#er;.Fe;,#FrWrBd0X
%<,<QL8q=NZB3X%pJu51:6L?[d__&:l)!AMkj4HeejSj:+M\=;:Kar\OFdIP,/aOF1ca?WD`s\<Ae02N?p!htj`=74T3D*aX(!hnU
%$)cBN'ftl9ZUQP97dY7rF<Mg?86p"S:.K9D%WGHYQT3'l]lIR,Hd1u;ImI<([L`Meq7g8X'upR3P\+l[;4/QE&MKT/=E.\.,4R8"
%2\&C@FMeB8)hK![4o1i3It8j,*,QA`#6Qmi8f)/Y,GukEOGX#;lqT*AKEZZST.ioZNeFd9i8X<4EgR?/0V_gD%6*UG'D:lAR?m#i
%:In!9_fha7oVIMglR-*H(lNP9g7aBlP'*uZO,.f:RJ(p,[5b*H6rPaWJ%2MGqaULTQKB!'r\c2+`!L"i_q:Y4JT8Q:<lCl2UsAk`
%bu:8K3"O3Q[`kuWBZiKLN(Y`c%2QHgqg2W@lj!r==)IM^*[M-/G@XXe&6F^E_IGBh[R=NMIJfNd5c)<XMnZPMe0^=d\VR@igZ,Y?
%+q]6)$)sbrZ3uQ&ZF`i[rM<AWD+A$qIhCY=4`AN,-$;G3)s</[+jVA;L'!5U3?WsA&4]8TbHaV'nJ8s=#X'n0fPf.gk$*Mn:1;ps
%NT($WpWg3O&N0oH:\iY=**riR*BWcY[a(q>4+G$5SknYN-R2br(M>]N!u<&,c.r^:gGhVOG8&t%kKubZobImLh:7<p]j)u71?<+%
%D9OGfWfius;r^5S6_Y,\(^ma/f#GN,l>):a!Lq1F!%D$T(CF!U&<jEC*op4nY'qP8VP?oi3Kbo17YD0rM0+b%Y.4fYM5H).]7iq)
%G&>H=kMNtUoa#&;8R#J7\';T5r.LYg!)*L;RQ'/@!;(P\D.Lt(h0U(pBPXF%Vr6g\)@NLh(lCS\Z@ahNrF&\&8]RW;%O\o[^sLs:
%iD1WTHno=q<<+2f#bPq_UYHccY\1u#l'N\M+WOPS@Lge`auCr5N_sm\_:@,Cq9g)PTL[p\%Rc6355+Ri5t%9Ghrg1[c(64AHnLmh
%Z6mf=Z12+9U;Hql86a4G(GE*S)Mc.e'^Ts87ZeEV.bIsWh.)T8antBILYKZeBDblW<fqtem.:\L$1g:gM;np]^I7alMCRb+XW2D[
%@2ondE@_-0G8+?ar*MMJ(2'Ut0F\h)+gblp"MpM4c#2=cTl3r)C@ZASkmT?m_8+I0C?t"!>uQ^Y]R3$Mh0Adj'2=o:E1Tb>E0L>>
%K*)6;.J`)(MEnnh7KGd!2=t_iiPgScnr`P<H06[UGm;`1\UekjMLO&8e;I#2[2m73G,sO$?p*'(YLPJS)Gq@A%!T\&O_AB[&(.c:
%E(&CdgP?c[Q1:pV44Y7NPEbTO)*Uf'Ja;QShpc(SSds<!9?1E!hAhRJKOZlG6H+4T'3DO]p*\r5+"2O2:kGcU28d=dH#DdQ+IQ"0
%b_4mn-8N'qeg1BO47dpQAhMK7*D]RaXGg[YKGF)`L-R*mC0IZC&3=Qn[Lo:VLXfP(]8CmkGYZV:AU'Q\&f&/[I+k86<N>RJb[i_U
%B=;DH1oH+ZVf:e]P.<1(SUBi%qGpE20M,-_@D1@M((XX4g"RTt4u^j"KUCoSN("L^.b'6O*4ee#7D&LEY&5Is)9Ti;X?a%IUa"EX
%MJUL@%gJ<5D%p,(d(u;?pIk$+IW,UW.Z6Si]PQE=Qm!ud&(>1(>39oga!M35>*>a6L0b:n#Q$(qZeIG4`<o0RAmMmb_q+XjYkaV%
%_q"?YHL*dU!ktuU-'B4`*Mo*i%MdeHRgrKR,a%46_H-4s?b9^pP[=Q<<7hN58_Ui58J]r;'Qk][FZ;!Cor)U)Lp[57:kbXQ$f7Yh
%<0uoSfbuI=-;;rfSl5&_b68@"QisTk?kKP-]%L?QH=Gce%Mi'e!<#;YPu/9-4_)BYO0(`l2DkKq#c_USJLa1kc3[a1gK`"jJl(Kd
%$O8-_8SZm^"n"o.,u;n*)strih,FPT2FXFegVkgeA_!d$>nTF_&Oj(@T@f.b@.e/=4jrd@6"Rm2Z(@qNk]>=5,aO]Q/j7cK6I19Y
%aLm3APKEGeS;h'YqpmZbhq,+*8Xd>MI&\iiH^EJ_F6t'Ho1tg3)Tk5*7@L)1A5"$.@`=&;P`0V/KgM8%co*4In]$*a=PZqhf2Uck
%D2K<PiHrr#;MeVso^Tdm:h+LfY+U7^eg&55%!(ZK6"cFcgZi+?55.,,)P%ofIKp,NkdM+EgK%#b.hkPI0IB7Jq=07Tl0G8n2rqt9
%(c*e7Z"s3U3%&I=NKsWu+"E-^r04k+D>4A`XE'qJkdeji(H/&b=1c\TC/P)`JRCa<rK^%\\?Lb+^*!R0j35IJ+\6U;.nP,m`FgSD
%r%b@?7_fg;"0T?5?^g7dRsqTrIf"iUC"af>JDG3Z#:C@\.CO3r;;DfN!j%VQR",I(5rgk&kZB99!E4$+-9Ka\i+ODXKhSW/EeBQt
%ME$U\rFP?Ed@?b>*_qRX`Z!IYG.B?eihs'.-d4R%5o!BE%u#lB#s0,$IhBa@59J%/@n'!HfZ>l-d4+M;j0D(S!m=7<!gZ4?@,kif
%SS!o4NLG!fV57opAhW]D2YVVsdXlp&_jhI_C)C#hJ$4d5&k%VX[J4/N!8[mPbEB-+j-G",3:FiTO>EP"]d\JCNmJ/h.VD;GWPK>#
%nXs-)*6!/r&_BuYHnQOfNL-9$`qf061du4JOY50*#@1@id#Ns*A9.rJGjN.FI6iA0]H^F6WA&6MRBd<(+q)#ke+D`mH\ab6LlIs2
%WV[o\rY)6ZqZ)lL/[qJJiq(jq\irJ.&)a9R1kQR9VTI`<i>5?Do_u+6r5C2.Y5HPBb1&!LF@J"9EEq-$_KZee>56Fh]Q_t"h(aLH
%cG&ea,<o:`pmaosFlN`R6$WXR!["QcPk!N=glLFOatN]s)#^gbN`>118>AZ]Dk[ftD/ckAaJ=_:mBt)U]2qK,.8(OYS>,MYkM9]P
%(LLG&#M]UGf*U<_)s8&)<Bum<"G9#[XsW@@(dS"*#fr5s!",JuJg'%!7=7-2T3s*E3>V#jc4DV9`C(ugdtM*ZrJ2C=ZlA6pCYQ('
%OA8ds0peqaIFutLb8u>VaYThV3VcEW>EbBFD1i*@MN!>dTqV7)Y#PlCf#afQ[HG'd4M2I_bD,#7lo5@RFKWB@bT=ra&$]!m31UbR
%"HZ"2Lhsd\ghgld-Zu#.9=P[>MsdX=XLZZ'eX(K0n;4ntAt7ef0cUfsDaueIW2a4X0H:..(ZE<1+;K(2Z(qrbVT;[r,,hT=%Bre7
%+!aXa<3\;\Kp'Dn(@8rUj-]ZS-BCS00khr!IKO)<1U`NY7,-CB"Qt/Mc8LV<_8$j'QOmu*^au`]?9gP=`Fi,.9gimKJtB*\\c*03
%=&O"d5M5peahr`2_RU5HI$4A/f.$ATJct^^L;F1u>bg._jC>C4`0'-GMX63DWMUa]]-OdW/-;%">"ZB1bK78/FO<Ae>:)/OWB6+e
%;sA^SAFZ*4WsJ$&V1&!Bg>),gm_(pUa^41pnOY`+/MpLDJUPXkPe7h^+73ZeXetg3Ea4@H1>\8#PscL@O`U'8=/:(9hW3VpQR[;(
%VUo-A4oT[i[C>-]PihZ'P(8=UAg0B$b[R#CYWl<+XT3h\Y(a7?.$r+Vq:s1+!T/4(JSjtG!U`C/CWIT72TF#Z>;ICgO@tCph,DOD
%g'g760BX$2l=LVBci6>":;'D<+[,$bS>OcPaDSYDZ7'pdq-IuE_itELRYc'$<>KD][9FT)6dn=*'nX')9nn#rP)WZ*l]mW?TUEdC
%K=i$RptBi`;SU=S/Qjqh8^4]VKZM<hAAO&/#&kQB(!WW)]:5p^)PicF#M!C2ZX3c9?=K_@&3K%aDb<Um9$5k%h5JNO\GONp)WoXW
%_f:%JrCW<XL)/nWE7)X\-(,CU\g%@-m_R@5q[>n;%M:H;7T>K*\**uL9&)cV*X42Lg,q@k<M^dJ,O-q"FJ/tX1aJIH;eGs@DgAp"
%@BcJ."pBQZ1+\\+a(!)\hod1\__ES]50/%cm?55h2WO^kiu&pe?DH+eR6"BUN91/,i7<WI"0-G)n8:Cc%t(.9;5T"\>a<:ZIbi$<
%]&Mlhd[0uQHKK_WL\AL_n[i^G^3]hALTeEQ%DV`%=+>Pf00d,Gp?e=krq::0oTrWD]t&F]h08YdDuTG-VjfpLnE)AgIfI<TS%nms
%qgZN#9pZfJo:(7-Du\p;s5s=__I7Ck~>
%AI9_PrivateDataEnd
